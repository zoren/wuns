(import "env" "log-pointer" (func $log-pointer (param i32 i32)))

(memory 1)

(func $f (export "f") (result i32)
  (i32.const 16))

(func $g (export "g") (result i32)
  (call $f))

(data (i32.const 16) "\a7ello, World!\10\00")
(func $inc (export "inc") (param $x i32) (result i32) (i32.add (local.get $x) (global.get $1)))
(global $1 (export "1") i32 (i32.const 1))

(func $stupid-gauss (export "stupid-gauss") (param $n i32) (result i32)
  (local $i i32) (local $tmp-i i32) (local $r i32) (local $tmp-r i32)
  (local.set $i (i32.const 0))(local.set $r (i32.const 0))
  (loop (result i32)
    (if (result i32) (i32.le_s (local.get $i) (local.get $n))
      (then
        (local.set $tmp-r (i32.add (local.get $i) (local.get $r)))
        (local.set $tmp-i (call $inc (local.get $i)))
        (local.set $r (local.get $tmp-r))
        (local.set $i (local.get $tmp-i))
        (br 1))
      (else (local.get $r)))))


;; (func $mem-eq (export "mem-eq") (param $a i32) (param $b i32) (param $s i32) (result i32) (local $p i32)
;;   (local $tmp-p i32) (local $q i32) (local $tmp-q i32) (local $end i32) (local $tmp-end i32)
;;   (local.set $p (local.get $a))
;;   (local.set $q (local.get $b))
;;   (local.set $end (i32.add (local.get $a) (local.get $s)))
;;   (loop (result i32)
;;     (if (result i32) (i32.eq (local.get $p) (local.get $end))
;;       (then (i32.const 1))
;;       (else (if (result i32)
;;                 (i32.ne (i32.load8_s 0 offset=0 align=1 (local.get $p))
;;                         (i32.load8_s 0 offset=0 align=1 (local.get $q)))
;;                (then (i32.const 0))
;;                (else
;;                   (local.set $tmp-p (call $inc (local.get $p)))
;;                   (local.set $tmp-q (call $inc (local.get $q)))
;;                   (local.set $p (local.get $tmp-p))
;;                   (local.set $q (local.get $tmp-q))
;;                   (br 1)))))))
(func $mem-eq (export "mem-eq") (param $a i32) (param $b i32) (param $s i32) (result i32) (local $p i32)
  (local $tmp-p i32) (local $q i32) (local $tmp-q i32) (local $end i32) (local $tmp-end i32)
  (local.set $p (local.get $a))
  (local.set $q (local.get $b))
  (local.set $end (i32.add (local.get $a) (local.get $s)))
  (loop $l (result i32)
    (if (result i32) (i32.eq (local.get $p) (local.get $end))
      (then (i32.const 1))
      (else (if (result i32)
                (i32.ne (i32.load8_s 0 offset=0 align=1 (local.get $p))
                        (i32.load8_s 0 offset=0 align=1 (local.get $q)))
               (then (i32.const 0))
               (else
                  (local.set $tmp-p (call $inc (local.get $p)))
                  (local.set $tmp-q (call $inc (local.get $q)))
                  (local.set $p (local.get $tmp-p))
                  (local.set $q (local.get $tmp-q))
                  (br $l)))))))
