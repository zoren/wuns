[defn wat-to-exports [wat-text import-object]
  [let [wasm-module-buffer [text-to-wasm wat-text]
        wasm-module [module-from-buffer wasm-module-buffer]
        wasm-instance [instantiate-module wasm-module import-object]
        exports [object-get wasm-instance [quote exports]]]
    exports]]

[defn test-asssert-eq [a b]
  [if [not [eq a b]]
    [log [list [quote assert-eq] a b]]]
  [eq a b]]

[defn test-asssert-not-eq [a b]
  [if [eq a b]
    [log [list [quote assert-not-eq] a b]]]
  [not [eq a b]]]

[def tests
  [list
    [kv-map
      module [quote [

[def -2 [i32.const -2]]
[def -1 [i32.const -1]]
[def 0 [i32.const 0]]
[def 1 [i32.const 1]]
[def 2 [i32.const 2]]
[def 3 [i32.const 3]]
[def 4 [i32.const 4]]

        [defunc f [] 0 [i32.const 5]]]]
      expect [quote [test-asssert-eq [i32.const 5] [f]]]]

      ]]

[defn test-main [host-func-types]
  [for-each test tests
    [let
      [module [getq test module]
       expect [getq test expect]
       text [compile-top-forms-to-text host-func-types module]
       import-object [if [hasq test import-object] [getq test import-object] empty-kv-map]
       exports [wat-to-exports text import-object]
       export-names [object-keys exports]
       wrap-func [list [quote defunc] [genword] export-names 0 expect]
       args [list-map export-name export-names [object-get exports export-name]]]
    [when-not [eval [concat [list wrap-func] args]]
      [log [list [quote test] [quote fail] module expect]]]]]]

[def mem-atom [atom 0]]

[defn log-pointer [x y]
  [log-byte-array [byte-array [object-get [atom-get mem-atom] [quote buffer]] x y]]]

[defn log-i32 [x]
  [log [list [quote log-i32] x]]]

[defn test-file [host-func-types module]
  [let
    [text [compile-top-forms-to-text host-func-types module]
     mem [wasm-memory [kv-map initial 1]]
     import-object
     [kv-map env
        [kv-map-id mem log-pointer log-i32]]
     exports [wat-to-exports text import-object]
     main [object-get exports [quote main]]]
    [atom-set mem-atom mem]
    [main]
  ]]
