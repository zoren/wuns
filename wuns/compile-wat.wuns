[load bind-infer-low-level.wuns]

[defn get-annotation [cctx bst]
  [if-let [anno [try-get [llcheck-context/type-annotations cctx] [to-js-value bst]]]
    anno
    [logq-abort get-annotation expected an annotation [identity bst]]]]

[defn get-ctype [gctx bform]
  [match bform
    [llexp/literal l]
    [match l
      [llliteral/i32 i] type-i32
      [llliteral/f64 f] type-f64
      [logq-abort get-ctype literal not implemented]]

    [llexp/intrinsic inst-name imm ica]
    [ifs
      [is-i32-bin-inst [syntax-word/word inst-name]]
      type-i32

      [is-f64-bin-inst [syntax-word/word inst-name]]
      type-f64

      [is-f64-comp-inst [syntax-word/word inst-name]]
      type-i32

      [logq-abort intrinsic not implemented]]

    [llexp/do forms]
    [if [is-empty forms]
      type-empty-tuple
      [get-ctype gctx [last forms]]]

    [llexp/let bindings forms]
    [if [is-empty forms]
      type-empty-tuple
      [get-ctype gctx [last forms]]]

    [llexp/loop bindings forms]
    [if [is-empty forms]
      type-empty-tuple
      [get-ctype gctx [last forms]]]

    [llexp/assign target value]
    type-empty-tuple

    [llexp/size-of t]
    type-i32

    [get-annotation gctx bform]]]

[type wat-inst-memargs []
  [record
    [memory word]
    [offset word]
    [alignment word]]]

[type wat-inst []
  [union
    [i32.const word]
    [i64.const word]
    [f32.const word]
    [f64.const word]
    [local.get word]
    [local.set word wat-inst]
    [global.get word]
    [inst byte-array [list wat-inst]]
    [load byte-array wat-inst-memargs wat-inst]
    [store byte-array wat-inst-memargs wat-inst wat-inst]
    [if [list word] wat-inst wat-inst wat-inst]
    [call word [list wat-inst]]
    [instructions [list wat-inst]]
    [loop word [list word] wat-inst]
    [br word]]]

[def ascii-underscore [i32 95]]

[comment wuns does not have underscores so we convert dashes to underscores]

[defn wasm-name-to-wat-byte-array [w]
  [let [sw [word-byte-size w]
        res [byte-array sw]]
    [for i 0 sw
      [byte-array-set res i
        [let [c [char-code-at w i]] [if [eq c [word-to-char-code -]] ascii-underscore c]]]]
    res]]

[def drop-name-byte-array [wasm-name-to-wat-byte-array [word drop]]]

[defn wat-inst-drop [i]
  [wat-inst/inst drop-name-byte-array [list i]]]

[defn wat-inst-i32.add [a b]
  [wat-inst/inst
    [wasm-name-to-wat-byte-array [word i32.add]]
    [list a b]]]

[defn wat-inst-i32.mul [a b]
  [wat-inst/inst
    [wasm-name-to-wat-byte-array [word i32.mul]]
    [list a b]]]

[defn datas-to-byte-array [datas]
  [let
    [n-datas [size datas]
     total-size
      [loop [i 0 sum 0]
        [if [le-s n-datas i]
          sum
          [continue
            sum [add sum [match [at datas i]
                          [data/bytes bs] [size bs]
                          [data/i32 is] [mul [size is] 4]
                          [data/f64 fs] [mul [size fs] 8]]]
            i [inc i]
            ]]]
     ba [byte-array total-size]]
    [loop [i 0 offset 0]
      [if [le-s n-datas i]
        ba
        [match [at datas i]
          [data/bytes bs]
          [do
            [for j 0 [size bs]
              [byte-array-set ba [add offset j] [word-to-int [syntax-word/word [at bs j]]]]]
            [continue
              i [inc i]
              offset [add offset [size bs]]]]

          [data/i32 is]
          [do
            [loop [j 0 sis [size is]]
              [when [lt-s j sis]
                [byte-array-set-byte-array ba [add offset [mul j 4]]
                  [i32-to-byte-array [word-to-int [syntax-word/word [at is j]]]]]
                [continue j [inc j]]]]
            [continue
              i [inc i]
              offset [add offset [mul [size is] 4]]]]

          [data/f64 fs]
          [do
            [loop [j 0 sfs [size fs]]
              [when [lt-s j sfs]
                [byte-array-set-byte-array ba [add offset [mul j 8]]
                  [f64-to-byte-array [word-to-f64 [syntax-word/word [at fs j]]]]]
                [continue j [inc j]]]]
            [continue
              i [inc i]
              offset [add offset [mul [size fs] 8]]]]]]]
      ba]]

[type output-func []
  [record
    [name word]
    [parameters [list [pair word word]]]
    [locals [list [pair word word]]]
    [result [list word]]
    [body wat-inst]]]

[type import-kind []
  [union
    [memory word i32]]]

[type export-kind []
  [union [func] [global] [memory]]]

[type wat-global []
  [record
    [name word]
    [type word]
    [value wat-inst]]]

[type wat-data []
  [union
    [active word wat-inst byte-array]]]

[type wat-memory []
  [record
    [kind memory-kind]
    [name word]
    [initial i32]
    [maximum [option i32]]]]

[type wat-output []
  [record
    [imports [growable-list [pair [list word] import-kind]]]
    [memories [growable-list wat-memory]]
    [globals [growable-list wat-global]]
    [funcs [growable-list output-func]]
    [exports [growable-list [pair word [pair export-kind word]]]]
    [datas [growable-list wat-data]]]]

[defn make-wat-output []
  [wat-output
    [growable-list]
    [growable-list]
    [growable-list]
    [growable-list]
    [growable-list]
    [growable-list]]]

[type translate-context []
  [record
    [output wat-output]
    [check-context llcheck-context]
    [function-name-to-typearg-specializations [transient-kv-map word [set word]]]
    [function-name-to-body [transient-kv-map word lldefn]]
    [specialized-names-generated [set word]]
    [func-specs-to-generate [atom [growable-list [pair word [list ctype]]]]]
    ]]

[defn translate-context-empty [llcheck-context]
  [translate-context
    [make-wat-output]
    llcheck-context
    [transient-kv-map]
    [transient-kv-map]
    [set]
    [atom [growable-list]]]]

[defn llctx-from-translate [tctx]
  [llcheck-context/bind-ctx
     [translate-context/check-context tctx]]]

[defn translate-type [tctx it]
  [match [normalize-type it]
    [ctype/literal l] [word i32]

    [ctype/apply type-name type-args]
    [switch type-name
      [[word pointer]]
      [match [get-memory-kind [llctx-from-translate tctx] [mem-name-from-mem-type [first type-args]]]
        [memory-kind/i32] [word i32]
        [memory-kind/i64] [word i64]]

      [if [or [wat-type-is type-name] [wuns-builtin-data-type-is type-name]]
        type-name
        [do [log it] [logq-abort not implemented translate-type [identity it]]]]]
    [do [log it] [logq-abort not implemented translate-type [identity it]]]]]

[defn translate-types [tctx it]
  [let [nt [normalize-type it]]
    [match [normalize-type it]
      [ctype/apply type-name type-args]
      [switch type-name
        [[word tuple]]
        [do
          [when-not [is-empty type-args]
            [logq translate-types tuple [identity type-args]]]
          [list-map ta type-args [translate-type tctx ta]]]

        [list [translate-type tctx nt]]]
        [do [log it] [logq-abort not implemented translate-types]]]]]

[defn specialized-name-from [tctx fname type-args]
  [loop
    [w fname
     i 0
     s [size type-args]
     t2n
      [func t2n [t]
        [match [normalize-type t]
          [ctype/var tv]
          [match [get-type-var-kind tv]
            [type-var-kind/unlinked i]
            [int-to-type-var-name i]

            [type-var-kind/linked lt] [logq-abort ctype-to-name unreachable type should be normalized]]

          [ctype/literal l]
          [word literal]

          [ctype/apply type-name type-args]
          [switch type-name
            [[word pointer]]
            [match [get-memory-kind [llctx-from-translate tctx] [mem-name-from-mem-type [first type-args]]]
              [memory-kind/i32] [word i32]
              [memory-kind/i64] [word i64]]
            [if [or [wat-type-is type-name] [wuns-builtin-data-type-is type-name]]
              type-name
              [word-join
                [word -]
                [list-map ta type-args [t2n ta]]]]]

            [do [logq-abort not implemented ctype-to-name]]]]]
    [if [lt-s i s]
      [let
        [tn [t2n [at type-args i]]]
        [continue
          w [concat-words [concat-words w [word -]] tn]
          i [inc i]]]
      w]]]

[defn add-func-specialization [tctx sname]
  [let [type-args [get [llcheck-context/type-instantiations [translate-context/check-context tctx]] sname]
        fname-word [syntax-word/word sname]
        gl [atom-get [translate-context/func-specs-to-generate tctx]]
        spec-name [specialized-name-from tctx fname-word type-args]]
    [when-not [set-has [translate-context/specialized-names-generated tctx] spec-name]
      [push gl [pair fname-word type-args]]]
    spec-name]]

[defn literal-to-wat-inst [l]
  [match l
    [llliteral/i32 i] [wat-inst/i32.const [syntax-word/word i]]
    [llliteral/i64 i] [wat-inst/i64.const [syntax-word/word i]]
    [llliteral/f32 f] [wat-inst/f32.const [syntax-word/word f]]
    [llliteral/f64 f] [wat-inst/f64.const [syntax-word/word f]]]]

[defn exp-const-to-wat-inst [value]
  [match value
    [llexp/cast t e]
    [exp-const-to-wat-inst e]

    [llexp/literal l]
    [literal-to-wat-inst l]

    [logq-abort exp-const-to-wat-inst]]]

[def i32.const-0 [wat-inst/i32.const [word 0]]]
[def i32.const-1 [wat-inst/i32.const [word 1]]]
[def i32.const-2 [wat-inst/i32.const [word 2]]]
[def i32.const-4 [wat-inst/i32.const [word 4]]]
[def i32.const-8 [wat-inst/i32.const [word 8]]]
[def i32.const-16 [wat-inst/i32.const [word 16]]]

[defn translate-func [tctx func type-args]
  [let
    [cctx [translate-context/check-context tctx]
     bind-ctx [llcheck-context/bind-ctx cctx]
     form-to-ldesc [llctx/form-to-ldesc bind-ctx]
     lvar-to-name
       [func lvar-to-name [lvar-sname]
         [if-let [ldesc [try-get form-to-ldesc [syntax-word-get-form lvar-sname]]]
           [syntax-word/word lvar-sname]
           [logq-abort lvar-to-name expected local var [identity lvar-sname]]]]
     get-form-types [func get-form-types [form] [translate-types tctx [get-ctype cctx form]]]
     glocals [growable-list]
     add-binding
     [func ab [b]
       [push glocals
         [pair
           [syntax-word/word [pair/fst b]]
           [translate-type tctx [get-ctype cctx [pair/snd b]]]]]]
     fname-word [syntax-word/word [lldefn/name func]]
     ts [get [llcheck-context/def-var-types [translate-context/check-context tctx]] fname-word]
     special-func-name [specialized-name-from tctx fname-word type-args]
     type-env [transient-kv-map]]
  [if-let [fn-tps [lldefn/type-params func]]
    [let [type-params [check-type-scheme/named-type-params ts]]
      [for i 0 [size type-params]
        [set-kv-map type-env [at type-params i] [at type-args i]]]]
    [let [type-params [check-type-scheme/type-vars ts]]
      [for i 0 [size type-params]
        [match [get-type-var-kind [at type-params i]]
          [type-var-kind/unlinked i]
          [set-kv-map type-env i [at type-args i]]]]]]

  [letfn [
  [func type-to-size-of-exp [type-env it]
    [match [normalize-type it]
      [ctype/var tv]
      [match [get-type-var-kind tv]
        [type-var-kind/unlinked tv-id]
        [match tv-id
          [type-var-id/word tvw]
          [if-let [subst-type [try-get type-env tvw]]
            [type-to-size-of-exp type-env subst-type]
            [logq-abort size-of type var not found [identity tvw] [identity type-env]]]

          [logq-abort tts]]
        [logq-abort tts]]

      [ctype/literal l]
      i32.const-4

      [ctype/apply type-name type-args]
      [switch type-name
        [[word u8] [word s8]] i32.const-1
        [[word u16] [word s16]] i32.const-2
        [[word i32] [word f32]] i32.const-4
        [[word i64] [word f64]] i32.const-8
        [[word v128]] i32.const-16
        [[word tuple]] [logq-abort size-of tuple not implemented]

        [[word pointer]]
        [match [get-memory-kind [llctx-from-translate tctx] [mem-name-from-mem-type [first type-args]]]
          [memory-kind/i32]
          i32.const-4
          [memory-kind/i64]
          i32.const-8]

        [[word array]]
        [let [size-exp
          [match [at type-args 1]
            [ctype/literal l]
            [match l
              [type-literal/exp e]
              [go e]

              [type-literal/memory m]
              [logq-abort size-of not implemented memory literal]]

            [ctype/var tv]
            [match [get-type-var-kind tv]
              [type-var-kind/unlinked tv-id]
              [match tv-id
                [type-var-id/word tvw]
                [if-let [subst-type [try-get type-env tvw]]
                  [match subst-type
                    [ctype/literal l]
                    [match l
                      [type-literal/exp e]
                      [go e]

                      [type-literal/memory m]
                      [logq-abort size-of not implemented memory literal]]

                    [logq-abort size-of not a tv [identity subst-type]]]
                  [logq-abort size-of type var not found [identity tvw] [identity type-env]]]

                [logq-abort tts]]
              [logq-abort tts]]

            [logq-abort size-of array not implemented [at type-args 1]]]]
          [wat-inst-i32.mul
            [type-to-size-of-exp type-env [at type-args 0]]
            size-exp]]

        [let
          [new-tv-env [make-type-env bind-ctx type-name type-args]]
          [match [get [llctx/user-types bind-ctx] type-name]
            [user-type-desc/alias at]
            [logq-abort size-of alias not implemented]

            [user-type-desc/record field-map field-list]
            [loop [cur-size i32.const-0 i 0 n [size field-list]]
              [if [lt-s i n]
                [let [fd [at field-list i]]
                  [continue
                    cur-size
                      [wat-inst-i32.add cur-size
                        [type-to-size-of-exp new-tv-env [instantiate-syntax-type-no-env cctx 0 [pair/snd fd]]]]
                    i [inc i]]]
                cur-size]]
            [logq-abort size-of not a record type]]]]]]
  [func type-to-size-exp1 [t]
    [let [nt [normalize-type t]]
      [logq type-to-size-exp1 [identity nt]]
      [type-to-size-of-exp type-env nt]]]
  [func go-forms [forms]
    [if [is-empty forms]
      [list]
      [concat
        [list-map form [slice forms 0 [dec [size forms]]]
          [loop [res [go form] i [size [get-form-types form]]]
              [if i
                [continue
                  res [wat-inst-drop res]
                  i [dec i]]
                res]]]
        [list [go [last forms]]]]]]
  [func go [form]
    [match form
      [llexp/var sw]
      [let [w [syntax-word/word sw]]
        [if-let [ldesc [try-get form-to-ldesc [syntax-word-get-form sw]]]
          [wat-inst/local.get w]
          [wat-inst/global.get w]]]

      [llexp/literal l]
      [literal-to-wat-inst l]

      [llexp/do forms]
      [wat-inst/instructions [go-forms forms]]

      [llexp/if cond true false]
      [wat-inst/if
        [get-form-types form]
        [go cond]
        [go true]
        [go false]]

      [llexp/intrinsic inst-name imm-args args]
      [wat-inst/inst
        [wasm-name-to-wat-byte-array [syntax-word/word inst-name]]
        [list-map arg args [go arg]]]

      [llexp/call w opt-type-args args]
      [wat-inst/call [add-func-specialization tctx w] [list-map a args [go a]]]

      [llexp/let bindings body]
      [wat-inst/instructions
        [concat
          [list-map b bindings
            [do
              [add-binding b]
              [wat-inst/local.set [lvar-to-name [pair/fst b]] [go [pair/snd b]]]]]
          [go-forms body]]]

      [llexp/loop bindings body]
      [wat-inst/instructions
        [concat
          [list-map b bindings
            [do
              [add-binding b]
              [wat-inst/local.set [lvar-to-name [pair/fst b]] [go [pair/snd b]]]]]
          [list
            [wat-inst/loop
              [word loop-label]
              [get-form-types form]
              [wat-inst/instructions
                [go-forms body]]]]]]

      [llexp/continue assignments]
      [wat-inst/instructions
        [concat
          [list-map a assignments
            [wat-inst/local.set [lvar-to-name [pair/fst a]] [go [pair/snd a]]]]
          [list [wat-inst/br [word loop-label]]]]]

      [llexp/cast cast-type value]
      [go value]

      [llexp/deref target]
      [let
        [pt [get-apply-type [get-ctype cctx target] [word deref]]
         it [copy-type-proper type-env [second [pair/snd pt]]]]
        [assert [eq-word [pair/fst pt] [word pointer]]]
        [wat-inst/load
          [wasm-name-to-wat-byte-array
            [switch [translate-type tctx it]
            [[word i32]] [word i32.load]
            [[word i64]] [word i64.load]
            [[word f32]] [word f32.load]
            [[word f64]] [word f64.load]
            [[word v128]] [word v128.load]
            [[word u8]] [word i32.load8-u]
            [[word s8]] [word i32.load8-s]
            [[word u16]] [word i32.load16-u]
            [[word s16]] [word i32.load16-s]
            [logq-abort not implemented deref inst-type/apply]]]
          [wat-inst-memargs
            [mem-name-from-mem-type [first [pair/snd pt]]]
            [word 0]
            [word 1]]
          [go target]]]

      [llexp/assign target value]
      [let
        [pt [get-apply-type [get-ctype cctx target] [word assign]]
         it [copy-type-proper type-env [second [pair/snd pt]]]]
        [assert [eq-word [pair/fst pt] [word pointer]]]
        [wat-inst/store
          [wasm-name-to-wat-byte-array
            [switch [translate-type tctx it]
            [[word i32]] [word i32.store]
            [[word i64]] [word i64.store]
            [[word f32]] [word f32.store]
            [[word f64]] [word f64.store]
            [[word v128]] [word v128.store]
            [[word u8] [word s8]] [word i32.store8]
            [[word u16] [word s16]] [word i32.store16]
            [logq-abort not implemented assign inst-type/apply]]]
          [wat-inst-memargs
            [mem-name-from-mem-type [first [pair/snd pt]]]
            [word 0]
            [word 1]]
          [go target]
          [go value]]]

      [llexp/field target field-name]
      [let
        [pt [get-apply-type [get-ctype cctx target] [word field]]
         field-name-word [syntax-word/word field-name]]
        [assert [eq-word [pair/fst pt] [word pointer]]]
        [let [ptargs [pair/snd pt]
              tmem [first ptargs]
              ttarget [get-apply-type [second ptargs] [word field1]]
              ttarget-name [pair/fst ttarget]
              ttarget-args [pair/snd ttarget]
              bctx [llctx-from-translate tctx]
              offset
              [if-let [dd [try-get [llctx/user-types bctx] ttarget-name]]
                [match dd
                  [user-type-desc/record field-map field-list]
                  [let
                    [target-type-params [get [llctx/user-type-params bctx] ttarget-name]
                     new-tv-env [transient-kv-map]]
                    [for i 0 [size ttarget-args]
                      [set-kv-map new-tv-env [syntax-word/word [at target-type-params i]] [at ttarget-args i]]]
                    [loop [i 0 offset i32.const-0]
                      [if [lt-s i [size field-list]]
                        [let [fp [at field-list i]]
                          [if [eq-word field-name-word [pair/fst fp]]
                            offset
                            [continue
                              i [inc i]
                              offset [wat-inst-i32.add
                                      offset
                                      [type-to-size-of-exp new-tv-env [instantiate-syntax-type-no-env cctx 0 [pair/snd fp]]]]]]]
                        [logq-abort field not found]]]]
                  [logq-abort not a record type]]
                [logq-abort not implemented translate-top-form field inst-type/apply]]]
        [wat-inst-i32.add offset [go target]]]]

      [llexp/index target index]
      [let
        [pt [get-apply-type [get-ctype cctx target] [word index]]]
        [assert [eq-word [pair/fst pt] [word pointer]]]
        [let [ptargs [pair/snd pt]
              array-type [second ptargs]
              element-type [first [pair/snd [get-apply-type array-type [word index1]]]]
              offset [wat-inst-i32.mul [type-to-size-exp1 element-type] [go index]]]
        [wat-inst-i32.add offset [go target]]]]

      [llexp/size-of t]
      [type-to-size-exp1 [get-annotation cctx t]]

      [do
        [log form]
        [logq-abort not implemented translate-form]]]]]
    [comment go-forms has the side effect of adding locals so we need to run it first]
    [logq type-env [identity type-env]]
    [let
      [t [copy-type-proper type-env [check-type-scheme/type ts]]
       ft [get-func-type t]
       param-types [pair/fst ft]
       gparams [growable-list]
       params [lldefn/params func]]
      [assert [eq [size params] [size param-types]] expected matching number of parameters and types]
      [set-add [translate-context/specialized-names-generated tctx] special-func-name]
      [let [tbodies [go-forms [lldefn/bodies func]]]
        [for i 0 [size params]
          [push gparams
            [pair [syntax-word/word [pair/fst [at params i]]] [translate-type tctx [lift-data-type [at param-types i]]]]]]
        [push
          [wat-output/funcs [translate-context/output tctx]]
          [output-func
            special-func-name
            [clone-growable-to-frozen-list gparams]
            [clone-growable-to-frozen-list glocals]
            [translate-types tctx [lift-data-type [pair/snd ft]]]
            [wat-inst/instructions tbodies]]]]]]]]

[defn translate-top-form [tctx bform]
  [let
    [output [translate-context/output tctx]
     cctx [translate-context/check-context tctx]]
    [match bform
      [lltop/memory name kind init-size opt-max]
      [push [wat-output/memories output]
        [wat-memory
          kind
          [syntax-word/word name]
          [word-to-int [syntax-word/word init-size]]
          [if-let [max opt-max]
            [option/some [word-to-int [syntax-word/word max]]]
            [option/none]]]]

      [lltop/def name value]
      [push [wat-output/globals output]
        [wat-global
          [syntax-word/word name]
          [translate-type tctx [get-ctype cctx value]]
          [exp-const-to-wat-inst value]]]

      [lltop/defn func]
      [set-kv-map [translate-context/function-name-to-body tctx]
        [syntax-word/word [lldefn/name func]] func]

      [lltop/export snames]
      [for-each sname snames
        [push
          [wat-output/exports output]
          [let [name [syntax-word/word sname]]
            [pair
              name
              [if-let [dd [try-get [llctx/lldef-ctx [llctx-from-translate tctx]] name]]
                [match dd
                  [lldef-desc/memory kind]
                  [pair [export-kind/memory] name]

                  [lldef-desc/func opt-tparams params]
                  [do
                    [if-let [tparams opt-tparams]
                      [logq-abort export genfn not implemented]
                      [do]]
                    [pair [export-kind/func] [add-func-specialization tctx sname]]]

                  [lldef-desc/any]
                  [pair [export-kind/global] name]]
                [logq-abort export not found]]]]]]

      [lltop/data-active mem-name offset-form datas]
      [do
        [push
          [wat-output/datas output]
          [wat-data/active
            [syntax-word/word mem-name]
            [exp-const-to-wat-inst offset-form]
            [datas-to-byte-array datas]]]]

      [lltop/type]
      [do]

      [logq-abort not implemented translate-top-form [identity bform]]]]]

[defn translate-top-forms-sync [evaluator forms]
  [let
    [f2l [make-forms-to-btops evaluator]
     btops-ctx-pair [f2l forms]
     ctx [pair/snd btops-ctx-pair]
     gctx [llcheck-context-empty ctx]
     tctx [translate-context-empty gctx]
     specs-atom [translate-context/func-specs-to-generate tctx]
     func-to-body [translate-context/function-name-to-body tctx]]
    [for-each btop [pair/fst btops-ctx-pair]
      [infer-lltop gctx btop]
      [translate-top-form tctx btop]]
    [loop [func-specializations [clone-growable-to-frozen-list [atom-get specs-atom]]]
      [when-not [is-empty func-specializations]
        [atom-set specs-atom [growable-list]]
        [for-each func-specialization func-specializations
          [let [fname [pair/fst func-specialization]
                type-args [list-map t [pair/snd func-specialization] [normalize-type t]]
                spec-name [specialized-name-from tctx fname type-args]]
            [when-not [set-has [translate-context/specialized-names-generated tctx] spec-name]
              [translate-func tctx [get func-to-body fname] type-args]]]]
        [continue func-specializations [clone-growable-to-frozen-list [atom-get specs-atom]]]]]
    tctx]]

[def ascii-line-feed [i32 10]]
[def ascii-space [i32 32]]
[def ascii-double-quote [i32 34]]
[def ascii-dollar [i32 36]]
[def ascii-left-paren [i32 40]]
[def ascii-right-paren [i32 41]]
[def ascii-equal [i32 61]]
[def ascii-backslash [i32 92]]

[type printer []
  [record
    [bytes [byte-array]]
    [index [atom i32]]]]

[defn empty-printer []
  [printer [byte-array-resizable [i32 256] [i32 0x10000000]] [atom 0]]]

[defn printer-to-byte-array [p]
  [let
    [ci [atom-get [printer/index p]]
     cb [printer/bytes p]
     trimmed [byte-array ci]]
    [for i 0 ci
      [byte-array-set trimmed i [byte-array-get cb i]]]
    trimmed]]

[defn print-byte [printer byte]
  [let [ia [printer/index printer]
        i [atom-get ia]
        a [printer/bytes printer]
        cur-size [byte-array-size a]]
    [when [le-s cur-size i]
      [byte-array-resize a [mul [i32 2] cur-size]]]
    [byte-array-set a i byte]
    [atom-set [printer/index printer] [inc i]]]]

[defn print-word [printer word]
  [for i 0 [word-byte-size word]
    [print-byte printer [char-code-at word i]]]]

[defn int-to-hex-ascii [i]
  [if [lt-s i [i32 10]]
    [add i [i32 48]]
    [add [sub i [i32 10]] [i32 97]]]]

[defn i32-to-hex-bits [n-bits value]
  [let [gl [growable-list]]
    [loop [n-start [sub n-bits 4]
           index [intrinsic i32.shl [i32 15] n-start]
           i n-start]
      [when index
        [push gl [int-to-hex-ascii [intrinsic i32.shr-u [intrinsic i32.and value index] i]]]
        [continue
          index [intrinsic i32.shr-u index [i32 4]]
          i [sub i 4]]]]
    [code-points-to-word [clone-growable-to-frozen-list gl]]]]

[defn i32-to-hex-8 [value]
  [i32-to-hex-bits [i32 8] value]]

[defn print-string-chars [printer word]
  [for i 0 [byte-array-size word]
    [let [cc [byte-array-get word i]]
      [if [or [lt-s cc [i32 32]] [lt-s [i32 126] cc]]
        [do
          [print-byte printer ascii-backslash]
          [print-word printer [i32-to-hex-8 cc]]]
        [print-byte printer cc]]]]]

[type wat []
  [union
    [word word]
    [byte-array byte-array]
    [dollar word]
    [dqstring word]
    [dqstring-bytes byte-array]
    [seq [list wat]]
    [seq-lf [list wat]]
    [list [list wat]]
    [eq-pair word word]]]

[defn print-wat [printer wat]
  [match wat
    [wat/word w] [print-word printer w]
    [wat/byte-array ba]
      [for i 0 [byte-array-size ba]
        [print-byte printer [byte-array-get ba i]]]
    [wat/dollar w] [do [print-byte printer ascii-dollar] [print-word printer w]]
    [wat/dqstring w] [do [print-byte printer ascii-double-quote] [print-word printer w] [print-byte printer ascii-double-quote]]
    [wat/dqstring-bytes ba] [do [print-byte printer ascii-double-quote] [print-string-chars printer ba] [print-byte printer ascii-double-quote]]
    [wat/seq l]
      [do
        [when-not [is-empty l]
          [print-wat printer [first l]]
          [for i 1 [size l]
            [print-byte printer ascii-space]
            [print-wat printer [at l i]]]]]
    [wat/seq-lf l]
      [do
        [when-not [is-empty l]
          [print-wat printer [first l]]
          [for i 1 [size l]
            [print-byte printer ascii-line-feed]
            [print-wat printer [at l i]]]]]
    [wat/list l]
      [do
        [print-byte printer ascii-left-paren]
        [when-not [is-empty l]
          [print-wat printer [first l]]
          [for i 1 [size l]
            [print-byte printer ascii-space]
            [print-wat printer [at l i]]]]
        [print-byte printer ascii-right-paren]]
    [wat/eq-pair w1 w2]
      [do
        [print-word printer w1]
        [print-byte printer ascii-equal]
        [print-word printer w2]]]]

[defn wat-to-wat-bytes [wat]
  [let [p [empty-printer]]
    [print-wat p wat]
    [printer-to-byte-array p]]]

[defn wat-list [.. l] [wat/list l]]

[defn wat-concat [.. l] [wat/list [concat-lists l]]]

[defn wat-inst-memargs-to-out [ma]
  [list
    [wat-list [wat/word [word memory]] [wat/dollar [wat-inst-memargs/memory ma]]]
    [wat/eq-pair [word offset] [wat-inst-memargs/offset ma]]
    [wat/eq-pair [word align] [wat-inst-memargs/alignment ma]]]]

[defn wat-inst-to-out [i]
  [match i
    [wat-inst/i32.const w]
    [wat-list [wat/word [word i32.const]] [wat/word w]]

    [wat-inst/i64.const w]
    [wat-list [wat/word [word i64.const]] [wat/word w]]

    [wat-inst/f32.const w]
    [wat-list [wat/word [word f32.const]] [wat/word w]]

    [wat-inst/f64.const w]
    [wat-list [wat/word [word f64.const]] [wat/word w]]

    [wat-inst/inst w args]
    [wat-concat
      [list [wat/byte-array w]] [list-map a args [wat-inst-to-out a]]]

    [wat-inst/local.get w]
    [wat-list [wat/word [word local.get]] [wat/dollar w]]

    [wat-inst/local.set w e]
    [wat-list [wat/word [word local.set]] [wat/dollar w] [wat-inst-to-out e]]

    [wat-inst/global.get w]
    [wat-list [wat/word [word global.get]] [wat/dollar w]]

    [wat-inst/load name ma addr]
    [wat-concat
      [list [wat/byte-array name]]
      [wat-inst-memargs-to-out ma]
      [list [wat-inst-to-out addr]]]

    [wat-inst/store name ma addr value]
    [wat-concat
      [list [wat/byte-array name]]
      [wat-inst-memargs-to-out ma]
      [list [wat-inst-to-out addr] [wat-inst-to-out value]]]

    [wat-inst/instructions insts]
    [wat/seq [list-map inst insts [wat-inst-to-out inst]]]

    [wat-inst/if result-types cond true false]
    [wat-list [wat/word [word if]]
      [wat/list
        [concat [list [wat/word [word result]]]
          [list-map rt result-types [wat/word rt]]]]
      [wat-inst-to-out cond]
      [wat-list [wat/word [word then]] [wat-inst-to-out true]]
      [wat-list [wat/word [word else]] [wat-inst-to-out false]]]

    [wat-inst/call w args]
    [wat-concat
      [list [wat/word [word call]] [wat/dollar w]]
      [list-map a args [wat-inst-to-out a]]]

    [wat-inst/loop loop-label result-types body]
    [wat-list
      [wat/word [word loop]]
      [wat/dollar loop-label]
      [wat/list
        [concat [list [wat/word [word result]]]
          [list-map rt result-types [wat/word rt]]]]
      [wat-inst-to-out body]]

    [wat-inst/br w]
    [wat-list [wat/word [word br]] [wat/dollar w]]

    [logq-abort wat-inst-to-out unknown instruction]]]

[defn import-to-wat [import]
  [match [pair/snd import]
    [import-kind/memory name init-size]
    [wat-list
      [wat/word [word memory]]
      [wat/dollar name]
      [wat/word [int-to-word init-size]]]]]

[defn memory-to-wat [mem]
  [wat-list
    [wat/word [word memory]]
    [wat/dollar [wat-memory/name mem]]
    [wat/word [match [wat-memory/kind mem]
      [memory-kind/i32] [word i32]
      [memory-kind/i64] [word i64]]]
    [wat/word [int-to-word [wat-memory/initial mem]]]]]

[defn global-to-wat [global]
  [wat-list
    [wat/word [word global]]
    [wat/dollar [wat-global/name global]]
    [wat/word [wat-global/type global]]
    [wat-inst-to-out [wat-global/value global]]]]

[defn output-func-to-wat [of]
  [wat-concat
    [list
      [wat/word [word func]]
      [wat/dollar [output-func/name of]]]
    [list-map p [output-func/parameters of]
      [wat-list [wat/word [word param]] [wat/dollar [pair/fst p]] [wat/word [pair/snd p]]]]
    [list
      [wat-concat
        [list [wat/word [word result]]]
        [list-map rt [output-func/result of] [wat/word rt]]]]
    [list-map l [output-func/locals of]
      [wat-list [wat/word [word local]] [wat/dollar [pair/fst l]] [wat/word [pair/snd l]]]]
    [list
      [wat-inst-to-out [output-func/body of]]]]]

[defn export-to-wat [p]
  [wat-concat
    [list
      [wat/word [word export]]
      [wat/dqstring [pair/fst p]]
      [let [kind-pair [pair/snd p]]
        [wat-list
          [wat/word
            [match [pair/fst kind-pair]
              [export-kind/func] [word func]
              [export-kind/memory] [word memory]
              [export-kind/global] [word global]
              [logq-abort export-to-wat unknown export kind]]]
          [wat/dollar [pair/snd kind-pair]]]]]]]

[defn data-to-wat [d]
  [match d
    [wat-data/active mem-name offset data]
    [wat-list
      [wat/word [word data]]
      [wat-list [wat/word [word memory]] [wat/dollar mem-name]]
      [wat-inst-to-out offset]
      [wat/dqstring-bytes data]]]]

[defn output-to-wat [output]
  [wat/seq-lf
    [concat-lists
      [list
        [list-map imp [clone-growable-to-frozen-list [wat-output/imports output]] [import-to-wat imp]]
        [list-map mem [clone-growable-to-frozen-list [wat-output/memories output]] [memory-to-wat mem]]
        [list-map g [clone-growable-to-frozen-list [wat-output/globals output]] [global-to-wat g]]
        [list-map d [clone-growable-to-frozen-list [wat-output/datas output]] [data-to-wat d]]
        [list-map of [clone-growable-to-frozen-list [wat-output/funcs output]] [output-func-to-wat of]]
        [list-map e [clone-growable-to-frozen-list [wat-output/exports output]] [export-to-wat e]]]]]]

[defmacro def-wasm-extern [name type]
  [flist [quote import] [quote ./runtime-lib/wasm.js] name type]]

[type wasm-module [] [union]]

[import ./runtime-lib/wabt.js wat-to-wasm-byte-array [func [byte-array] byte-array]]

[defn translate-top-forms-to-tctx [forms]
  [promise-then
    [make-init-evaluator-async]
    [func t [evaluator] [translate-top-forms-sync evaluator forms]]]]

[defn translate-top-forms-to-wasm-bytes [forms]
  [promise-then
    [translate-top-forms-to-tctx forms]
    [func t [tctx]
      [wat-to-wasm-byte-array [wat-to-wat-bytes [output-to-wat [translate-context/output tctx]]]]]]]

[def-wasm-extern byte-array-to-wasm-module [func [byte-array] wasm-module]]

[defn translate-top-forms-to-module [forms]
  [promise-then
    [translate-top-forms-to-wasm-bytes forms]
    byte-array-to-wasm-module]]

[comment
  we could do type predicates like
[defn form-word-is [[type f [pointer [memory mem] [form]]]]
  [cast
    [type-predicate f [form-word]]
    [eq [deref [field f tag]] [i32 0]]]]

[defn form-list-is [[type f [pointer [memory mem] [form]]]]
  [cast
    [type-predicate f [form-list]]
    [eq [deref [field f tag]] [i32 1]]]]

]

[comment


[type growable-vector [a]
  [record
    [size [i32]]
    [capacity [i32]]
    [parray [pointer [memory mem] [array a s]]]]]

[genfn growable-vector-make [a] [[type init-capacity [i32]]]
  [let
    [p [cast [pointer [memory mem] [growable-vector a]] [alloc-n [size-of [growable-vector a]]]]
     parray [cast [pointer [memory mem] [array a s]] [alloc-n [size-of [array a [literal init-capacity]]]]]]
    [assign [field p size] [i32 0]]
    [assign [field p capacity] init-capacity]
    [assign [field p parray] parray]
    p]]

[defn growable-vector-push [[type pgvec [pointer [memory mem] [growable-vector a]]] [type elem a]]
  [let
    [cur-size [deref [field pgvec size]]
     cur-capacity [deref [field pgvec capacity]]
     parray [deref [field pgvec parray]]]
    [when [eq cur-size cur-capacity]
      [intrinsic unreachable]]
    [assign [index parray cur-size] elem]
    [assign [field pgvec size] [inc cur-size]]]]

[defn growable-vector-to-vector [[type pgvec [pointer [memory mem] [growable-vector a]]]]
  [let
    [size [deref [field pgvec size]]
     arr [deref [field pgvec parray]]
     pvector [call vector-make-no-init [a] [size]]]
    [for i [i32 0] size
      [call set [a] [pvector i [deref [index arr i]]]]]
    pvector]]

[defn growable-vector-make-int [init-capacity]
  [cast [pointer [memory mem] [growable-vector [i32]]] [call growable-vector-make [[i32]] [init-capacity]]]]

[defn growable-vector-push-int [[type pgvec [pointer [memory mem] [growable-vector [i32]]]] elem]
  [growable-vector-push pgvec elem]]

[defn growable-vector-to-vector-int [[type pgvec [pointer [memory mem] [growable-vector [i32]]]]]
  [growable-vector-to-vector pgvec]]

[export growable-vector-make-int growable-vector-push-int growable-vector-to-vector-int]

[defn is-between-inclusive [lower c upper]
  [and [le-s lower c] [le-s c upper]]]

[defn is-whitespace [c]
  [or [eq c [i32 32]] [eq c [i32 10]]]]

[defn is-word-char [c]
  [or
    [is-between-inclusive [i32 97] c [i32 122]]
    [is-between-inclusive [i32 45] c [i32 57]]]]


[type form-word []
  [record
    [tag [literal [i32 0]]]
    [word [pvector [u8]]]]]

[type
  form-list []
  [record
    [tag [literal [i32 1]]]
    [forms [pvector [pointer [memory mem] [form]]]]]

  form []
  [union
    [form-word]
    [form-list]]]

[defn form-word-make [byte-vector]
  [let [p [cast [pointer [memory mem] [form-word]] [alloc-n [size-of [form-word]]]]]
    [assign [field p tag] [i32 0]]
    [assign [field p word] byte-vector]
    p]]

[defn make-stack []
  [call growable-vector-make [[form-word]] [[i32 16]]]]

[genfn vector-slice [s] [[type pvec [pvector [u8]]] start end]
  [let
    [sz [sub end start]
     p [call vector-make-no-init [[u8]] [sz]]]
    [for i [i32 0] sz
      [set-byte p i [get-byte pvec [add start i]]]]
    p]]

[defn dvector-slice [pvec start end]
  [call vector-slice [[u8]] [pvec start end]]]

[defn parse [[type bytes [pointer [memory mem] [pvector [u8]]]]]
  [loop
    [n-of-bytes [size bytes]
     i [i32 0]
     start [i32 -1]]
    [if [lt-s i n-of-bytes]
      [let [c [get-byte bytes i]]
        [ifs
          [is-whitespace c]
          [if [lt-s start [i32 0]]
            [continue i [inc i]]
            [form-word-make [dvector-slice bytes start i]]]

          [is-word-char c]
          [if [lt-s start [i32 0]]
            [continue
              start i
              i [inc i]]
            [continue
              i [inc i]]]

          [eq c [i32 91]]
          [intrinsic unreachable]

          [eq c [i32 93]]
          [intrinsic unreachable]

          [intrinsic unreachable]]]
      [if [lt-s start [i32 0]]
        [cast [pointer [memory mem] [form-word]] [i32 0]]
        [form-word-make [dvector-slice bytes start i]]]]]]

[memory i32 mem 1]
[genfn g [t] [] [size-of [pointer [memory mem] t]]]
[defn f [] [call g [[i32]] []]]

 ]