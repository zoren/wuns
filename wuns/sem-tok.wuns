[macro comment [.. -] []]

[func list [.. l] l]

[macro global-id [name]
  [list [quote constant] name [list [quote quote] name]]]

[global-id 0]
[global-id 1]
[global-id 2]
[global-id 3]

[func inc [x] [add x 1]]

[func dec [x] [sub x 1]]

[func not [c] [eq c 0]]

[func is-zero [x] [eq x 0]]

[func is-odd [x] [bit-and x 1]]

[func is-even [x] [not [is-odd x]]]

[func is-negative [x] [lt x 0]]

[func first [l] [at l 0]]
[func second [l] [at l 1]]
[func third [l] [at l 2]]

[func rest [l] [slice l 1 [size l]]]

[func push-all [mut-list list]
  [let [s-l [size list]]
    [loop [i 0]
      [if [lt i s-l]
        [let []
          [push mut-list [at list i]]
          [cont [inc i]]]
        []]]]]

[func concat-lists [lists]
  [let [res [mutable-list] s [size lists]]
    [loop [i 0]
      [if [lt i s]
        [let []
          [push-all res [at lists i]]
          [cont [inc i]]]
        [freeze res]]]]]

[func concat [.. lists] [concat-lists lists]]

[macro do [.. forms]
  [concat [quote [let []]] forms]]

[macro when [cond .. forms]
  [list
    [quote if] cond
    [concat [quote [do]] forms]
    []]]

[macro when-not [cond .. forms]
  [list
    [quote if] cond
    []
    [concat [quote [do]] forms]]]

[macro assert [cond .. lmsg]
  [list [quote when-not] cond
    [list [quote log] [list [quote quote] [concat [list [quote assert-fail]] lmsg]]]
    [quote [abort]]]]

[macro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [not [is-zero s]] ifs requires an odd number of arguments]
    [if [eq s 1]
        [first clauses]
        [list [quote if] [first clauses]
          [second clauses]
          [concat [quote [ifs]] [slice clauses 2 [size clauses]]]]]]]

[macro and [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      1

      [eq s 1]
      [first clauses]

      [let [gs [gensym]]
        [list [quote let] [list gs [first clauses]]
          [list [quote if] gs
            [concat [quote [and]] [rest clauses]]
            gs]]]]]]

[macro or [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      0

      [eq s 1]
      [first clauses]

      [let [gs [gensym]]
        [list [quote let] [list gs [first clauses]]
          [list [quote if] gs
            gs
            [concat [quote [or]] [rest clauses]]]]]]]]

[func is-whitespace [c]
  [or [eq c [quote 32]] [eq c [quote 10]]]]

[func is-square-bracket [c]
  [or [eq c [quote 91]] [eq c [quote 93]]]]

[func is-between-inclusive [lower c upper]
  [and [le lower c] [le c upper]]]

[func is-a-to-z [c]
  [is-between-inclusive [quote 97] c [quote 122]]]

[func is-digit [c]
  [is-between-inclusive [quote 48] c [quote 57]]]

[func is-ident-char [c]
  [or
    [is-a-to-z c]
    [is-digit c]
    [is-between-inclusive [quote 45] c [quote 46]]
    [eq c [quote 61]]]]

[func skip-line-spaces [code-points column]
  [loop [column column]
      [if [and [lt column [size code-points]] [eq [at code-points column] [quote 32]]]
        [cont [inc column]]
        column]]]

[func skip-spaces [document-line-count line-no column]
  [loop [line-no line-no]
    [if [lt line-no document-line-count]
      [let
        [code-points [document-line-text line-no]
         col [skip-line-spaces code-points column]]
        [if [lt col [size code-points]]
          [list line-no col]
          [cont [inc line-no] 0]]]
      [list document-line-count 0]]]]

[func lex-document-line-one-token [code-points column]
  [loop [column column]
    [if [lt column [size code-points]]
      [let [c [at code-points column]]
        [ifs
          [eq c [quote 32]]
          [cont [inc column]]

          [is-square-bracket c]
          [list column [inc column] c]

          [do
            [assert [is-ident-char c] unexpected non-word character]
            [let [tok-start column]
              [loop [j [inc tok-start]]
                [if [and [lt j [size code-points]] [is-ident-char [at code-points j]]]
                  [cont [inc j]]
                  [list tok-start j [quote 97]]]]]]]]
        [list [quote -1] 0 0]]]]

[func lex-document-one-token [document-line-count line-no column]
  [loop
    [line-no line-no
     column column]
    [if [lt line-no document-line-count]
      [let [code-points [document-line-text line-no]]
        [if [lt column [size code-points]]
          [let [token [lex-document-line-one-token code-points column]
                start [first token]
                end [second token]
                class [third token]]
              [if class
                [list line-no start end class]
                [cont [inc line-no] 0]]]
          [cont [inc line-no] 0]]]
      [quote [0 0 0 0]]]]]

[func token-line [token] [first token]]

[func token-start [token] [second token]]

[func token-end [token] [third token]]

[func token-class [token] [at token 3]]

[func is-done [document-line-count line-no column]
  [token-class [lex-document-one-token document-line-count line-no column]]]

[func word-from-doc [token]
  [let [code-points [document-line-text [token-line token]]]
    [word-from-codepoints [slice code-points [token-start token] [token-end token]]]]]

[func parse1-doc [document-line-count line-no column]
  [let [token [lex-document-one-token document-line-count line-no column]
        class [token-class token]
        token-line [token-line token]
        start [token-start token]
        end [token-end token]]
    [assert class unexpected end of input]
    [ifs
      [eq class [quote 97]]
      [list [list [quote w] token] token-line end]

      [eq class [quote 91]]
      [let [ls [mutable-list]]
        [push ls [quote l]]
        [loop [line-no token-line
               column end]
          [let [peek-token [lex-document-one-token document-line-count line-no column]]
            [ifs
              [not [token-class peek-token]]
              [list [freeze ls] [inc document-line-count] 0]

              [eq [token-class peek-token] [quote 93]]
              [list [freeze ls] [token-line peek-token] [token-end peek-token]]

              [let [trip [parse1-doc document-line-count line-no column]
                    form [first trip]
                    new-line [second trip]
                    new-column [third trip]]
                [push ls form]
                [cont new-line new-column]]]]]]

      [do
        [log [quote [fail fail here]]]
        [list [] [inc document-line-count] 0]]]]]

[func parse-all-doc [document-line-count]
  [let [forms [mutable-list]]
    [loop [line-no 0
           column 0]
      [if [and [lt line-no document-line-count]
               [token-class [lex-document-one-token document-line-count line-no column]]]
        [let [trip [parse1-doc document-line-count line-no column]
              form [first trip]
              new-line [second trip]
              new-column [third trip]]
          [push forms form]
          [do
            [log [list new-line new-column]]
            [cont new-line new-column]]]
        [freeze forms]]]]]

[func push-token-as-sem-tok [token token-type]
  [push-token [token-line token] [token-start token] [sub [token-end token] [token-start token]] token-type 0]]

[constant token-type-variable [quote 0]]
[constant token-type-keyword [quote 1]]
[constant token-type-function [quote 2]]
[constant token-type-macro [quote 3]]
[constant token-type-parameter [quote 4]]
[constant token-type-string [quote 5]]

[func push-form-as-quoted [form]
  [if [eq [first form] [quote w]]
    [push-token-as-sem-tok [second form] token-type-string]
    [do
      [assert [eq [first form] [quote l]] has to be a list here]
      [loop [i 1]
        [when [lt i [size form]]
          [push-form-as-quoted [at form i]]
          [cont [inc i]]]]]]]

[func provide-form-sem-toks [form]
  [ifs
    [eq [first form] [quote w]]
    [push-token-as-sem-tok [second form] token-type-variable]

    [let [sli [rest form]]
      [assert [eq [first form] [quote l]] has to be a list here]
      [when [and [size sli] [eq [first [first sli]] [quote w]]]
        [let [head-token [second [first sli]]
              head-word [word-from-doc head-token]
              tail [rest sli]]
          [ifs
            [eq head-word [quote quote]]
            [do
              [push-token-as-sem-tok head-token token-type-keyword]
              [push-form-as-quoted [first tail]]
              ]

            [eq head-word [quote if]]
            [do
              [push-token-as-sem-tok head-token token-type-keyword]
              [loop [i 0]
                [when [lt i [size tail]]
                  [provide-form-sem-toks [at tail i]]
                  [cont [inc i]]]]]

            [or [eq head-word [quote let]] [eq head-word [quote loop]]]
            [let [bindings [if [size tail] [first tail] []]
                  bodies [rest tail]
                  s-minus [dec [size bindings]]]
                [push-token-as-sem-tok head-token token-type-keyword]
                [loop [i 0]
                  [when [lt i s-minus]
                    [let [binder [at bindings i]]
                      [when [eq [first binder] [quote w]]
                        [push-token-as-sem-tok [second binder] token-type-variable]]]
                    [provide-form-sem-toks [at bindings [inc i]]]
                    [cont [add i 2]]]]
                [loop [i 0]
                  [when [lt i [size bodies]]
                    [provide-form-sem-toks [at bodies i]]
                    [cont [inc i]]]]]

            [eq head-word [quote cont]]
            [do
              [push-token-as-sem-tok head-token token-type-keyword]
              [loop [i 0]
                [when [lt i [size tail]]
                  [provide-form-sem-toks [at tail i]]
                  [cont [inc i]]]]]

            [or [eq head-word [quote func]] [eq head-word [quote macro]]]
            [let [name [first tail]
                  params [second tail]
                  body [slice tail 1 [size tail]]]
                [log [list [quote params] params]]
                [push-token-as-sem-tok head-token token-type-keyword]
                [push-token-as-sem-tok [second name]
                  [if [eq head-word [quote func]] token-type-function token-type-macro]]
                [loop [i 1]
                  [when [lt i [size params]]
                    [let [param [at params i]]
                      [when [eq [first param] [quote w]]
                        [let [param-token [second param]]
                          [push-token-as-sem-tok param-token
                          [if [and [eq i [sub [size params] 2]]
                              [eq [sub [token-end param-token] [token-start param-token]] 2]
                              [eq [word-from-doc param-token] [quote ..]]]
                            token-type-keyword
                            token-type-parameter]]]]]
                    [cont [inc i]]]]
                [loop [i 0]
                  [when [lt i [size body]]
                    [provide-form-sem-toks [at body i]]
                    [cont [inc i]]]]]

              [do
                [push-token-as-sem-tok head-token token-type-function]
                [loop [i 0]
                  [when [lt i [size tail]]
                    [provide-form-sem-toks [at tail i]]
                    [cont [inc i]]]]]]]]]]]

[func provide-document-semantic-tokens [document-line-count]
  [let [trees [parse-all-doc document-line-count]]
    [loop [i 0]
      [when [lt i [size trees]]
        [provide-form-sem-toks [at trees i]]
        [cont [inc i]]]]]]
