
[import env
  [mem [memory [i32] 1]]
  [log
    [func
      [par [pointer [exp mem] [array [u8]]]
       n-bytes [i32]]
      [tuple]]]
  [log-i32
    [func
      [n [i32]]
      [tuple]]]]

[def-comp-fn log-ar [ar [array [u8]]] [tuple]
  [log [data mem ar] [size-of-exp ar]]]

[defn main [] [tuple]
  [log-ar [array [u8] [u8 97]]]
  [log-ar [array [u8] [u8 49 50 51]]]
  ]

[export main]

[def 0 [i32 0]]
[def 1 [i32 1]]
[def 2 [i32 2]]
[def 3 [i32 3]]

[defn not [x [i32]] [i32]
  [if x 0 1]]

[defn eq [x [i32] y [i32]] [i32] [intrinsic i32.eq x y]]
[defn lt-s [x [i32] y [i32]] [i32] [intrinsic i32.lt-s x y]]
[defn le-s [x [i32] y [i32]] [i32] [intrinsic i32.le-s x y]]

[defn add [x [i32] y [i32]] [i32] [intrinsic i32.add x y]]
[defn sub [x [i32] y [i32]] [i32] [intrinsic i32.sub x y]]
[defn mul [x [i32] y [i32]] [i32] [intrinsic i32.mul x y]]

[defn inc [x [i32]] [i32] [add x 1]]
[defn dec [x [i32]] [i32] [sub x 1]]

[defn bitwise-and [x [i32] y [i32]] [i32] [intrinsic i32.and x y]]
[defn bitwise-ior [x [i32] y [i32]] [i32] [intrinsic i32.or x y]]
[defn bitwise-xor [x [i32] y [i32]] [i32] [intrinsic i32.xor x y]]

[defn is-odd [x [i32]] [i32] [bitwise-and x 1]]

[def static-mem-top [memory-static-top mem]]

[mutable mem-top [memory-static-top mem]]

[defn get-top [] [i32]
  mem-top]

[defn set-top [new-top [i32]] [tuple]
  [assign mem-top new-top]]

[defn align [p [i32] x [i32]] [i32]
  [bitwise-and
    [add x [dec p]]
    [bitwise-xor [i32 -1] [dec p]]]]

[defn mem-align [p [i32]] [i32]
  [align [i32 16] p]]

[defn alloc-n [n-bytes [i32]] [i32]
  [if [eq n-bytes 0] [intrinsic unreachable]]
  [let
    [align-bytes [mem-align n-bytes]
     top-val [get-top]
     mem-size-bytes [mul [intrinsic memory.size mem] [i32 65536]]]
    [if [eq top-val 0] [intrinsic unreachable]]
    [let [new-top [add top-val align-bytes]]
      [if [lt-s mem-size-bytes new-top]
        [intrinsic unreachable]]
      [set-top new-top]]
    top-val]]

[datatype pmem [a datatype]
  [pointer [exp mem] a]]

[functor alloc [t datatype]
  [cast [pmem t] [alloc-n [size-of-type t]]]]

[defn is-between-inclusive [lower [i32] c [i32] upper [i32]] [i32]
  [bitwise-and [le-s lower c] [le-s c upper]]]

[defn is-whitespace [c [i32]] [i32]
  [bitwise-ior [eq c [i32 32]] [eq c [i32 10]]]]

[defn is-word-char [c [i32]] [i32]
  [bitwise-ior
    [is-between-inclusive [i32 97] c [i32 122]]
    [is-between-inclusive [i32 45] c [i32 57]]]]

[defn scan-word-end [bytes [pointer [exp mem] [array [u8]]] start [i32] n-of-bytes [i32]] [i32]
  [loop [i start]
    [if [lt-s n-of-bytes i]
      [if [is-word-char [index [deref bytes] i]]
        [continue i [inc i]]
        i]
      i]]]

[datatype list-data [a datatype size [exp [i32]]]
  [record
    [size [i32]]
    [array [array a size]]]]

[datatype plist [vp datatype]
  [pmem [list-data vp -size]]]

[defn list-size [pvec [plist -a]] [i32]
  [field [deref pvec] size]]

[functor list-alloc [elem-type datatype]
  [func [sz [i32]] [plist elem-type]
    [let [p [alloc [list-data elem-type [exp sz]]]]
      [assign [field [deref p] size] sz]
      p]]]

[functor list-get [elem-type datatype]
  [func [pvec [pmem [list-data elem-type -sz]]  i [i32]] [pmem [array elem-type]]
    [if [lt-s i 0] [intrinsic unreachable]]
    [if [lt-s i [list-size pvec]] [do] [intrinsic unreachable]]
    [index [field [deref pvec] array] i]]]

[functor list-data-array [elem-type datatype]
  [func [pvec [pointer [exp mem] [list-data elem-type -sz]]] [pointer [exp mem] [array elem-type]]
    [ref [field [deref pvec] array]]]]

[defn get-byte [pvec [plist [u8]] i [i32]] [i32]
  [if [lt-s i 0] [intrinsic unreachable]]
  [if [lt-s i [list-size pvec]] [do] [intrinsic unreachable]]
  [index [field [deref pvec] array] i]]

[datatype growable-list [a datatype]
  [record
    [size [i32]]
    [capacity [i32]]
    [parray [pmem [array a]]]]]

[functor growable-list-alloc-init [elem-type datatype]
  [func [init-capacity [i32]] [pmem [growable-list elem-type]]
    [let
      [p [alloc [growable-list elem-type]]]
      [assign [deref p]
        [record
          size 0
          capacity init-capacity
          parray [alloc [array elem-type [exp init-capacity]]]]]
      p]]]

[functor growable-list-push [elem-type datatype]
  [func [pglist [pmem [growable-list elem-type]] elem elem-type] [tuple]
    [let
      [cur-size [field [deref pglist] size]
      cur-capacity [field [deref pglist] capacity]]
      [if [eq cur-size cur-capacity]
        [intrinsic unreachable]]
      [assign [index [deref [field [deref pglist] parray]] cur-size] elem]
      [assign [field [deref pglist] size] [inc cur-size]]]]]

[functor growable-list-to-list [elem-type datatype]
  [func [pglist [pmem [growable-list elem-type]]] [plist elem-type]
    [let
      [cur-size [field [deref pglist] size]
      plist [cast [plist elem-type] [alloc [list-data elem-type [exp cur-size]]]]]
      [assign [field [deref plist] size] cur-size]
      [loop [i 0]
        [if [lt-s i cur-size]
          [do
            [assign
              [index [field [deref plist] array] i]
              [index [deref [field [deref pglist] parray]] i]]
            [continue i [inc i]]]]]
      plist]]]

[defn growable-list-reset [pglist [pmem [growable-list -a]]] [tuple]
  [assign [field [deref pglist] size] 0]]

[datatype text []
  [plist [u8]]]

[def form-word-tag [i32 10]]
[def form-list-tag [i32 11]]

[datatype form-word []
  [record
    [tag [exp form-word-tag]]
    [pword [text]]]]

[datatype
  form-list []
  [record
    [tag [exp form-list-tag]]
    [forms [plist [pmem [form]]]]]

  form []
  [union
    [form-word]
    [form-list]]]

[defn form-tag [pf [pmem [form]]] [i32]
  [field [deref pf] tag]]

[defn form-word-is [pf [pmem [form]]] [i32]
  [eq [field [deref pf] tag] form-word-tag]]

[defn form-word-get [pf [pmem [form]]] [pmem [form-word]]
  [if [not [form-word-is pf]] [intrinsic unreachable]]
  [cast [pmem [form-word]] pf]]

[defn form-list-is [pf [pmem [form]]] [i32]
  [eq [field [deref pf] tag] form-list-tag]]

[defn form-list-get [pf [pmem [form]]] [pmem [form-list]]
  [if [not [form-list-is pf]] [intrinsic unreachable]]
  [cast [pmem [form-list]] pf]]
