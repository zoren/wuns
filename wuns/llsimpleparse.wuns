[import env
  [mem [memory [i32] 1]]
  [log
    [func
      [par [pointer [exp mem] [array [u8]]]
       n-bytes [i32]]
      [tuple]]]
  [log-i32
    [func
      [n [i32]]
      [tuple]]]]

[def-comp-fn log-ar [ar [array [u8]]] [tuple]
  [log [data mem ar] [size-of-exp ar]]]

[def 0 [i32 0]]
[def 1 [i32 1]]
[def 2 [i32 2]]
[def 3 [i32 3]]

[def not
  [func [x [i32]] [i32] [if x 0 1]]]

[defn eq [x [i32] y [i32]] [i32] [intrinsic i32.eq x y]]
[defn lt-s [x [i32] y [i32]] [i32] [intrinsic i32.lt-s x y]]
[defn le-s [x [i32] y [i32]] [i32] [intrinsic i32.le-s x y]]
[defn is-negative [x [i32]] [i32] [lt-s x 0]]

[defn add [x [i32] y [i32]] [i32] [intrinsic i32.add x y]]
[defn sub [x [i32] y [i32]] [i32] [intrinsic i32.sub x y]]
[defn mul [x [i32] y [i32]] [i32] [intrinsic i32.mul x y]]

[defn inc [x [i32]] [i32] [add x 1]]
[defn dec [x [i32]] [i32] [sub x 1]]

[defn bitwise-and [x [i32] y [i32]] [i32] [intrinsic i32.and x y]]
[defn bitwise-ior [x [i32] y [i32]] [i32] [intrinsic i32.or x y]]
[defn bitwise-xor [x [i32] y [i32]] [i32] [intrinsic i32.xor x y]]

[defn is-odd [x [i32]] [i32] [bitwise-and x 1]]

[def static-mem-top [memory-static-top mem]]

[mutable mem-top [memory-static-top mem]]

[defn get-top [] [i32]
  mem-top]

[defn set-top [new-top [i32]] [tuple]
  [assign mem-top new-top]]

[defn align [p [i32] x [i32]] [i32]
  [bitwise-and
    [add x [dec p]]
    [bitwise-xor [i32 -1] [dec p]]]]

[defn mem-align [p [i32]] [i32]
  [align [i32 16] p]]

[def-comp-fn log-abort [ar [array [u8]]] [union]
  [log [data mem ar] [size-of-exp ar]]
  [intrinsic unreachable]]

[defn alloc-n [n-bytes [i32]] [i32]
  [if [eq n-bytes 0] [log-abort [text 'alloc-n 0 bytes']]]
  [let
    [top-val [get-top]]
    [if [eq top-val 0] [log-abort [text 'alloc-n top-val was 0']]]
    [let
      [align-bytes [mem-align n-bytes]
       mem-size-bytes [mul [intrinsic memory.size mem] [i32 65536]]
       new-top [add top-val align-bytes]]
      [if [lt-s mem-size-bytes new-top] [log-abort [text 'alloc-n out of memory, cannot grow yet']]]
      [set-top new-top]]
    top-val]]

[datatype pmem [a datatype]
  [pointer [exp mem] a]]

[functor alloc [t datatype]
  [cast [pmem t] [alloc-n [size-of-type t]]]]

[defn is-between-inclusive [lower [i32] c [i32] upper [i32]] [i32]
  [bitwise-and [le-s lower c] [le-s c upper]]]

[defn is-whitespace [c [i32]] [i32]
  [bitwise-ior [eq c [i32 32]] [eq c [i32 10]]]]

[defn is-word-char [c [i32]] [i32]
  [bitwise-ior
    [is-between-inclusive [i32 97] c [i32 122]]
    [is-between-inclusive [i32 45] c [i32 57]]]]

[datatype list-data [a datatype size [exp [i32]]]
  [record
    [size [i32]]
    [array [array a size]]]]

[datatype plist [vp datatype]
  [pmem [list-data vp -size]]]

[defn list-size [pvec [plist -a]] [i32]
  [field [deref pvec] size]]

[functor list-alloc [elem-type datatype]
  [func [sz [i32]] [plist elem-type]
    [let [p [alloc [list-data elem-type [exp sz]]]]
      [assign [field [deref p] size] sz]
      p]]]

[def list-alloc-byte [list-alloc [u8]]]
[export list-alloc-byte]

[functor list-get [elem-type datatype]
  [func [pvec [pmem [list-data elem-type -sz]] i [i32]] [pmem [array elem-type]]
    [if [lt-s i 0] [log-abort [text 'list-get index negative']]]
    [if [lt-s [list-size pvec] i] [log-abort [text 'list-get index out of bounds']]]
    [index [field [deref pvec] array] i]]]

[defn list-data-array [pvec [plist -a]] [pmem [array -a]]
  [pfield pvec array]]

[export list-data-array]

[datatype growable-list [a datatype]
  [record
    [size [i32]]
    [capacity [i32]]
    [parray [pmem [array a]]]]]

[functor growable-list-alloc-init [elem-type datatype]
  [func [init-capacity [i32]] [pmem [growable-list elem-type]]
    [let
      [p [alloc [growable-list elem-type]]]
      [assign [deref p]
        [record
          size 0
          capacity init-capacity
          parray [alloc [array elem-type [exp init-capacity]]]]]
      p]]]

[functor growable-list-push [elem-type datatype]
  [func [pglist [pmem [growable-list elem-type]] elem elem-type] [tuple]
    [let
      [cur-size [field [deref pglist] size]
       cur-capacity [field [deref pglist] capacity]]
      [if [eq cur-size cur-capacity]
        [let
          [new-capacity [mul cur-capacity 2]
           new-array [alloc [array elem-type [exp new-capacity]]]]
          [intrinsic memory.copy
            mem
            new-array
            [field [deref pglist] parray]
            [mul cur-capacity [size-of-type elem-type]]]
          [assign [field [deref pglist] capacity] new-capacity]
          [assign [field [deref pglist] parray] new-array]]]
      [assign [index [deref [field [deref pglist] parray]] cur-size] elem]
      [assign [field [deref pglist] size] [inc cur-size]]]]]

[functor growable-list-to-list [elem-type datatype]
  [func [pglist [pmem [growable-list elem-type]]] [plist elem-type]
    [let
      [cur-size [field [deref pglist] size]
       plist [cast [plist elem-type] [alloc [list-data elem-type [exp cur-size]]]]]
      [assign [field [deref plist] size] cur-size]
      [loop [i 0]
        [if [lt-s i cur-size]
          [do
            [assign
              [index [field [deref plist] array] i]
              [index [deref [field [deref pglist] parray]] i]]
            [continue i [inc i]]]]]
      plist]]]

[defn growable-list-reset [pglist [pmem [growable-list -a]]] [tuple]
  [assign [field [deref pglist] size] 0]]

[datatype text []
  [plist [u8]]]

[def form-word-tag [i32 10]]
[def form-list-tag [i32 11]]

[datatype form-word []
  [record
    [tag [exp form-word-tag]]
    [pword [text]]]]

[datatype
  form-list []
  [record
    [tag [exp form-list-tag]]
    [forms [plist [pmem [form]]]]]

  form []
  [union
    [form-word]
    [form-list]]]

[defn form-word-alloc [ptext [text]] [pmem [form]]
  [let [p [alloc [form-word]]]
    [assign [field [deref p] tag] [annotation [exp form-word-tag] form-word-tag]]
    [assign [field [deref p] pword] ptext]
    p]]

[defn form-list-alloc [pfs [plist [pmem [form]]]] [pmem [form]]
  [let [p [alloc [form-list]]]
    [assign [field [deref p] tag] [annotation [exp form-list-tag] form-list-tag]]
    [assign [field [deref p] forms] pfs]
    p]]

[defn form-tag [pf [pmem [form]]] [i32]
  [field [deref pf] tag]]

[export form-tag]

[defn form-word-is [pf [pmem [form]]] [i32]
  [eq [field [deref pf] tag] form-word-tag]]

[export form-word-is]

[defn form-word-get [pf [pmem [form]]] [text]
  [if [not [form-word-is pf]] [log-abort [text 'form-word-get not a form-word']]]
  [let [pfw [cast [pmem [form-word]] pf]]
    [field [deref pfw] pword]]]

[export form-word-get]

[defn form-list-is [pf [pmem [form]]] [i32]
  [eq [field [deref pf] tag] form-list-tag]]

[export form-list-is]

[defn form-list-get [pf [pmem [form]]] [plist [pmem [form]]]
  [if [not [form-list-is pf]] [log-abort [text 'form-list-get not a form-list']]]
  [let [pfl [cast [pmem [form-list]] pf]]
    [field [deref pfl] forms]]]

[export form-list-get]

[def list-get-form [list-get [pmem [form]]]]

[export list-get-form]

[def list-get-byte [list-get [u8]]]

[def growable-list-alloc-init-form
  [growable-list-alloc-init [pmem [form]]]]

[def growable-list-to-list-form
  [growable-list-to-list [pmem [form]]]]

[def growable-list-push-form
  [growable-list-push [pmem [form]]]]

[defn scan-word-end [bytes [plist [u8]] start [i32]] [i32]
  [loop [i start n-of-bytes [list-size bytes]]
    [if [lt-s i n-of-bytes]
      [if [is-word-char [list-get-byte bytes i]]
        [continue i [inc i]]
        i]
      i]]]

[defn make-stack [stack-size [i32] init-capacity [i32]] [pmem [array [pmem [growable-list [pmem [form]]]]]]
  [if [le-s init-capacity 0] [log-abort [text 'make-stack init-capacity <= 0']]]
  [let [parray [alloc [array [pmem [growable-list [pmem [form]]]] [exp stack-size]]]]
    [loop [i 0]
      [if [lt-s i stack-size]
        [do
          [assign
            [index [deref parray] i]
            [growable-list-alloc-init-form init-capacity]]
          [continue i [inc i]]]]]
    parray]]

[def stack-size [i32 16]]
[def init-capacity [i32 32]]

[defn list-slice-byte [psrc [plist [u8]] start [i32] end [i32]] [plist [u8]]
  [let
    [sz [sub end start]
     pdst [list-alloc-byte sz]]
    [loop [i 0]
      [if [lt-s i sz]
        [do
          [assign
            [index [field [deref pdst] array] i]
            [index [field [deref psrc] array] [add start i]]]
          [continue i [inc i]]]]]
    pdst]]

[defn unwind-stack [stack [pmem [array [pmem [growable-list [pmem [form]]]]]] stack-index [i32]] [pmem [form]]
  [if [lt-s stack-index 0] [log-abort [text 'unwind-stack stack index negative']]]
  [loop [i stack-index]
    [let [glist [index [deref stack] i]
          form-list [growable-list-to-list-form glist]]
      [growable-list-reset glist]
      [let [fl [form-list-alloc form-list]]
        [if [eq i 0]
          fl
          [do
            [growable-list-push-form [index [deref stack] [dec i]] fl]
            [continue i [dec i]]]]]]]]

[defn parse [bytes [text]] [pmem [form]]
  [loop
    [stack [make-stack stack-size init-capacity]
     n-of-bytes [list-size bytes]
     i 0
     stack-index [i32 -1]]
    [if [not [lt-s i n-of-bytes]]
      [if [is-negative stack-index]
        [cast [pmem [form]] 0]
        [unwind-stack stack stack-index]]
      [let [c [list-get-byte bytes i]]
        [ifs
          [is-word-char c]
          [let [word-end [scan-word-end bytes [inc i]]
                fw [form-word-alloc [list-slice-byte bytes i word-end]]]
            [if [not [lt-s i word-end]] [log-abort [text 'scan-word-end returned i >= word-end']]]
            [if [is-negative stack-index]
              fw
              [do
                [growable-list-push-form [index [deref stack] stack-index] fw]
                [continue i word-end]]]]

          [is-whitespace c]
          [continue i [inc i]]

          [eq c [i32 91]]
          [do
            [if [lt-s stack-size stack-index] [log-abort [text 'stack max depth reached']]]
            [continue
              i [inc i]
              stack-index [inc stack-index]]]

          [eq c [i32 93]]
          [do
            [if [is-negative stack-index] [log-abort [text 'unmatched end bracket']]]
            [let [glist [index [deref stack] stack-index]
                  form-list [growable-list-to-list-form glist]]
              [growable-list-reset glist]
              [let [fl [form-list-alloc form-list]]
                [if [eq stack-index 0]
                  fl
                  [do
                    [growable-list-push-form [index [deref stack] [dec stack-index]] fl]
                    [continue
                      i [inc i]
                      stack-index [dec stack-index]]]]]]]

          [log-abort [text 'unexpected character']]]]]]]

[export make-stack parse list-size ]
