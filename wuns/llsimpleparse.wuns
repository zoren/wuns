
[import env
  [mem [memory [i32] 1]]
  [log
    [func
      [par [pointer [exp mem] [array [u8]]]
       n-bytes [i32]]
      [tuple]]]
  [log-i32
    [func
      [n [i32]]
      [tuple]]]]

[def 0 [i32 0]]
[def 1 [i32 1]]
[def 2 [i32 2]]
[def 3 [i32 3]]

[defn not [x [i32]] [i32]
  [if x 0 1]]

[defn eq [x [i32] y [i32]] [i32] [intrinsic i32.eq x y]]
[defn lt-s [x [i32] y [i32]] [i32] [intrinsic i32.lt-s x y]]
[defn le-s [x [i32] y [i32]] [i32] [intrinsic i32.le-s x y]]

[defn add [x [i32] y [i32]] [i32] [intrinsic i32.add x y]]
[defn sub [x [i32] y [i32]] [i32] [intrinsic i32.sub x y]]
[defn mul [x [i32] y [i32]] [i32] [intrinsic i32.mul x y]]

[defn inc [x [i32]] [i32] [add x 1]]
[defn dec [x [i32]] [i32] [sub x 1]]

[defn bitwise-and [x [i32] y [i32]] [i32] [intrinsic i32.and x y]]
[defn bitwise-ior [x [i32] y [i32]] [i32] [intrinsic i32.or x y]]
[defn bitwise-xor [x [i32] y [i32]] [i32] [intrinsic i32.xor x y]]

[defn is-odd [x [i32]] [i32] [bitwise-and x 1]]

[def static-mem-top [memory-static-top mem]]

[mutable mem-top [memory-static-top mem]]

[defn get-top [] [i32]
  mem-top]

[defn set-top [new-top [i32]] [tuple]
  [assign mem-top new-top]]

[defn align [p [i32] x [i32]] [i32]
  [bitwise-and
    [add x [dec p]]
    [bitwise-xor [i32 -1] [dec p]]]]

[defn mem-align [p [i32]] [i32]
  [align [i32 16] p]]

[defn alloc-n [n-bytes [i32]] [i32]
  [if [eq n-bytes 0] [intrinsic unreachable]]
  [let
    [align-bytes [mem-align n-bytes]
     top-val [get-top]
     mem-size-bytes [mul [intrinsic memory.size mem] [i32 65536]]]
    [if [eq top-val 0] [intrinsic unreachable]]
    [let [new-top [add top-val align-bytes]]
      [if [lt-s mem-size-bytes new-top]
        [intrinsic unreachable]]
      [set-top new-top]]
    top-val]]

[defn is-between-inclusive [lower [i32] c [i32] upper [i32]] [i32]
  [bitwise-and [le-s lower c] [le-s c upper]]]

[defn is-whitespace [c [i32]] [i32]
  [bitwise-ior [eq c [i32 32]] [eq c [i32 10]]]]

[defn is-word-char [c [i32]] [i32]
  [bitwise-ior
    [is-between-inclusive [i32 97] c [i32 122]]
    [is-between-inclusive [i32 45] c [i32 57]]]]

[defn scan-word-end [bytes [pointer [exp mem] [array [u8]]] start [i32] n-of-bytes [i32]] [i32]
  [loop
    [i start]
    [if [lt-s n-of-bytes i]
      [if [is-word-char [index [deref bytes] i]]
        [continue i [inc i]]
        i]
      i]]]

[def data-test [data mem [i32 4]]]

[defn alloc-i32 [n [i32]] [pointer [exp mem] [i32]]
  [let [p [cast [pointer [exp mem] [i32]] [alloc-n [size-of-exp n]]]]
    [assign [deref p] n]
    p]]

[defn alloc-f64 [n [f64]] [pointer [exp mem] [f64]]
  [let [p [cast [pointer [exp mem] [f64]] [alloc-n [size-of-exp n]]]]
    [assign [deref p] n]
    p]]
