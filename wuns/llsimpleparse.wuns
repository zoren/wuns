[import env
  [mem [memory [i32] 1]]
  [log
    [func
      [par [pointer [exp mem] [array [u8]]]
       n-bytes [i32]]
      [tuple]]]
  [log-i32
    [func
      [n [i32]]
      [tuple]]]
  [dump-mem
    [func
      [par [pointer [exp mem] -a]
       n-bytes [i32]]
      [tuple]]]
      ]

[def-comp-fn log-ar [ar [array [u8]]] [tuple]
  [log [data mem ar] [size-of-exp ar]]]

[def 0 [i32 0]]
[def 1 [i32 1]]
[def 2 [i32 2]]
[def 3 [i32 3]]

[def not
  [func [x [i32]] [i32] [if x 0 1]]]

[defn eq [x [i32] y [i32]] [i32] [intrinsic i32.eq x y]]
[defn ne [x [i32] y [i32]] [i32] [intrinsic i32.ne x y]]
[defn lt-s [x [i32] y [i32]] [i32] [intrinsic i32.lt-s x y]]
[defn le-s [x [i32] y [i32]] [i32] [intrinsic i32.le-s x y]]
[defn is-negative [x [i32]] [i32] [lt-s x 0]]

[defn add [x [i32] y [i32]] [i32] [intrinsic i32.add x y]]
[defn sub [x [i32] y [i32]] [i32] [intrinsic i32.sub x y]]
[defn mul [x [i32] y [i32]] [i32] [intrinsic i32.mul x y]]

[defn inc [x [i32]] [i32] [add x 1]]
[defn dec [x [i32]] [i32] [sub x 1]]

[defn bitwise-and [x [i32] y [i32]] [i32] [intrinsic i32.and x y]]
[defn bitwise-ior [x [i32] y [i32]] [i32] [intrinsic i32.or x y]]
[defn bitwise-xor [x [i32] y [i32]] [i32] [intrinsic i32.xor x y]]

[defn is-odd [x [i32]] [i32] [bitwise-and x 1]]

[def static-mem-top [memory-static-top mem]]

[mutable mem-top [memory-static-top mem]]

[defn get-top [] [i32]
  mem-top]

[defn set-top [new-top [i32]] [tuple]
  [assign mem-top new-top]]

[defn align [p [i32] x [i32]] [i32]
  [bitwise-and
    [add x [dec p]]
    [bitwise-xor [i32 -1] [dec p]]]]

[defn mem-align [p [i32]] [i32]
  [align [i32 16] p]]

[def-comp-fn log-abort [ar [array [u8]]] [union]
  [log [data mem ar] [size-of-exp ar]]
  [intrinsic unreachable]]

[datatype pmem [a datatype]
  [pointer [exp mem] a]]

[defn memory-fill [p [pmem -a] value [i32] n-bytes [i32]] [tuple]
  [intrinsic memory.fill mem p value n-bytes]]

[defn memory-zero [p [pmem -a] n-bytes [i32]] [tuple]
  [memory-fill p 0 n-bytes]]

[defn mem-size-bytes [] [i32]
  [intrinsic i32.shl [intrinsic memory.size mem] [i32 16]]]

[def null [cast [pmem -a] [i32 0]]]

[defn is-null [p [pmem -a]] [i32]
  [eq [cast [i32] p] 0]]

[datatype alloc-stack-frame [byte-aligned-size [exp [i32]]]
  [record
    [frame-size [i32]]
    [byte-size [i32]]
    [byte-aligned-size [i32]]
    [realloc-size [i32]] ; a size less than equal to the original for when the block is reallocated to a smaller size in place
    [abandoned [i32]] ; when the block could not be reallocated in place
    [data [array [u8] byte-aligned-size]]
    [canary [i32]]
    [frame-size-end [i32]]
    ]]

[def canary-value [i32 0xdeadbeef]]

[mutable num-of-frames [i32 0]]

[defn get-number-of-frames [] [i32] num-of-frames]

[export get-number-of-frames]

[defn alloc-frame-log [pframe [pmem [alloc-stack-frame -a]]] [tuple]
  [let
    [frame-size [field [deref pframe] frame-size]
     byte-size [field [deref pframe] byte-size]
     realloc-size [field [deref pframe] realloc-size]
     byte-aligned-size [field [deref pframe] byte-aligned-size]
     abandoned [field [deref pframe] abandoned]
     pframe-sized [cast [pmem [alloc-stack-frame [exp byte-aligned-size]]] pframe]
     canary [field [deref pframe-sized] canary]
     frame-size-end [field [deref pframe-sized] frame-size-end]]
  [log-ar [text 'frame']]
  [log-i32 frame-size]
  [log-i32 byte-size]
  [log-i32 realloc-size]
  [log-i32 byte-aligned-size]]]

[defn alloc-frame-validate [pframe [pmem [alloc-stack-frame -a]]] [tuple]
  [if [lt-s pframe static-mem-top]
    [log-abort [text 'alloc-frame-validate pframe < static-mem-top']]]
  [if [lt-s [mem-size-bytes] [add pframe [size-of-type [alloc-stack-frame [exp [mem-align 1]]]]]]
    [log-abort [text 'alloc-frame-validate mem-size-bytes < frame-size']]]
  [let
    [frame-size [field [deref pframe] frame-size]
     byte-size [field [deref pframe] byte-size]
     realloc-size [field [deref pframe] realloc-size]
     byte-aligned-size [field [deref pframe] byte-aligned-size]
     abandoned [field [deref pframe] abandoned]
     pframe-sized [cast [pmem [alloc-stack-frame [exp byte-aligned-size]]] pframe]
     canary [field [deref pframe-sized] canary]
     frame-size-end [field [deref pframe-sized] frame-size-end]]
    [if [lt-s frame-size [size-of-type [alloc-stack-frame [exp 0]]]]
      [log-abort [text 'validate-alloc frame-size < size-of-type alloc-stack-frame 0']]]
    [if [ne [mem-align byte-size] byte-aligned-size]
      [log-abort [text 'validate-alloc byte-size != byte-aligned-size']]]
    [if [lt-s byte-size realloc-size]
      [log-abort [text 'validate-alloc byte-size < realloc-size']]]
    [if [lt-s abandoned 0] [log-abort [text 'validate-alloc abandoned < 0']]]
    [if [lt-s 1 abandoned] [log-abort [text 'validate-alloc abandoned > 1']]]
    [if [ne canary canary-value] [log-abort [text 'validate-alloc canary value mismatch']]]
    [if [ne frame-size frame-size-end] [log-abort [text 'validate-alloc frame-size != frame-size-end']]]]]

[defn alloc-frames-validate-all [] [i32]
  [loop
    [cur-top [get-top]
     i static-mem-top
     n-frames 0]
    [if [lt-s i cur-top]
      [let
        [pframe [cast [pmem [alloc-stack-frame -a]] i]
         frame-size [field [deref pframe] frame-size]]
        [alloc-frame-validate pframe]
        [continue i [add i frame-size] n-frames [inc n-frames]]]
      [do
        [if [ne n-frames num-of-frames]
          [log-abort [text 'alloc-frames-validate-all n-frames != num-of-frames']]]
        n-frames]]]]

[export alloc-frames-validate-all]

[defn resize-mem [frame-size [i32]] [tuple]
  [let
    [new-top [add [get-top] frame-size]
     mem-size [mem-size-bytes]]
    [if [lt-s mem-size new-top]
      [let
        [missing-bytes [sub new-top mem-size]
         missing-pages [intrinsic i32.shr-s [align [i32 65536] missing-bytes] [i32 16]]
         res [intrinsic memory.grow mem missing-pages]]
        [if [is-negative res] [log-abort [text 'resize-mem memory.grow failed']]]
        [log-ar [text 'resize-mem grew mem pages']]
        [log-i32 missing-bytes]
        [log-i32 missing-pages]]]
    [set-top new-top]]]

[defn alloc-stack-frame-push [byte-size [i32]] [pmem -a]
  [let
    [byte-aligned-size [mem-align byte-size]
     frame-size [size-of-type [alloc-stack-frame [exp byte-aligned-size]]]
     cur-top [get-top]
     pframe [cast [pmem [alloc-stack-frame [exp byte-aligned-size]]] cur-top]
     frame-data [pfield pframe data]]
    [resize-mem frame-size]
    [assign [field [deref pframe] frame-size] frame-size]
    [assign [field [deref pframe] byte-size] byte-size]
    [assign [field [deref pframe] byte-aligned-size] byte-aligned-size]
    [assign [field [deref pframe] realloc-size] byte-size]
    [assign [field [deref pframe] abandoned] 0]
    [memory-zero frame-data byte-aligned-size]
    [assign [field [deref pframe] canary] canary-value]
    [assign [field [deref pframe] frame-size-end] frame-size]

    [assign num-of-frames [inc num-of-frames]]

    frame-data]]

[defn alloc-stack-frame-update [pframe [pmem [alloc-stack-frame -a]] new-byte-size [i32]] [pmem -a]
  [if [eq new-byte-size 0] [log-abort [text 'alloc-stack-frame-update new-byte-size == 0']]]
  [let
    [old-frame-size [field [deref pframe] frame-size]
     byte-aligned-size [mem-align new-byte-size]
     pframe-sized [cast [pmem [alloc-stack-frame [exp byte-aligned-size]]] pframe]
     frame-size [size-of-type [alloc-stack-frame [exp byte-aligned-size]]]
     frame-data [pfield pframe data]]
    [resize-mem [sub frame-size old-frame-size]]
    [assign [field [deref pframe] frame-size] frame-size]
    [assign [field [deref pframe] byte-size] new-byte-size]
    [assign [field [deref pframe] byte-aligned-size] byte-aligned-size]
    [assign [field [deref pframe] realloc-size] new-byte-size]
    [assign [field [deref pframe] abandoned] 0]
    [assign [field [deref pframe-sized] canary] canary-value]
    [assign [field [deref pframe-sized] frame-size-end] frame-size]

    frame-data]]

[mutable overwrite-memory-value [i32 0xa0]]

[defn overwrite-memory [pdata [pmem -a] n-bytes [i32]] [tuple]
  [if [lt-s n-bytes 0] [log-abort [text 'overwrite n-bytes < 0']]]
  ; write between 0xa0 and 0xfe to the memory
  [let [overwrite-val overwrite-memory-value]
    [memory-fill pdata overwrite-val n-bytes]
    [assign overwrite-memory-value
      [if [eq overwrite-val [i32 0xfe]]
        [i32 0xa0]
        [inc overwrite-val]]]]]

[defn alloc-stack-frame-abandon [pframe [pmem [alloc-stack-frame -a]]] [tuple]
  ; overwrite data area to avoid dangling pointers using it
  [overwrite-memory [pfield pframe data] [field [deref pframe] byte-aligned-size]]
  [assign [field [deref pframe] abandoned] 1]]

[defn get-top-frame [] [pmem [alloc-stack-frame -a]]
  [let [cur-top [get-top]]
    [if [eq cur-top static-mem-top]
      [cast [pmem [alloc-stack-frame -a]] null]
      [let
        [pframe-size [cast [pmem [i32]] [sub cur-top [size-of-type [i32]]]]
         frame-size [deref pframe-size]
         pframe [cast [pmem [alloc-stack-frame -a]] [sub cur-top frame-size]]]
        [alloc-frame-validate pframe]
        pframe]]]]

[defn alloc-stack-pop [] [tuple]
  [let [pframe [get-top-frame]]
    [if [is-null pframe]
      [log-abort [text 'alloc-stack-pop stack empty']]]
    [set-top pframe]
    [assign num-of-frames [dec num-of-frames]]
    [memory-zero pframe [field [deref pframe] frame-size]]]]

; inspired by the lua lua_Alloc function signature
; https://ligurio.github.io/lua-c-manual-pages/lua_Alloc.3.html

[defn realloc [old-p [pmem -a] old-n-bytes [i32] new-n-bytes [i32]] [pmem -a]
  [ifs
    [eq old-p 0]
    [do
      [if [ne old-n-bytes 0] [log-abort [text 'realloc old-p == 0 && old-n-bytes != 0']]]
      [alloc-stack-frame-push new-n-bytes]]

    [eq old-n-bytes 0]
    [do
      [if [ne old-p 0] [log-abort [text 'realloc old-n-bytes == 0 && old-p != 0']]]
      [alloc-stack-frame-push new-n-bytes]]

    [let
      ; find the frame from the data pointer
      [pframe-i [sub old-p [offset-of [alloc-stack-frame -a] data]]
       pframe [cast [pmem [alloc-stack-frame -a]] pframe-i]
       frame-end [add pframe-i [field [deref pframe] frame-size]]]
      [alloc-frame-validate pframe]
      ; check if old-n matches the frame realloc-size
      [if [ne old-n-bytes [field [deref pframe] realloc-size]]
        [log-abort [text 'realloc old-n-bytes != realloc-size']]]
      ; if the frame is the top frame
      [if [eq [get-top] frame-end]
        ; if we are freeing the frame
        [if [eq new-n-bytes 0]
          [do
            ; pop top frame
            [alloc-stack-pop]
            ; pop abandoned frames till we find a non-abandoned frame or the bottom of the stack
            [loop []
              [let [ptframe [get-top-frame]]
                [if [not [is-null ptframe]]
                  [if [eq [field [deref ptframe] abandoned] 1]
                    [do
                      [alloc-stack-pop]
                      [continue]]]]]]
            null]
          [do
            [if [eq [field [deref pframe] abandoned] 1]
              [log-abort [text 'realloc top frame is abandoned, should not happen']]]
            ; if we are updating the size of the frame
            [if [ne old-n-bytes new-n-bytes]
              [alloc-stack-frame-update pframe new-n-bytes]
              old-p]]]
        ; else, frame is not the last frame
        [ifs
          [eq new-n-bytes 0]
          [do
            [alloc-stack-frame-abandon pframe]
            null]

          [eq old-n-bytes new-n-bytes]
          old-p

          ; if we are within the frame size
          [le-s new-n-bytes [field [deref pframe] byte-size]]
          [do
            [if [eq [field [deref pframe] abandoned] 1]
              [log-abort [text 'realloc cannot update abandoned frame']]]
            [assign [field [deref pframe] realloc-size] new-n-bytes]
            [if [lt-s old-n-bytes new-n-bytes]
              ; zero new memory area
              [memory-zero
                [cast [pmem -a] [add [pfield pframe data] old-n-bytes]]
                [sub new-n-bytes old-n-bytes]]
              ; overwrite now unused parts of the data area to avoid dangling pointers using it
              [overwrite-memory
                [cast [pmem -a] [add [pfield pframe data] new-n-bytes]]
                [sub old-n-bytes new-n-bytes]]]
            old-p]
          ; else, allocate a new frame copying over old data, then abandon the old frame
          [let
            [new-data [alloc-stack-frame-push new-n-bytes]]
            [intrinsic memory.copy mem new-data old-p old-n-bytes]
            [alloc-stack-frame-abandon pframe]
            new-data]]]]]]

[export realloc]

[functor alloc [t datatype]
  [cast [pmem t] [realloc null 0 [size-of-type t]]]]

[defn free [old-p [pmem -a] old-n-bytes [i32]] [tuple]
  [realloc old-p old-n-bytes 0]
  [do]]

[defn is-between-inclusive [lower [i32] c [i32] upper [i32]] [i32]
  [bitwise-and [le-s lower c] [le-s c upper]]]

[defn is-whitespace [c [i32]] [i32]
  [bitwise-ior [eq c [i32 32]] [eq c [i32 10]]]]

[defn is-word-char [c [i32]] [i32]
  [bitwise-ior
    [is-between-inclusive [i32 97] c [i32 122]]
    [is-between-inclusive [i32 45] c [i32 57]]]]

[datatype list-data [a datatype size [exp [i32]]]
  [record
    [size [i32]]
    [array [array a size]]]]

[datatype plist [vp datatype]
  [pmem [list-data vp -size]]]

[defn list-size [pvec [plist -a]] [i32]
  [field [deref pvec] size]]

[functor list-alloc [elem-type datatype]
  [func [sz [i32]] [plist elem-type]
    [let [p [alloc [list-data elem-type [exp sz]]]]
      [assign [field [deref p] size] sz]
      p]]]

[def list-alloc-byte [list-alloc [u8]]]
[export list-alloc-byte]

[functor list-get [elem-type datatype]
  [func [pvec [pmem [list-data elem-type -sz]] i [i32]] [pmem [array elem-type]]
    [if [lt-s i 0] [log-abort [text 'list-get index negative']]]
    [if [lt-s [list-size pvec] i] [log-abort [text 'list-get index out of bounds']]]
    [index [field [deref pvec] array] i]]]

[defn list-data-array [pvec [plist -a]] [pmem [array -a]]
  [pfield pvec array]]

[export list-data-array]

[datatype growable-list [a datatype]
  [record
    [size [i32]]
    [capacity [i32]]
    [parray [pmem [array a]]]]]

[functor growable-list-alloc-init [elem-type datatype]
  [func [init-capacity [i32]] [pmem [growable-list elem-type]]
    [let
      [p [alloc [growable-list elem-type]]]
      [assign [deref p]
        [record
          size 0
          capacity init-capacity
          parray [alloc [array elem-type [exp init-capacity]]]]]
      p]]]

[functor growable-list-push [elem-type datatype]
  [func [pglist [pmem [growable-list elem-type]] elem elem-type] [tuple]
    [let
      [cur-size [field [deref pglist] size]
       cur-capacity [field [deref pglist] capacity]]
      [if [eq cur-size cur-capacity]
        [let
          [new-capacity [mul cur-capacity 2]
           new-array
           [cast [pmem [array elem-type]]
            [realloc
              [field [deref pglist] parray]
              [size-of-type [array elem-type [exp cur-capacity]]]
              [size-of-type [array elem-type [exp new-capacity]]]]]]
          [assign [field [deref pglist] capacity] new-capacity]
          [assign [field [deref pglist] parray] new-array]]]
      [assign [index [deref [field [deref pglist] parray]] cur-size] elem]
      [assign [field [deref pglist] size] [inc cur-size]]]]]

[functor growable-list-to-list [elem-type datatype]
  [func [pglist [pmem [growable-list elem-type]]] [plist elem-type]
    [let
      [cur-size [field [deref pglist] size]
       plist [cast [plist elem-type] [alloc [list-data elem-type [exp cur-size]]]]]
      [assign [field [deref plist] size] cur-size]
      [loop [i 0]
        [if [lt-s i cur-size]
          [do
            [assign
              [index [field [deref plist] array] i]
              [index [deref [field [deref pglist] parray]] i]]
            [continue i [inc i]]]]]
      plist]]]

[defn growable-list-reset [pglist [pmem [growable-list -a]]] [tuple]
  [assign [field [deref pglist] size] 0]]

[datatype text []
  [plist [u8]]]

[def form-word-tag [i32 10]]
[def form-list-tag [i32 11]]

[datatype form-word []
  [record
    [tag [exp form-word-tag]]
    [pword [text]]]]

[datatype
  form-list []
  [record
    [tag [exp form-list-tag]]
    [forms [plist [pmem [form]]]]]

  form []
  [union
    [form-word]
    [form-list]]]

[defn form-word-alloc [ptext [text]] [pmem [form]]
  [let [p [alloc [form-word]]]
    [assign [field [deref p] tag] [annotation [exp form-word-tag] form-word-tag]]
    [assign [field [deref p] pword] ptext]
    p]]

[defn form-list-alloc [pfs [plist [pmem [form]]]] [pmem [form]]
  [let [p [alloc [form-list]]]
    [assign [field [deref p] tag] [annotation [exp form-list-tag] form-list-tag]]
    [assign [field [deref p] forms] pfs]
    p]]

[defn form-tag [pf [pmem [form]]] [i32]
  [field [deref pf] tag]]

[export form-tag]

[defn form-word-is [pf [pmem [form]]] [i32]
  [eq [field [deref pf] tag] form-word-tag]]

[export form-word-is]

[defn form-word-get [pf [pmem [form]]] [text]
  [if [not [form-word-is pf]] [log-abort [text 'form-word-get not a form-word']]]
  [let [pfw [cast [pmem [form-word]] pf]]
    [field [deref pfw] pword]]]

[export form-word-get]

[defn form-list-is [pf [pmem [form]]] [i32]
  [eq [field [deref pf] tag] form-list-tag]]

[export form-list-is]

[defn form-list-get [pf [pmem [form]]] [plist [pmem [form]]]
  [if [not [form-list-is pf]] [log-abort [text 'form-list-get not a form-list']]]
  [let [pfl [cast [pmem [form-list]] pf]]
    [field [deref pfl] forms]]]

[export form-list-get]

[def list-get-form [list-get [pmem [form]]]]

[export list-get-form]

[def list-get-byte [list-get [u8]]]

[def growable-list-alloc-init-form
  [growable-list-alloc-init [pmem [form]]]]

[def growable-list-to-list-form
  [growable-list-to-list [pmem [form]]]]

[def growable-list-push-form
  [growable-list-push [pmem [form]]]]

[defn scan-word-end [bytes [plist [u8]] start [i32]] [i32]
  [loop [i start n-of-bytes [list-size bytes]]
    [if [lt-s i n-of-bytes]
      [if [is-word-char [list-get-byte bytes i]]
        [continue i [inc i]]
        i]
      i]]]

[defn make-stack [stack-size [i32] init-capacity [i32]] [pmem [array [pmem [growable-list [pmem [form]]]]]]
  [if [le-s init-capacity 0] [log-abort [text 'make-stack init-capacity <= 0']]]
  [let [parray [alloc [array [pmem [growable-list [pmem [form]]]] [exp stack-size]]]]
    [loop [i 0]
      [if [lt-s i stack-size]
        [do
          [assign
            [index [deref parray] i]
            [growable-list-alloc-init-form init-capacity]]
          [continue i [inc i]]]]]
    parray]]

[def stack-size [i32 16]]
[def init-capacity [i32 32]]

[defn list-slice-byte [psrc [plist [u8]] start [i32] end [i32]] [plist [u8]]
  [let
    [sz [sub end start]
     pdst [list-alloc-byte sz]]
    [loop [i 0]
      [if [lt-s i sz]
        [do
          [assign
            [index [field [deref pdst] array] i]
            [index [field [deref psrc] array] [add start i]]]
          [continue i [inc i]]]]]
    pdst]]

[defn unwind-stack [stack [pmem [array [pmem [growable-list [pmem [form]]]]]] stack-index [i32]] [pmem [form]]
  [if [lt-s stack-index 0] [log-abort [text 'unwind-stack stack index negative']]]
  [loop [i stack-index]
    [let [glist [index [deref stack] i]
          form-list [growable-list-to-list-form glist]]
      [growable-list-reset glist]
      [let [fl [form-list-alloc form-list]]
        [if [eq i 0]
          fl
          [do
            [growable-list-push-form [index [deref stack] [dec i]] fl]
            [continue i [dec i]]]]]]]]

[defn parse [bytes [text]] [pmem [form]]
  [loop
    [stack [make-stack stack-size init-capacity]
     n-of-bytes [list-size bytes]
     i 0
     stack-index [i32 -1]]
    [if [not [lt-s i n-of-bytes]]
      [if [is-negative stack-index]
        [cast [pmem [form]] null]
        [unwind-stack stack stack-index]]
      [let [c [list-get-byte bytes i]]
        [ifs
          [is-word-char c]
          [let [word-end [scan-word-end bytes [inc i]]
                fw [form-word-alloc [list-slice-byte bytes i word-end]]]
            [if [not [lt-s i word-end]] [log-abort [text 'scan-word-end returned i >= word-end']]]
            [if [is-negative stack-index]
              fw
              [do
                [growable-list-push-form [index [deref stack] stack-index] fw]
                [continue i word-end]]]]

          [is-whitespace c]
          [continue i [inc i]]

          [eq c [i32 91]]
          [do
            [if [lt-s stack-size stack-index] [log-abort [text 'stack max depth reached']]]
            [continue
              i [inc i]
              stack-index [inc stack-index]]]

          [eq c [i32 93]]
          [do
            [if [is-negative stack-index] [log-abort [text 'unmatched end bracket']]]
            [let [glist [index [deref stack] stack-index]
                  form-list [growable-list-to-list-form glist]]
              [growable-list-reset glist]
              [let [fl [form-list-alloc form-list]]
                [if [eq stack-index 0]
                  fl
                  [do
                    [growable-list-push-form [index [deref stack] [dec stack-index]] fl]
                    [continue
                      i [inc i]
                      stack-index [dec stack-index]]]]]]]

          [log-abort [text 'unexpected character']]]]]]]

[export make-stack parse list-size ]

[defn parse-n [bytes [text]] [plist [pmem [form]]]
  [let
    [stack [make-stack stack-size init-capacity]
     n-of-bytes [list-size bytes]
     result [growable-list-alloc-init-form [i32 20]]]
    [loop
      [i 0
       stack-index [i32 -1]]
      [if [not [lt-s i n-of-bytes]]
        [if [not [is-negative stack-index]]
          [growable-list-push-form result [unwind-stack stack stack-index]]]
        [let [c [list-get-byte bytes i]]
          [ifs
            [is-word-char c]
            [let [word-end [scan-word-end bytes [inc i]]
                  fw [form-word-alloc [list-slice-byte bytes i word-end]]]
              [if [not [lt-s i word-end]] [log-abort [text 'scan-word-end returned i >= word-end']]]
              [if [is-negative stack-index]
                [growable-list-push-form result fw]
                [growable-list-push-form [index [deref stack] stack-index] fw]]
              [continue i word-end]]

            [is-whitespace c]
            [continue i [inc i]]

            [eq c [i32 91]]
            [do
              [if [lt-s stack-size stack-index] [log-abort [text 'stack max depth reached']]]
              [continue
                i [inc i]
                stack-index [inc stack-index]]]

            [eq c [i32 93]]
            [do
              [if [is-negative stack-index] [log-abort [text 'unmatched end bracket']]]
              [let [glist [index [deref stack] stack-index]
                    form-list [growable-list-to-list-form glist]]
                [growable-list-reset glist]
                [let [fl [form-list-alloc form-list]]
                  [if [eq stack-index 0]
                    [growable-list-push-form result fl]
                    [growable-list-push-form [index [deref stack] [dec stack-index]] fl]]
                  [continue
                    i [inc i]
                    stack-index [dec stack-index]]]]]

            [log-abort [text 'unexpected character']]]]]]
        [growable-list-to-list-form result]]]

[export parse-n]
