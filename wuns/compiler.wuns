[macro comment [.. -] []]

[func list [.. l] l]

[macro constant-id [name]
  [list [quote constant] name [list [quote quote] name]]]

[constant-id 0]
[constant-id 1]
[constant-id 2]
[constant-id 3]
[constant-id -1]

[func inc [x] [add x 1]]

[func dec [x] [sub x 1]]

[func not [c] [eqz c]]

[func is-zero [x] [eqz x]]

[func is-odd [x] [bit-and x 1]]

[func is-even [x] [not [is-odd x]]]

[func is-negative [x] [lt x 0]]

[func first [l] [at l 0]]
[func second [l] [at l 1]]
[func third [l] [at l 2]]

[func rest [l] [slice l 1 [size l]]]

[func push-all [mut-list list]
  [let [s-l [size list]]
    [loop [i 0]
      [if [lt i s-l]
        [let []
          [push mut-list [at list i]]
          [cont [inc i]]]
        []]]]]

[func concat-lists [lists]
  [let [res [mutable-list] s [size lists]]
    [loop [i 0]
      [if [lt i s]
        [let []
          [push-all res [at lists i]]
          [cont [inc i]]]
        [freeze res]]]]]

[func concat [.. lists] [concat-lists lists]]

[macro do [.. forms]
  [concat [quote [let []]] forms]]

[macro when [cond .. forms]
  [list
    [quote if] cond
    [concat [quote [do]] forms]
    []]]

[macro when-not [cond .. forms]
  [list
    [quote if] cond
    []
    [concat [quote [do]] forms]]]

[macro assert [cond .. lmsg]
  [list [quote when-not] cond
    [list [quote log] [list [quote quote] [concat [list [quote assert-fail]] lmsg]]]
    [quote [abort]]]]

[macro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [not [is-zero s]] ifs requires an odd number of arguments]
    [if [eq s 1]
        [first clauses]
        [list [quote if] [first clauses]
          [second clauses]
          [concat [quote [ifs]] [slice clauses 2 [size clauses]]]]]]]

[macro and [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      1

      [eq s 1]
      [first clauses]

      [let [gs [gensym]]
        [list [quote let] [list gs [first clauses]]
          [list [quote if] gs
            [concat [quote [and]] [rest clauses]]
            gs]]]]]]

[macro or [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      0

      [eq s 1]
      [first clauses]

      [let [gs [gensym]]
        [list [quote let] [list gs [first clauses]]
          [list [quote if] gs
            gs
            [concat [quote [or]] [rest clauses]]]]]]]]

[func u32-word-to-leb-128 [w]
  [assert [not [is-negative w]] expected 32 bit ints]
  [let [res [mutable-list]]
    [loop [n w]
      [let
        [byte [bit-and n [quote 127]]
        nn [bit-shift-right-signed n [quote 7]]]
        [if [is-zero nn]
          [push res byte]
          [do
            [push res [bit-or byte [quote 128]]]
            [cont nn]]]]]
    [freeze res]]]

[func s32-word-to-leb-128 [value]
  [let [res [mutable-list]]
    [loop [value1 value]
      [let
        [byte [bit-and value1 [quote 127]]
         value2 [bit-shift-right-signed value1 [quote 7]]
         sign-bit [bit-and byte [quote 64]]]
        [if [or [and [is-zero value2]       [not sign-bit]]
                [and [eq value2 [quote -1]] sign-bit]]
          [push res byte]
          [do
            [push res [bit-or byte [quote 128]]]
            [cont value2]]]]]
    [freeze res]]]

[func reverse [l]
  [let [res [mutable-list]]
    [loop [i [dec [size l]]]
      [when-not [is-negative i]
        [push res [at l i]]
        [cont [dec i]]]]
    [freeze res]]]

[constant ascii-x [quote 120]]

[func dec-word-to-hex-word [dw]
  [assert [not [is-negative dw]] expected non-negative decimal word]
  [if [is-zero dw]
    [quote 0x0]
    [let [hex-digits [quote 0123456789abcdef]
          res [mutable-list]]
      [loop [n dw]
        [if [is-zero n]
          [do
            [push res ascii-x]
            [push res [quote 48]]
            [word-from-codepoints [reverse res]]]
          [let [remainder [bit-and n [quote 15]]
                quotient [bit-shift-right-signed n [quote 4]]]
            [push res [at hex-digits remainder]]
            [cont quotient]]]]]]]

[func dec-words-to-hex [decs]
  [let [res [mutable-list] s [size decs]]
    [loop [i 0]
      [if [lt i s]
        [do
          [push res [dec-word-to-hex-word [at decs i]]]
          [cont [inc i]]]
        [freeze res]]]]]

[func eq-word [a b]
  [and [eq [size a] [size b]]
    [loop [i 0]
      [if [lt i [size a]]
        [if [eq [at a i] [at b i]]
          [cont [inc i]]
          0]
        1]]]]

[func = [a b]
  [if
    [and [is-word a] [is-word b]]
    [eq-word a b]

    [and [is-list a] [is-list b]
      [let [s [size a]]
        [and [eq s [size b]]
          [loop [i [quote 0]]
            [or [ge i s]
              [and [= [at a i] [at b i]] [cont [inc i]]]]]]]]]]

[func test [expected actual]
  [when-not [= expected actual]
    [log [list [quote expected] expected [quote [but got]] actual]]]]

[comment wikipedia says 0xe5 0x8e 0x26]

[test [quote [0xe5 0x8e 0x26]] [dec-words-to-hex [u32-word-to-leb-128 [quote 624485]]]]

[comment wikipedia says 0xc0 0xbb 0x78]

[test [quote [0xc0 0xbb 0x78]] [dec-words-to-hex [s32-word-to-leb-128 [quote -123456]]]]

[constant i32.const [quote 65]]
[constant local.get [quote 32]]

[func constant [n]
  [concat [i32.const] [s32-word-to-leb-128 n]]]

[func lookup-assoc-list [ctx sym]
  [let [s [size ctx]]
    [loop [i [quote 0]]
      [if [ge i s]
        [abort]
        [let [k [at ctx i]
              v [at ctx [inc i]]]
          [if [eq-word k sym]
            v
            [cont [add i 2]]]]]]]]

[func get-local-index [ctx sym]
  [let [s [size ctx]]
    [loop [i [sub s 2]]
      [if [lt i [quote -1]]
        [abort]
        [let [k [at ctx i]]
          [if [eq-word k sym]
            [bit-shift-right-signed i 1]
            [cont [sub i 2]]]]]]]]

[constant local.get [quote 32]]

[constant empty-type [quote 0x40]]
[constant i32 [quote 0x7f]]

[func make-operation-obj [name opcode parameters results]
  [concat
    [quote [name]] [list name]
    [quote [opcode]] [list opcode]
    [quote [parameters]] [list parameters]
    [quote [results]] [list results]]]

[macro make-binary-i32 [name opcode]
  [list [quote quote] [make-operation-obj name opcode [list i32 i32] [list i32]]]]

[constant instructions
  [list
    [make-binary-i32 i32.eq  0x46]
    [make-binary-i32 i32.add 0x6a]
    [make-binary-i32 i32.sub 0x6b]
    [make-binary-i32 i32.mul 0x6c]
    ]]

[func get-instruction [name]
  [loop [i 0]
    [if [lt i [size instructions]]
      [let [o [at instructions i]]
        [if [eq-word [lookup-assoc-list o [quote name]] name]
          o
          [cont [inc i]]]]
      0]]]

[func make-mty-ctx []
  [list
    [quote types] [mutable-list]
    [quote functions] [mutable-list]
    [quote exports] [mutable-list]
    [quote codes] [mutable-list]]]

[func type-function [params results]
  [concat
    [quote [0x60]]
    [u32-word-to-leb-128 [size params]]
    params
    [u32-word-to-leb-128 [size results]]
    results]]

[func params-to-ctx [params]
  [let [ml [mutable-list]]
    [loop [i 0]
      [when [lt i [size params]]
        [push ml [at params i]]
        [push ml i32]
        [cont [inc i]]]]
    [freeze ml]]]

[func params-to-list [params]
  [let [ml [mutable-list]]
    [loop [i 0]
      [when [lt i [size params]]
        [push ml i32]
        [cont [inc i]]]]
    [freeze ml]]]

[constant if [quote 0x04]]
[constant else [quote 0x05]]
[constant end [quote 0x0b]]

[func push-type [ctx type]
  [let [types [lookup-assoc-list ctx [quote types]]
        index [index-of-word types type]]
    [if [is-negative index]
      [let [new-index [size types]]
        [push types type]
        new-index]
      index]]]

[func index-of-word [words word]
  [let [s-words [size words]]
    [loop [i 0]
      [if [lt i s-words]
        [if [eq-word word [at words i]]
          i
          [cont [inc i]]]
        [quote -1]]]]]

[constant kind-function 0]

[func word-to-codepoints [w]
  [let [ml [mutable-list]]
    [loop [i 0]
      [when [lt i [size w]]
        [push ml [at w i]]
        [cont [inc i]]]]
    [freeze ml]]]

[func export [name kind index]
  [concat
    [u32-word-to-leb-128 [size name]]
    [word-to-codepoints name]
    [list kind]
    [u32-word-to-leb-128 index]]]

[func dec-word-to-i32 [dw]
  [let [s [sub 0 [size dw]]]
    [loop [i -1 res 0 multi 1]
      [if [le s i]
        [let [c [at dw i]]
          [assert [and [le [quote 48] c] [le c [quote 57]]] not a decimal character]
          [assert [lt res [quote 214748364]] out of bounds]
          [cont [dec i] [add res [mul [sub c [quote 48]] multi]] [mul multi [quote 10]]]]
        res]]]]

[test [quote 1337] [dec-word-to-i32 [quote 1337]]]

[func code [locals instructions]
  [assert [is-zero [size locals]] locals not supported yet]
  [let
    [bytes
      [concat
        [u32-word-to-leb-128 [size locals]]
        [comment missing locals here]
        instructions]]
    [concat [u32-word-to-leb-128 [size bytes]] bytes]]]

[func type-list-to-code [type-list]
  [ifs
    [= type-list []]
    0x40

    [= type-list [list i32]]
    i32

    [do
      [log [quote type-list-to-code unknown types]]
      [abort]]]]

[func compile-form-mutable [ctx code form]
  [ifs
    [is-word form]
    [let [index [get-local-index ctx form]
          local-type [at ctx [inc [bit-shift-left index 1]]]]
      [push code local.get]
      [push-all code [u32-word-to-leb-128 index]]
      [list local-type]]

    [= form []]
    []

    [let [first-form [first form]
          args [rest form]]
      [assert [is-word first-form] expected a word first]
      [ifs
        [eq-word first-form [quote tuple]]
        [let
          [res-types [mutable-list]]
          [loop [i [quote 0]]
            [when [lt i [size args]]
              [push-all res-types [compile-form-mutable ctx code [at args i]]]
              [cont [inc i]]]]
          [freeze res-types]]

        [eq-word first-form [quote quote]]
        [let
          [- [assert [eq [size args] 1] only support decimal integers]
           dw [dec-word-to-i32 [at args 0]]]
          [push code [quote 0x41]]
          [push-all code [s32-word-to-leb-128 dw]]
          [list i32]]

        [eq-word first-form [quote if]]
        [let
          [- [assert [eq [size args] 3] if needs a condition and two branches]
           ct [compile-form-mutable ctx code [first args]]
           - [push code if]
           type-index [size code]
           dummy-type empty-type
           - [push code dummy-type]
           - [assert [and [eq [size ct] 1] [eq [at ct 0] i32]] condition not i32]
           tt [compile-form-mutable ctx code [second args]]
           - [push code else]
           ft [compile-form-mutable ctx code [third args]]
           - [assert [= tt ft] if branch types differ]
           enc-branch-type [type-list-to-code ft]]
          [push code end]
          [when-not [eq dummy-type enc-branch-type]
            [set-array code type-index enc-branch-type]]
          tt]

        [let [instruction [get-instruction first-form]]
          [assert instruction instruction not found]
          [assert [eq [size [lookup-assoc-list instruction [quote parameters]]] [size args]]
            instruction arity mismatch]
          [loop [i 0]
            [when [lt i [size args]]
              [compile-form-mutable ctx code [at args i]]
              [cont [inc i]]]]
          [push code [lookup-assoc-list instruction [quote opcode]]]
          [lookup-assoc-list instruction [quote results]]]]]]]

[func compile-top-level-form [ctx form]
  [if [eq-word [quote func] [first form]]
    [let [name [second form]
          params [third form]
          func-ctx [params-to-ctx params]
          code [mutable-list]
          -
          [loop [i 3]
            [when [lt i [dec [size form]]]
              [compile-form-mutable ctx code [at form i]]]]
          type-index
          [push-type ctx
            [type-function [params-to-list params] [compile-form-mutable func-ctx code [at form -1]]]]
          functions [lookup-assoc-list ctx [quote functions]]
          func-index [size functions]]
      [push functions type-index]
      [push [lookup-assoc-list ctx [quote exports]]
        [export name kind-function func-index]]
      [push code end]
      [push [lookup-assoc-list ctx [quote codes]] [code [] code]]
      []
      ]

    [do
      [log [list form ]]
      [assert 0 not a top-level form]]]]

[func compile-top-level-forms [forms]
  [let [ctx [make-mty-ctx]]
    [loop [i 0]
      [when [lt i [size forms]]
        [compile-top-level-form ctx [at forms i]]
        [cont [inc i]]]]
    ctx]]

[func vector-section [section-id content]
  [concat [list section-id] [u32-word-to-leb-128 [size content]] content]]

[func vector-section-concat [section-id elements]
  [vector-section section-id [concat [u32-word-to-leb-128 [size elements]] [concat-lists elements]]]]

[func func-section [func-indexes]
  [vector-section 3 [concat [u32-word-to-leb-128 [size func-indexes]] func-indexes]]]

[func ctx-to-module [ctx]
  [concat
    [quote [0 97 115 109
            1 0 0 0]]
    [vector-section-concat [quote 1] [lookup-assoc-list ctx [quote types]]]
    [func-section [lookup-assoc-list ctx [quote functions]]]
    [vector-section-concat [quote 7] [lookup-assoc-list ctx [quote exports]]]
    [vector-section-concat [quote 10] [lookup-assoc-list ctx [quote codes]]]]]

[let
  [ctx [compile-top-level-forms [quote
  [
    [func fst [x y] x]
    [func snd [x y] y]
    [func add [x y] [i32.add x y]]
    [func sub [x y] [i32.sub x y]]
    [func inc [x] [i32.add x [quote 1]]]
    [func five [] [quote 5]]
    [func ifte [c] [if c [quote 1337] [quote 21]]]
    [func ignore [x] []]
    [func identity [x] x]
    [func id-pair [x] [tuple x x]]
    [func pair [x y] [tuple x y]]
  ]
  ]]
  mod [ctx-to-module ctx]
  wm [wasm-module mod]
  wi [wasm-instance wm]
  ]
  [wasm-import-func wi fst my-fst]
  [wasm-import-func wi snd my-snd]
  [wasm-import-func wi add my-add]
  [wasm-import-func wi sub my-sub]
  [wasm-import-func wi inc my-inc]
  [wasm-import-func wi ifte my-ifte]
  [wasm-import-func wi ignore my-ignore]
  [wasm-import-func wi identity my-identity]
  [wasm-import-func wi id-pair my-id-pair]
  [wasm-import-func wi pair my-pair]
  ]

[test 3 [my-fst 3 2]]
[test 2 [my-snd 1 2]]
[test 3 [my-add 1 2]]
[test -1 [my-sub 1 2]]
[test 2 [my-inc 1]]
[test [quote 1337] [my-ifte 1]]
[test [quote 21] [my-ifte 0]]
[test [] [my-ignore 0]]
[test 0 [my-identity 0]]
[test 2 [my-identity 2]]
[test [list 2 2] [my-id-pair 2]]
[test [list 2 3] [my-pair 2 3]]
[test [list 2 3] [my-pair 2 3]]
