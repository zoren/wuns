[macro comment [.. -] []]

[func list [.. l] l]

[macro global-id [name]
  [list [quote global] name [list [quote quote] name]]]

[global-id 0]
[global-id 1]
[global-id 2]
[global-id 3]

[func inc [x] [add x 1]]

[func dec [x] [sub x 1]]

[func not [c] [eqz c]]

[func is-zero [x] [eqz x]]

[func is-odd [x] [bit-and x 1]]

[func is-even [x] [not [is-odd x]]]

[func is-negative [x] [lt x 0]]

[func first [l] [at l 0]]
[func second [l] [at l 1]]
[func third [l] [at l 2]]

[func rest [l] [slice l 1 [size l]]]

[macro do [.. forms]
  [concat [quote [let []]] forms]]

[macro when [cond .. forms]
  [list
    [quote if] cond
    [concat [quote [do]] forms]
    []]]

[macro when-not [cond .. forms]
  [list
    [quote if] cond
    []
    [concat [quote [do]] forms]]]

[macro assert [cond .. lmsg]
  [list [quote when-not] cond
    [list [quote log] [list [quote quote] [concat [list [quote assert-fail]] lmsg]]]
    [quote [abort]]]]

[macro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [not [is-zero s]] ifs requires an odd number of arguments]
    [if [eq s 1]
        [first clauses]
        [list [quote if] [first clauses]
          [second clauses]
          [concat [quote [ifs]] [slice clauses 2 [size clauses]]]]]]]

[macro and [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      1

      [eq s 1]
      [first clauses]

      [let [gs [gensym]]
        [list [quote let] [list gs [first clauses]]
          [list [quote if] gs
            [concat [quote [and]] [rest clauses]]
            gs]]]]]]

[macro or [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      0

      [eq s 1]
      [first clauses]

      [let [gs [gensym]]
        [list [quote let] [list gs [first clauses]]
          [list [quote if] gs
            gs
            [concat [quote [or]] [rest clauses]]]]]]]]

[func u32-word-to-leb-128 [w]
  [assert [not [is-negative w]] expected 32 bit ints]
  [let [res [mutable-list]]
    [loop [n w]
    [let
      [byte [bit-and n [quote 127]]
       nn [bit-shift-right-signed n [quote 7]]]
      [if [is-zero nn]
        [do
          [push res byte]
          [freeze res]]
        [do
          [push res [bit-or byte [quote 128]]]
          [cont nn]]]]]]]

[func s32-word-to-leb-128 [value]
  [let [res [mutable-list]]
    [loop [value1 value]
      [let
        [byte [bit-and value1 [quote 127]]
         value2 [bit-shift-right-signed value1 [quote 7]]
         sign-bit [bit-and byte [quote 64]]]
        [if [or [and [is-zero value2]       [not sign-bit]]
                [and [eq value2 [quote -1]] sign-bit]]
          [push res byte]
          [do
            [push res [bit-or byte [quote 128]]]
            [cont value2]]]]]
    [freeze res]]]

[func reverse [l]
  [let [res [mutable-list]]
    [loop [i [dec [size l]]]
      [when-not [is-negative i]
        [push res [at l i]]
        [cont [dec i]]]]
    [freeze res]]]

[global ascii-x [quote 120]]

[func dec-word-to-hex-word [dw]
  [assert [not [is-negative dw]] expected non-negative decimal word]
  [if [is-zero dw]
    [quote 0x0]
    [let [hex-digits [quote 0123456789abcdef]
          res [mutable-list]]
      [loop [n dw]
        [if [is-zero n]
          [do
            [push res ascii-x]
            [push res [quote 48]]
            [word-from-codepoints [reverse res]]]
          [let [remainder [bit-and n [quote 15]]
                quotient [bit-shift-right-signed n [quote 4]]]
            [push res [at hex-digits remainder]]
            [cont quotient]]]]]]]

[func dec-words-to-hex [decs]
  [let [res [mutable-list] s [size decs]]
    [loop [i 0]
      [if [lt i s]
        [do
          [push res [dec-word-to-hex-word [at decs i]]]
          [cont [inc i]]]
        [freeze res]]]]]

[func eq-word [a b]
  [and [eq [size a] [size b]]
    [loop [i [size a]]
      [if [lt i [size a]]
        [if [eq [at a i] [at b i]]
          [cont [inc i]]
          0]
        1]]]]

[func = [a b]
  [if
    [and [is-word a] [is-word b]]
    [eq-word a b]

    [and [is-list a] [is-list b]
      [let [s [size a]]
        [and [eq s [size b]]
          [loop [i [quote 0]]
            [or [ge i s]
              [and [= [at a i] [at b i]] [cont [inc i]]]]]]]]]]

[func test [expected actual]
  [when-not [= expected actual]
    [log [list [quote expected] expected [quote [but got]] actual]]]]

[comment wikipedia says 0xe5 0x8e 0x26]

[test [quote [0xe5 0x8e 0x26]] [dec-words-to-hex [u32-word-to-leb-128 [quote 624485]]]]

[comment wikipedia says 0xc0 0xbb 0x78]

[test [quote [0xc0 0xbb 0x78]] [dec-words-to-hex [s32-word-to-leb-128 [quote -123456]]]]
