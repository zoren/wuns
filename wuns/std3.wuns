[def -2 [i32.const -2]]
[def -1 [i32.const -1]]
[def 0 [i32.const 0]]
[def 1 [i32.const 1]]
[def 2 [i32.const 2]]
[def 3 [i32.const 3]]
[def 4 [i32.const 4]]

[def list [func list [.. entries] entries]]

[def concat [func concat [.. lists]
  [let
    [n-of-lists [size lists]
     total-size
      [loop [total 0 i 0]
        [if [lt-s i n-of-lists]
          [continue total [add total [size [at lists i]]] i [add 1 i]]
          total]]
     result [mutable-list-of-size total-size]]
    [loop [i 0 j 0 res-index 0]
      [if [lt-s i n-of-lists]
        [let [cur-list [at lists i]
              s [size cur-list]]
          [loop [i 0 res-index res-index]
            [if [lt-s i s]
              [let []
                [set-array result res-index [at cur-list i]]
                [continue res-index [add 1 res-index] i [add 1 i]]]]]
          [continue i [add 1 i] res-index [add s res-index]]]]]
    [freeze-mutable-list result]
    result]]]

[def make-func-macro-list
  [func make-func-macro-list [name params bodies]
    [list [quote def] name [concat [list [quote func] name params] bodies]]]]

[def quote-word [quote quote]]

[def mk-quote [func mk-quote [form] [list quote-word form]]]

[def defmacro
  [func defmacro [name params .. bodies]
    [list [quote let] [list]
      [make-func-macro-list name params bodies]
      [list
        [quote set-meta]
        [list [quote var] [mk-quote name]]
        [quote [let [m [transient-kv-map]] [set m [quote is-macro] 1] m]]]]]]

[set-meta [var [quote defmacro]] [let [m [transient-kv-map]] [set m [quote is-macro] 1] m]]

[defmacro defn [name params .. bodies]
  [make-func-macro-list name params bodies]]

[defmacro comment [.. -]
  [quote let []]]

[defn inc [x] [add x 1]]

[defn dec [x] [sub x 1]]

[defn not [c] [if c 0 1]]

[defn is-zero [x] [eq x 0]]

[defn is-odd [x] [i32.and x 1]]

[defn is-even [x] [not [is-odd x]]]

[defn is-negative [x] [lt-s x 0]]

[defn first [l] [at l 0]]
[defn second [l] [at l 1]]
[defn third [l] [at l 2]]
[defn fourth [l] [at l 3]]
[defn last [l] [at l -1]]

[defmacro do [.. forms]
  [concat [quote let []] forms]]

[defmacro when [cond .. forms]
  [list
    [quote if] cond
    [concat [quote let []] forms]]]

[defmacro when-not [cond .. forms]
  [list
    [quote if] cond
    [quote [let []]]
    [concat [quote let []] forms]]]

[defmacro if-not [cond false-form true-form]
  [list
    [quote if] cond
    true-form
    false-form]]

[defn quote-list [lmsg]
  [let [s [size lmsg]
        msg [mutable-list-of-size [inc s]]]
    [set-array msg 0 [quote list]]
    [loop [i 0]
      [when [lt-s i s]
        [set-array msg [inc i] [let [e [at lmsg i]] [if [is-word e] [mk-quote e] e]]]
        [continue i [inc i]]]]
    [freeze-mutable-list msg]
    msg]]

[defmacro assert [cond .. lmsg]
  [list [quote if] cond
    [quote let []]
    [list [quote let] [quote []]
      [list [quote log] [quote-list lmsg]]
      [quote [unreachable]]]]]

[defmacro logq [.. lmsg]
  [list [quote log] [quote-list lmsg]]]

[defmacro logq-abort [.. lmsg]
  [list [quote let] [list]
    [list [quote log] [quote-list lmsg]]
    [quote [unreachable]]]]

[defn identity [x] x]

[defmacro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [is-odd s] ifs requires an odd number of arguments]
    [loop [i [dec s] res [at clauses -1]]
      [if [eq i 0]
        res
        [continue
          i [sub i 2]
          res [list [quote if] [at clauses [sub i 2]] [at clauses [dec i]] res]]]]]]

[defmacro and [.. clauses]
  [let [s [size clauses]]
    [if [is-zero s]
      [quote i32.const 1]
      [loop [i [dec s]
             res [at clauses -1]]
        [if [eq i 0]
          res
          [continue
            i [dec i]
            res [list [quote if] [at clauses [dec i]] res [quote i32.const 0]]]]]]]]

[def word-counter [atom 0]]

[defn int-to-word [n]
  [if [is-zero n]
    [quote 0]
    [let [l [growable-list]]
      [if [is-negative n]
        [do
          [loop [i n]
            [when i
              [push l [char-code-to-word [i32.add [i32.const 48] [i32.sub 0 [i32.rem-s i [i32.const 10]]]]]]
              [continue i [i32.div-s i [i32.const 10]]]]]
          [push l [quote -]]]
        [loop [i n]
          [when i
            [push l [char-code-to-word [i32.add [i32.const 48] [i32.rem-s i [i32.const 10]]]]]
            [continue i [i32.div-s i [i32.const 10]]]]]]
      [loop [res [first l] i 1]
        [if [i32.lt-s i [size l]]
          [continue res [concat-words [at l i] res] i [inc i]]
          res]]]]]

[defmacro word-to-char-code [w] [list [quote i32.const] [int-to-word [char-code-at w 0]]]]

[defn is-between-inclusive [lower c upper]
  [and [i32.le-s lower c] [i32.le-s c upper]]]

[defn dec-word-to-int [w]
  [loop [i 0 res 0]
    [if [lt-s i [word-byte-size w]]
      [let [cc [char-code-at w i]]
        [assert [is-between-inclusive [word-to-char-code 0] cc [word-to-char-code 9]] dec-word-to-int expects a decimal word]
        [continue res [i32.add [i32.mul res [i32.const 10]] [i32.sub cc [word-to-char-code 0]]] i [inc i]]]
      res]]]

[defn genword []
  [let [c [atom-get word-counter]]
    [atom-set word-counter [inc c]]
    [concat-words [quote genword] [int-to-word c]]]]

[defmacro or [.. clauses]
  [let [s [size clauses]]
    [if [is-zero s]
      [quote i32.const 0]
      [loop [i [dec s]
             res [at clauses -1]]
        [if [eq i 0]
          res
          [continue
            i [dec i]
            res
            [let [w [genword]]
              [list [quote let] [list w [at clauses [dec i]]]
                [list [quote if] w w res]]]]]]]]]

[defmacro if-let [binding true-form false-form]
  [assert [is-list binding] if-let requires a list as the first argument]
  [assert [eq 2 [size binding]] if-let requires a list of size 2 as the first argument]
  [let [v [first binding]
        cond [second binding]
        tmp-word [genword]]
    [assert [is-word v] if-let requires a word as the first element of the first argument]
    [list [quote let] [list tmp-word cond]
      [list [quote if] tmp-word [list [quote let] [list v tmp-word] true-form] false-form]]]]

[defn eq-word [a b]
  [and [is-word a] [is-word b]
    [let [sa [word-byte-size a] sb [word-byte-size b]]
      [and
        [eq sa sb]
        [loop [i 0]
          [if [lt-s i sa]
            [if [eq [char-code-at a i] [char-code-at b i]]
              [continue i [inc i]]
              0]
            1]]]]]]

[defn eq-form [a b]
  [or
    [eq-word a b]
    [and [is-list a] [is-list b]
      [let [sa [size a]]
        [and [eq sa [size b]]
          [loop [i 0]
            [if [lt-s i sa]
              [if [recur [at a i] [at b i]]
                [continue i [inc i]]
                0]
              1]]]]]]]

[defn for-func [iw start increment end forms]
  [assert [lt-s 0 increment] for-func increment must be positive]
  [let [ew [genword]]
    [list
      [quote let] [list ew end]
      [list
        [quote loop] [list iw start]
        [list [quote if]
          [list [quote i32.lt-s] iw ew]
          [concat [quote let []] forms
            [list [list [quote continue] iw [list [quote i32.add] iw [list [quote i32.const] [int-to-word increment]]]]]]]]]]]

[defmacro for [iw start end .. forms]
  [for-func iw start [i32.const 1] end forms]]

[defmacro for-pair [iw start end .. forms]
  [for-func iw start [i32.const 2] end forms]]

[defmacro for-each [element-var collection .. forms]
  [assert [is-word element-var] for-each requires a word as the first argument]
  [let [iteration-var [genword]
        col-var [genword]
        col-size-var [genword]]
    [list
      [quote let] [list col-var collection col-size-var [list [quote size] col-var]]
      [list
        [quote loop] [list iteration-var [quote i32.const 0]]
        [list [quote if]
          [list [quote i32.lt-s] iteration-var col-size-var]
          [concat [quote [let]]
            [list [list element-var [list [quote at] col-var iteration-var]]]
            forms
            [list [list [quote continue] iteration-var [list [quote i32.add] iteration-var [quote i32.const 1]]]]]]]]]]

[defmacro list-map [element-var collection form]
  [assert [is-word element-var] list-map requires a word as the first argument]
  [let [iteration-var [genword]
        col-var [genword]
        col-size-var [genword]
        new-col-var [genword]]
    [list
      [quote let] [list col-var collection
                        col-size-var [list [quote size] col-var]
                        new-col-var [list [quote mutable-list-of-size] col-size-var]]
      [list
        [quote loop] [list iteration-var [quote i32.const 0]]
        [list [quote if]
          [list [quote i32.lt-s] iteration-var col-size-var]
          [concat [quote [let]]
            [list [list element-var [list [quote at] col-var iteration-var]]]
            [list [list [quote set-array] new-col-var iteration-var form]]
            [list [list [quote continue] iteration-var [list [quote i32.add] iteration-var [quote i32.const 1]]]]]]]
      [list [quote freeze-mutable-list] new-col-var]
      new-col-var]]]

[defn half [x] [i32.div-s x 2]]

[defmacro kv-map [.. entries]
  [let [s [size entries]
        n-of-pairs [half s]
        ml [mutable-list-of-size [add 4 n-of-pairs]]
        tmp-word [genword]]
    [assert [is-even s] kv-map requires an even number of arguments]
    [set-array ml 0 [quote let]]
    [set-array ml 1 [list tmp-word [quote [transient-kv-map]]]]
    [for-pair i 0 s
      [set-array ml [add 2 [half i]]
        [let [k [at entries i]]
          [list [quote set] tmp-word [if [is-word k] [mk-quote k] k] [at entries [inc i]]]]]]
    [set-array ml [add 2 n-of-pairs] [list [quote freeze-kv-map] tmp-word]]
    [set-array ml [add 3 n-of-pairs] tmp-word]
    ml]]

[defmacro getq [m w]
  [list [quote get] m [mk-quote w]]]

[defmacro hasq [m w]
  [list [quote has] m [mk-quote w]]]

[defmacro setq [m w v]
  [list [quote set] m [mk-quote w] v]]

[defn is-empty [form]
  [eq 0 [size form]]]

[defn push-all [mut-list list]
  [for-each e list [push mut-list e]]]

[defn assoc [m k v]
  [let [new [transient-kv-map]]
    [for-each k [keys m]
      [set new k [get m k]]]
    [set new k v]
    [freeze-kv-map new]
    new]]

[def empty-kv-map [kv-map]]

[defn meta-assoc [val key meta-data]
  [with-meta val [assoc [if-let [m [meta val]] m empty-kv-map] key meta-data]]]

[defn slice [l start end]
  [assert [is-list l] slice expects list]
  [assert [not [is-negative start]] negative start index]
  [assert [not [is-negative end]] negative end index]
  [let [s [sub end start]]
    [if [lt-s s 1]
      [quote []]
      [let [ml [mutable-list-of-size s]]
        [for i start end
          [set-array ml [sub i start] [at l i]]]
        [freeze-mutable-list ml]
        ml]]]]
