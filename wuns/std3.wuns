[def defmacro
  [func defmacro [name params .. forms]
    [list [quote let] [list]
      [list [quote def] name [concat [list [quote func] name params] forms]]
      [list [quote set-meta] [list [quote var] [list [quote quote] name]]
        [quote transient-kv-map [quote is-macro] [quote 1]]]]]]

[set-meta [var [quote defmacro]] [transient-kv-map [quote is-macro] [quote 1]]]

[defmacro defn [name params .. forms]
  [list [quote def] name [concat [list [quote func] name params] forms]]]

[defmacro comment [.. -] [list]]

[def -2 [quote -2]]
[def -1 [quote -1]]
[def 0 [quote 0]]
[def 1 [quote 1]]
[def 2 [quote 2]]
[def 3 [quote 3]]
[def 4 [quote 4]]

[defn inc [x] [add x 1]]

[defn dec [x] [sub x 1]]

[defn not [c] [eq c 0]]

[defn is-zero [x] [eq x 0]]

[defn is-odd [x] [bitwise-and x 1]]

[defn is-odd2 [x] [is-odd x]]

[defn is-even [x] [not [is-odd x]]]

[defn is-negative [x] [lt x 0]]

[defn first [l] [at l 0]]
[defn second [l] [at l 1]]
[defn third [l] [at l 2]]
[defn fourth [l] [at l 3]]
[defn last [l] [at l -1]]

[defn rest [l]
  [slice l 1 [size l]]]

[defn push-all [mut-list l]
  [let [s-l [size l]]
    [loop [i 0]
      [if [lt i s-l]
        [let []
          [push mut-list [at l i]]
          [continue i [inc i]]]
        [list]]]]]

[defmacro do [.. forms]
  [concat [quote [let []]] forms]]

[defmacro when [cond .. forms]
  [list
    [quote if] cond
    [concat [quote [do]] forms]
    [list]]]

[defmacro when-not [cond .. forms]
  [list
    [quote if] cond
    [list]
    [concat [quote [do]] forms]]]

[defn quote-list [lmsg]
  [let [msg [mutable-list [quote list]]]
    [loop [i 0]
      [when [lt i [size lmsg]]
        [let [e [at lmsg i]]
          [push msg [if [is-word e] [list [quote quote] e] e]]
          [continue i [inc i]]]]]
    [freeze msg]]]

[defmacro log-abort [.. lmsg]
  [list [quote let] [list]
    [list [quote log] [quote-list lmsg]]
    [quote [abort]]]]

[defmacro assert [cond .. lmsg]
  [list [quote when-not] cond
    [list [quote log] [quote-list lmsg]]
    [quote [abort]]]]

[defn identity [x] x]

[defmacro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [not [is-zero s]] ifs requires an odd number of arguments]
    [if [eq s 1]
      [first clauses]
      [list [quote if] [first clauses]
        [second clauses]
        [concat [quote [ifs]] [slice clauses 2 [size clauses]]]]]]]

[defmacro and [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      1

      [eq s 1]
      [first clauses]

      [list [quote if] [first clauses]
        [concat [quote [and]] [rest clauses]]
        0]]]]

[defmacro or [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      0

      [eq s 1]
      [first clauses]

      [list [quote if] [first clauses]
        1
        [concat [quote [or]] [rest clauses]]]]]]

[def word-counter [atom 0]]

[defn genword []
  [let [c [atom-get word-counter]]
    [if [is-i32 c]
      [atom-set word-counter [inc c]]
      [do [log [quote not int]]
        [abort]]]
    [concat-words [list [quote genword] c]]]]

[defn for-func [iw start increment end forms]
  [assert [gt increment 0] for-func increment must be positive]
  [let [ew [genword]]
    [list
      [quote let] [list ew end]
      [list
        [quote loop] [list iw start]
        [list [quote if]
          [list [quote lt] iw ew]
          [concat [quote let []] forms [list [list [quote continue] iw [list [quote add] iw increment]]]]
          [list]]]]]]

[defmacro for [iw start end .. forms]
  [for-func iw start 1 end forms]]

[defmacro for-inc [iw start increment end .. forms]
  [for-func iw start increment end forms]]

[defn is-empty [l] [eq [size l] 0]]

[defmacro fn [params .. forms]
  [concat [list [quote func] [genword] params] forms]]

[defn map [mf coll]
  [let [result [mutable-list]]
    [for i 0 [size coll]
      [push result [mf [at coll i]]]]
    result]]

[defmacro for-each [element-var collection .. forms]
  [assert [is-word element-var] for-each requires a word as the first argument]
  [let [iteration-var [genword]
        col-var [genword]
        col-size-var [genword]]
    [list
      [quote let] [list col-var collection col-size-var [list [quote size] col-var]]
      [list
        [quote loop] [list iteration-var [quote 0]]
        [list [quote if]
          [list [quote lt] iteration-var col-size-var]
          [concat [quote [let]]
            [list [list element-var [list [quote at] col-var iteration-var]]]
            forms
            [list [list [quote continue] iteration-var [list [quote add] iteration-var [quote 1]]]]]
          [list]]]]]]

[defmacro kv-map [.. entries]
  [let [ml [mutable-list]]
    [push ml [quote transient-kv-map]]
    [for-inc i 0 2 [size entries]
      [push ml
        [let [k [at entries i]]
                [if [is-word k]
                  [list [quote quote] k]
                  k]]]
      [push ml [at entries [inc i]]]]
    [concat [quote [persistent-kv-map]] [list ml]]]]

[defmacro getq [m w]
  [list [quote get] m [list [quote quote] w]]]

[defmacro hasq [m w]
  [list [quote has] m [list [quote quote] w]]]

[defmacro setq [m w v]
  [list [quote set] m [list [quote quote] w] v]]
