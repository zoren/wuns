[def -2 [i32.const -2]]
[def -1 [i32.const -1]]
[def 0 [i32.const 0]]
[def 1 [i32.const 1]]
[def 2 [i32.const 2]]
[def 3 [i32.const 3]]
[def 4 [i32.const 4]]

[def defmacro
  [with-meta
    [func defmacro [name params .. forms]
      [list [quote let] [list]
        [list [quote def] name
          [list [quote with-meta]
            [concat [list [quote func] name params] forms]
            [transient-kv-map [quote is-macro] 1]]]
        [list]]]
    [transient-kv-map [quote is-macro] 1]]]

[defmacro defn [name params .. forms]
  [list [quote def] name [concat [list [quote func] name params] forms]]]

[def quote-word [quote quote]]

[defn mk-quote [form] [list quote-word form]]

[defmacro comment [.. -] [list]]

[defn inc [x] [add x 1]]

[defn dec [x] [sub x 1]]

[defn not [c] [if c 0 1]]

[defn is-zero [x] [eq x 0]]

[defn is-odd [x] [bitwise-and x 1]]

[defn is-even [x] [not [is-odd x]]]

[defn is-negative [x] [lt x 0]]

[defn first [l] [at l 0]]
[defn second [l] [at l 1]]
[defn third [l] [at l 2]]
[defn fourth [l] [at l 3]]
[defn last [l] [at l -1]]

[defmacro do [.. forms]
  [concat [quote let []] forms]]

[defmacro when [cond .. forms]
  [list
    [quote if] cond
    [concat [quote let []] forms]
    [list]]]

[defmacro when-not [cond .. forms]
  [list
    [quote if] cond
    [list]
    [concat [quote let []] forms]]]

[defmacro if-not [cond false-form true-form]
  [list
    [quote if] cond
    false-form
    true-form]]

[defn quote-list [lmsg]
  [let [msg [mutable-list [quote list]]]
    [loop [i 0 s [size lmsg]]
      [if [lt i s]
        [let [e [at lmsg i]]
          [push msg [if [is-word e] [mk-quote e] e]]]
        [continue i [inc i]]]]
    [persistent-array msg]]]

[defmacro assert [cond .. lmsg]
  [list [quote if] cond
    [list]
    [list [quote let] [list]
      [list [quote log] [quote-list lmsg]]
      [quote [unreachable]]]]]

[defn identity [x] x]

[defmacro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [is-odd s] ifs requires an odd number of arguments]
    [loop [i [dec s] res [at clauses -1]]
      [if [eq i 0]
        res
        [continue
          i [sub i 2]
          res [list [quote if] [at clauses [sub i 2]] [at clauses [dec i]] res]]]]]]

[defmacro and [.. clauses]
  [let [s [size clauses]]
    [if [is-zero s]
      1
      [loop [i [dec s]
             res [at clauses -1]]
        [if [eq i 0]
          res
          [continue
            i [dec i]
            res [list [quote if] [at clauses [dec i]] res 0]]]]]]]

[def word-counter [atom 0]]

[defn genword []
  [let [c [atom-get word-counter]]
    [atom-set word-counter [inc c]]
    [concat-words [list [quote genword] [int-to-word c]]]]]

[defmacro or [.. clauses]
  [let [s [size clauses]]
    [if [is-zero s]
      0
      [loop [i [dec s]
             res [at clauses -1]]
        [if [eq i 0]
          res
          [continue
            i [dec i]
            res
            [let [w [genword]]
              [list [quote let] [list w [at clauses [dec i]]]
                [list [quote if] w w res]]]]]]]]]

[defn eq-form [a b]
  [or
    [and [is-number a] [is-number b] [eq a b]]
    [eq-word a b]
    [and [is-list a] [is-list b]
      [let [sa [size a]]
        [and [eq sa [size b]]
          [loop [i 0]
            [if [lt i sa]
              [if [recur [at a i] [at b i]]
                [continue i [inc i]]
                0]
              1]]]]]]]

[defn for-func [iw start increment end forms]
  [assert [gt increment 0] for-func increment must be positive]
  [let [ew [genword]]
    [list
      [quote let] [list ew end]
      [list
        [quote loop] [list iw start]
        [list [quote if]
          [list [quote i32.lt] iw ew]
          [concat [quote let []] forms
            [list [list [quote continue] iw [list [quote i32.add] iw increment]]]]
          [list]]]]]]

[defmacro for [iw start end .. forms]
  [for-func iw start [i32.const 1] end forms]]

[defmacro for-pair [iw start end .. forms]
  [for-func iw start [i32.const 2] end forms]]

[defmacro for-each [element-var collection .. forms]
  [assert [is-word element-var] for-each requires a word as the first argument]
  [let [iteration-var [genword]
        col-var [genword]
        col-size-var [genword]]
    [list
      [quote let] [list col-var collection col-size-var [list [quote size] col-var]]
      [list
        [quote loop] [list iteration-var 0]
        [list [quote if]
          [list [quote i32.lt] iteration-var col-size-var]
          [concat [quote [let]]
            [list [list element-var [list [quote at] col-var iteration-var]]]
            forms
            [list [list [quote continue] iteration-var [list [quote i32.add] iteration-var 1]]]]
          [list]]]]]]

[defmacro kv-map [.. entries]
  [let [ml [mutable-list]]
    [push ml [quote transient-kv-map]]
    [for-pair i 0 [size entries]
      [push ml
        [let [k [at entries i]]
          [if [is-word k] [mk-quote k] k]]]
      [push ml [at entries [inc i]]]]
    [concat [quote [persistent-kv-map]] [list ml]]]]

[defmacro getq [m w]
  [list [quote get] m [mk-quote w]]]

[defmacro hasq [m w]
  [list [quote has] m [mk-quote w]]]

[defmacro setq [m w v]
  [list [quote set] m [mk-quote w] v]]

[defn is-empty [form]
  [eq 0 [size form]]]

[defn push-all [mut-list list]
  [let [s-l [size list]]
    [loop [i [i32.const 0]]
      [if [lt i s-l]
        [let []
          [push mut-list [at list i]]
          [continue i [inc i]]]
        []]]]]
