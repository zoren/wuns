[def list [func list [.. entries] entries]]
[def-with-meta form-word
  [quote [type [func [word] form]]]
  [extern host form-word]]
[def-with-meta form-list-list
  [quote [type [func [[list form]] form]]]
  [extern host form-list]]
[def form-list [func form-list [.. elements] [form-list-list elements]]]

[def-with-meta defmacro
  [quote [function-kind macro]]
  [func defmacro [name parameters .. bodies]
    [form-list
      [quote def-with-meta]
      name
      [quote [quote [function-kind macro]]]
      [form-list-list
        [[extern host concat] [list [quote func] name parameters] bodies]]]]]

[defmacro def-extern [name type]
  [form-list [quote def-with-meta] name
    [form-list [quote quote] [form-list [quote type] type]]
    [form-list [quote extern] [quote host] name]]]

[def-extern concat [type-scheme [a] [func [.. [list a]] [list a]]]]

[defmacro defn [name parameters .. bodies]
  [form-list [quote def] name
    [form-list-list [concat [list [quote func] name parameters] bodies]]]]

[def-extern concat-lists [type-scheme [a] [func [[list [list a]]] [list a]]]]

[defn form-concat [.. list-forms]
  [form-list-list [concat-lists list-forms]]]

[defn mk-quote [form] [form-list [quote quote] form]]

[defmacro defexpr [name parameters .. bodies]
  [form-list [quote def-with-meta] name
    [quote [quote [function-kind fexpr]]]
    [form-concat [list [quote func] name parameters] bodies]]]

[def-extern size [type-scheme [a] [func [[list a]] i32]]]

[def-extern at [type-scheme [a] [func [[list a] i32] a]]]

[defmacro comment [.. -]
  [quote [let []]]]

[def-extern concat-words [func [word word] word]]

[defn def-instruction-fn [def-name inst-name]
  [form-list
    [quote def-with-meta]
    def-name
    [quote [quote [type [func [i32 i32] i32]]]]
    [form-list [quote extern] [quote instructions] inst-name]]]

[defmacro def-instruction [def-name inst-name] [def-instruction-fn def-name inst-name]]

[def-extern try-get-form-word [func [form] [option word]]]
[def unreachable [extern instructions unreachable]]

[defn form-to-word [form]
  [let [w [try-get-form-word form]]
    [if w w [unreachable]]]]

[defmacro def-bin-i32-inst [name] [def-instruction-fn name [form-word [concat-words [word i32.] [form-to-word name]]]]]

[def-bin-i32-inst add]
[def-bin-i32-inst lt-s]

[def -2 [i32 -2]]
[def -1 [i32 -1]]
[def 0  [i32 0]]
[def 1  [i32 1]]
[def 2  [i32 2]]
[def 3  [i32 3]]
[def 4  [i32 4]]

[defn inc [x] [add x 1]]

[def-bin-i32-inst sub]
[def-bin-i32-inst mul]

[defn dec [x] [sub x 1]]

[defn not [c] [if c 0 1]]

[def-bin-i32-inst eq]

[defn is-empty [form]
  [eq 0 [size form]]]

[defn is-zero [x] [eq x 0]]

[def-instruction i32.bitwise-and i32.and]

[defn is-odd [x] [i32.bitwise-and x 1]]

[defn is-even [x] [not [is-odd x]]]

[defn is-negative [x] [lt-s x 0]]

[defn min [a b] [if [lt-s a b] a b]]
[defn max [a b] [if [lt-s a b] b a]]

[defn first [l] [at l 0]]
[defn second [l] [at l 1]]
[defn third [l] [at l 2]]
[defn fourth [l] [at l 3]]
[defn last [l] [at l -1]]

[defmacro do [.. forms]
  [form-concat [list [quote let] [quote []]] forms]]

[defmacro when [cond .. forms]
  [form-list
    [quote if] cond
    [form-concat [list [quote let] [quote []]] forms]]]

[defmacro when-not [cond .. forms]
  [form-list
    [quote if] cond
    [quote [let []]]
    [form-concat [list [quote let] [quote []]] forms]]]

[defmacro if-not [cond false-form true-form]
  [form-list
    [quote if] cond
    true-form
    false-form]]

[def-extern mutable-list-of-size [type-scheme [a] [func [i32] [mutable-list a]]]]
[def-extern set-array [type-scheme [a] [func [[mutable-list a] i32 a] []]]]
[def-extern freeze-mutable-list [type-scheme [a] [func [[mutable-list a]] [tuple]]]]

[defn is-word [form] [if [try-get-form-word form] 1 0]]

[defn quote-list [lmsg]
  [let [s [size lmsg]
        msg [mutable-list-of-size [inc s]]]
    [set-array msg 0 [quote list]]
    [loop [i 0]
      [when [lt-s i s]
        [set-array msg [inc i] [let [e [at lmsg i]] [if [is-word e] [mk-quote e] e]]]
        [continue i [inc i]]]]
    [form-list-list [freeze-mutable-list msg]]]]

[def-extern log [func [list] []]]

[defmacro assert [cond .. lmsg]
  [form-list [quote if] cond
    [quote []]
    [form-list [quote let] [quote []]
      [form-list [quote log] [quote-list lmsg]]
      [quote [unreachable]]]]]

[defmacro logq [.. lmsg]
  [form-list [quote log] [quote-list lmsg]]]

[defmacro logq-abort [.. lmsg]
  [form-list [quote let] [form-list]
    [form-list [quote log] [quote-list lmsg]]
    [quote [unreachable]]]]

[defn identity [x] x]

[defmacro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [is-odd s] ifs requires an odd number of arguments]
    [loop [i [dec s] res [at clauses -1]]
      [if [eq i 0]
        res
        [continue
          i [sub i 2]
          res [form-list [quote if] [at clauses [sub i 2]] [at clauses [dec i]] res]]]]]]

[comment and relies on there only being one falsy value [i32 0]
        it will not return any other falsy value as or returns the first truthy argument]
[defmacro and [.. clauses]
  [let [s [size clauses]]
    [if [is-zero s]
      [quote [i32 1]]
      [loop [i [dec s]
             res [at clauses -1]]
        [if [eq i 0]
          res
          [continue
            i [dec i]
            res [form-list [quote if] [at clauses [dec i]] res [quote [i32 0]]]]]]]]]

[def-extern atom [type-scheme [a] [func [a] [atom a]]]]

[def word-counter [atom 0]]

[def-extern char-code-to-word [func [i32] word]]

[def-instruction i32.rem-s i32.rem-s]
[def-instruction i32.div-s i32.div-s]

[def-extern growable-list [type-scheme [a] [func [] [growable-list a]]]]
[def-extern push [type-scheme [a] [func [[growable-list a] a] []]]]
[def-extern clone-growable-to-frozen-list [type-scheme [a] [func [[growable-list a]] [list a]]]]

[def-extern int-to-word [func [i32] word]]

[defn i32-to-form [i]
  [form-list [quote i32] [form-word [int-to-word i]]]]

[def-extern char-code-at [func [word i32] i32]]

[defmacro word-to-char-code [w]
  [i32-to-form [char-code-at [form-to-word w] 0]]]

[def-bin-i32-inst le-s]

[defn is-between-inclusive [lower c upper]
  [and [le-s lower c] [le-s c upper]]]

[def-extern word-byte-size [func [word] i32]]

[defn dec-word-to-int [w]
  [loop [i 0 res 0]
    [if [lt-s i [word-byte-size w]]
      [let [cc [char-code-at w i]]
        [assert [is-between-inclusive [word-to-char-code 0] cc [word-to-char-code 9]] dec-word-to-int expects a decimal word]
        [continue res [add [mul res [i32 10]] [sub cc [word-to-char-code 0]]] i [inc i]]]
      res]]]

[def-extern atom-get [type-scheme [a] [func [[atom a]] a]]]
[def-extern atom-set [type-scheme [a] [func [[atom a] a] [tuple]]]]

[defn inc-atom [atom]
  [let [prev-val [atom-get atom]]
    [atom-set atom [inc prev-val]]
    prev-val]]

[defn genword []
  [form-word [concat-words [word genword] [int-to-word [inc-atom word-counter]]]]]

[defmacro or [.. clauses]
  [let [s [size clauses]]
    [if [is-zero s]
      [quote [i32 0]]
      [loop [i [dec s]
             res [at clauses -1]]
        [if [eq i 0]
          res
          [continue
            i [dec i]
            res
            [let [w [genword]]
              [form-list [quote let] [form-list w [at clauses [dec i]]]
                [form-list [quote if] w w res]]]]]]]]]

[def-extern try-get-form-list [func [form] [option [list form]]]]

[defn form-to-list [form]
  [let [l [try-get-form-list form]]
    [if l l [unreachable]]]]

[defn is-list [form] [if [try-get-form-list form] 1 0]]

[defmacro if-let [binding-form true-form false-form]
  [assert [is-list binding-form] if-let requires a list as the first argument]
  [let [binding [form-to-list binding-form]
        - [assert [eq 2 [size binding]] if-let bindings should have exactly two elements]
        v [first binding]
        cond [second binding]
        tmp-word [genword]]
    [assert [is-word v] if-let requires a word as the first element of the first argument]
    [form-list [quote let] [form-list tmp-word cond]
      [form-list [quote if] tmp-word [form-list [quote let] [form-list v tmp-word] true-form] false-form]]]]

[defn eq-word [fa fb]
  [and [is-word fa] [is-word fb]
    [let [wa [form-to-word fa] wb [form-to-word fb]
          sa [word-byte-size wa] sb [word-byte-size wb]]
      [and
        [eq sa sb]
        [loop [i 0]
          [if [lt-s i sa]
            [if [eq [char-code-at wa i] [char-code-at wb i]]
              [continue i [inc i]]
              0]
            1]]]]]]

[defn eq-form [a b]
  [or
    [eq-word a b]
    [and [is-list a] [is-list b]
      [let [la [form-to-list a]
            lb [form-to-list b]
            sa [size la]]
        [and [eq sa [size lb]]
          [loop [i 0]
            [if [lt-s i sa]
              [if [recur [at la i] [at lb i]]
                [continue i [inc i]]
                0]
              1]]]]]]]

[defn for-func [iw start increment end forms]
  [assert [lt-s 0 increment] for-func increment must be positive]
  [let [ew [genword]]
    [form-list
      [quote let] [form-list ew end]
      [form-list
        [quote loop] [form-list iw start]
        [form-list [quote if]
          [form-list [quote lt-s] iw ew]
          [form-concat
            [list [quote let] [quote []]]
            forms
            [list [form-list [quote continue] iw [form-list [quote add] iw [i32-to-form increment]]]]]]]]]]

[defmacro for [iw start end .. forms]
  [for-func iw start [i32 1] end forms]]

[defmacro for-pair [iw start end .. forms]
  [for-func iw start [i32 2] end forms]]

[defmacro for-each [element-var collection .. forms]
  [assert [is-word element-var] for-each requires a word as the first argument]
  [let [iteration-var [genword]
        col-var [genword]
        col-size-var [genword]]
    [form-list
      [quote let] [form-list col-var collection col-size-var [form-list [quote size] col-var]]
      [form-list
        [quote loop] [form-list iteration-var [quote [i32 0]]]
        [form-list [quote if]
          [form-list [quote lt-s] iteration-var col-size-var]
          [form-concat
            [list [quote let]]
            [list [form-list element-var [form-list [quote at] col-var iteration-var]]]
            forms
            [list [form-list [quote continue] iteration-var [form-list [quote add] iteration-var [quote [i32 1]]]]]]]]]]]

[defmacro list-map [element-var collection form]
  [assert [is-word element-var] list-map requires a word as the first argument]
  [let [iteration-var [genword]
        col-var [genword]
        col-size-var [genword]
        new-col-var [genword]]
    [list
      [quote let] [form-list col-var collection
                        col-size-var [form-list [quote size] col-var]
                        new-col-var [form-list [quote mutable-list-of-size] col-size-var]]
      [list
        [quote loop] [form-list iteration-var [quote [i32 0]]]
        [form-list [quote if]
          [form-list [quote lt-s] iteration-var col-size-var]
          [form-concat [quote [let]]
            [form-list [form-list element-var [form-list [quote at] col-var iteration-var]]]
            [form-list [form-list [quote set-array] new-col-var iteration-var form]]
            [form-list [form-list [quote continue] iteration-var [form-list [quote add] iteration-var [quote [i32 1]]]]]]]]
      [form-list [quote freeze-mutable-list] new-col-var]
      new-col-var]]]

[defn half [x] [i32.div-s x 2]]

[def-extern transient-kv-map [func [] transient-kv-map]]
[def-extern set-kv-map [type-scheme [a] [func [transient-kv-map word a] []]]]
[def-extern freeze-kv-map [func [transient-kv-map] []]]

[defn mk-word [w] [form-list [quote word] w]]

[defmacro kv-mapq [.. entries]
  [let [s [size entries]
        n-of-pairs [half s]
        ml [mutable-list-of-size [add 4 n-of-pairs]]
        tmp-word [genword]]
    [assert [is-even s] kv-map requires an even number of arguments]
    [set-array ml 0 [quote let]]
    [set-array ml 1 [form-list tmp-word [quote [transient-kv-map]]]]
    [for-pair i 0 s
      [set-array ml [add 2 [half i]]
        [let [k [at entries i]]
          [form-list [quote set-kv-map] tmp-word
            [if [is-word k] [mk-word k] k]
            [at entries [inc i]]]]]]
    [set-array ml [add 2 n-of-pairs] [form-list [quote freeze-kv-map] tmp-word]]
    [set-array ml [add 3 n-of-pairs] tmp-word]
    [form-list-list [freeze-mutable-list ml]]]]

[defmacro kv-map-id [.. entries]
  [let [s [size entries]
        ml [mutable-list-of-size [add 4 s]]
        tmp-word [genword]]
    [set-array ml 0 [quote let]]
    [set-array ml 1 [form-list tmp-word [quote [transient-kv-map]]]]
    [for i 0 s
      [set-array ml [add 2 i]
        [let [k [at entries i]]
          [form-list [quote set-kv-map] tmp-word [mk-word k] k]]]]
    [set-array ml [add 2 s] [form-list [quote freeze-kv-map] tmp-word]]
    [set-array ml [add 3 s] tmp-word]
    [freeze-mutable-list ml]
    [form-list-list ml]]]

[def-extern has [func [kv-map word] i32]]

[defmacro hasq [m w]
  [form-list [quote has] m [mk-word w]]]

[def-extern get [type-scheme [a] [func [kv-map word] a]]]

[defmacro getq [m w]
  [form-list [quote get] m [mk-word w]]]

[defn try-get [m k]
  [if [has m k]
    [get m k]
    0]]

[defmacro try-getq [m w]
  [form-list [quote try-get] m [mk-word w]]]

[defn push-all [mut-list list]
  [for-each e list [push mut-list e]]]

[def-extern keys [func [kv-map] [form-list word]]]

[defn assoc [m k v]
  [let [new [transient-kv-map]]
    [for-each k [keys m]
      [set-kv-map new k [get m k]]]
    [set-kv-map new k v]
    [freeze-kv-map new]
    new]]

[def empty-kv-map [kv-mapq]]

[defn slice [l start end]
  [assert [not [is-negative start]] negative start index]
  [assert [not [is-negative end]] negative end index]
  [let [s [sub end start]]
    [if [lt-s s 1]
      [list]
      [let [ml [mutable-list-of-size s]]
        [for i start end
          [set-array ml [sub i start] [at l i]]]
        [freeze-mutable-list ml]
        ml]]]]

[def ascii-dash [i32 45]]

[defn is-decimal [dw]
  [let [s [word-byte-size dw]]
    [loop [i [if [eq [char-code-at dw 0] ascii-dash] 1 0]]
      [if [lt-s i s]
        [let [c [char-code-at dw i]]
          [if [and [le-s [i32 48] c] [le-s c [i32 57]]]
            [continue i [inc i]]
            0]]
        1]]]]

[defn is-non-negative-decimal [dw]
  [let [s [word-byte-size dw]]
    [loop [i 0]
      [if [lt-s i s]
        [let [c [char-code-at dw i]]
          [if [and [le-s [i32 48] c] [le-s c [i32 57]]]
            [continue i [inc i]]
            0]]
        1]]]]

[def-extern meta [func [form] kv-map]]
[def-extern var-get [func [var] any]]
[def-extern var-meta [func [var] any]]
[def-extern is-atom [type-scheme [a] [func [[atom a]] i32]]]
[comment
  maybe we should be able to specify in the type-scheme that a is of pointer type
  we do not want to be able to compare functions with it]
[def-extern is-identical [type-scheme [a] [func [a a] i32]]]

[defn try-get-assoc-list [list key]
  [let [s [size list]]
    [assert [is-even s] try-get-assoc-list requires an even length list]
    [loop [i 0]
      [if [lt-s i s]
        [if [eq-word key [at list i]]
          [at list [inc i]]
          [continue i [add 2 i]]]
        0]]]]

[defmacro macro-map [l elem-word f]
  [assert [is-word elem-word] macro-map-f requires a word as the second argument]
  [let [list-w [genword]
        size-w [genword]
        res-w [genword]
        i-w [genword]]
    [form-list [quote let]
      [form-list
        list-w l
        size-w [form-list [quote size] list-w]
        res-w [form-list [quote mutable-list-of-size] size-w]]
      [form-list [quote loop]
        [form-list i-w [quote [i32 0]]]
        [form-list [quote if]
          [form-list [quote lt-s] i-w size-w]
          [form-concat
            [list [quote let] [quote []]]
            [list [form-list [quote set-array] res-w i-w
              [form-list [quote let]
                [form-list elem-word [form-list [quote at] list-w i-w]]
                f]]]
            [list [form-list [quote continue] i-w [form-list [quote add] i-w [quote [i32 1]]]]]]]]
      [form-list [quote freeze-mutable-list] res-w]
      res-w]]]
