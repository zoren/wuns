[load compile-wat.wuns]

[defmacro def-wasm-extern [name type]
  [flist [quote import] [quote wasm] name type]]

[type wasm-module [] [union]]

[def-wasm-extern byte-array-to-wasm-module [func [byte-array] wasm-module]]

[type wasm-instance [] [union]]

[def-wasm-extern wasm-instantiate [func [wasm-module [object js-value]] wasm-instance]]
[def-wasm-extern wasm-call-export [type-scheme [a] [func [wasm-instance word [list a]] [list a]]]]
[type export-func [] [union]]

[def-wasm-extern memory [func [i32 i32 i32] js-value]]

[def-wasm-extern wasm-get-export-object [func [wasm-instance] [object js-value]]]

[defn translate-top-forms-async [forms]
  [let
    [converter [mk-form-to-ast]
     sinfo [form-to-ast-converter/syntax-info converter]
     f2t [form-to-ast-converter/form-to-top-async converter]]
    [promise-then
      [promises-seq forms f2t]
      [func then [btops]
        [let
          [bind-errors [clone-growable-to-frozen-list [form-to-ast-converter/errors converter]]
           gctx [make-global-context-from-syntax-info sinfo]
           ctop [checker/check-top [make-checker gctx]]
           output [make-wat-output]
           tctx [translate-context output gctx]]
          [for-each btop btops
            [ctop btop]
            [let [check-errors [clone-growable-to-frozen-list [check-context/messages gctx]]]
              [when-not [is-empty check-errors]
                [for-each error check-errors [log-check-message error]]
                [logq-abort translate-top-forms binding errors]]]
            [translate-top-form tctx btop]]
          output]]]]]

[def empty-object [kv-map-to-object [transient-kv-map]]]

[defn get-export [wasm-inst export-name]
  [get [object-to-kv-map [wasm-get-export-object wasm-inst]] export-name]]

[import wabt wat-to-byte-array [func [byte-array] byte-array]]

[defn output-to-module [output]
  [let [p [empty-printer [i32 800]]]
    [print-wat p [output-to-wat output]]
    [let [ba [printer-to-byte-array p]
          module [byte-array-to-wasm-module [wat-to-byte-array ba]]]
      [byte-array-log-as-string ba]
      module]]]
[comment
[defexpr trans-eval-form [form]
  [let
    [m [output-to-module
        [translate-top-forms
          [list
            [flist [quote defn] [quote f] [quote []] form]
            [quote [export f]]]]]
     i [wasm-instantiate m empty-object]
     f [get-export i [word f]]]
  [js-apply f [list]]]]
 ]
[defn test-assert-eq [expected actual]
  [let [js-expected [to-js-value expected]]
    [when-not [is-identical js-expected actual]
    [logq test failed]
    [log js-expected]
    [log actual]
    ]]]

[defn test-assert-undefined [actual]
  [when-not [is-undefined actual]
    [logq test failed]
    [log actual]]]

[defmacro js-vals [.. forms]
  [form-concat [list [quote list]] [list-map form forms [flist [quote to-js-value] [flist [quote f64] form]]]]]

[defmacro js-call [f .. forms]
  [flist
    [quote js-apply]
    f
    [form-concat [list [quote list]] [list-map form forms [flist [quote to-js-value] [flist [quote f64] form]]]]]]

[defn byte-array-set-word [ba base w]
  [for i 0 [word-byte-size w]
    [byte-array-set ba [add base i] [char-code-at w i]]]]

[defexpr module-async [.. forms]
  [promise-then
    [translate-top-forms-async forms]
    [func then [output] [output-to-module output]]]]

[defn test-exp-eq-fn [expected form-to-translate]
  [promise-then
    [translate-top-forms-async
      [list
        [flist [quote defn] [quote f] [quote []] form-to-translate]
        [quote [export f]]]]
    [func then [output]
      [let [mod [output-to-module output]
            inst [wasm-instantiate mod empty-object]
            f [get-export inst [word f]]
            actual [js-apply f [list]]
            js-expected [to-js-value expected]]
        [when-not [is-identical js-expected actual]
          [logq test failed]
          [log js-expected]
          [log actual]]]]]]

[defmacro test-exp-eq [expected form-to-translate]
  [flist [quote test-exp-eq-fn] expected [mk-quote form-to-translate]]]

[defmacro let-async [binding-form .. bodies]
  [match binding-form
    [form/list binding]
    [do
      [assert [eq 2 [size binding]] let-async bindings should have exactly two elements]
      [let [v [first binding] aform [second binding]]
        [assert [is-word v] let-async requires a word as the first element of the first argument]
        [flist [quote promise-bind]
          aform
          [form-concat
            [list [quote func] [quote then] [flist v]]
            bodies]]]]
    [logq-abort let-async requires a list as the first argument]]]

[defn test []
  [test-exp-eq [i32 1] [i32 1]]
  [test-exp-eq [f64 1.5] [f64 1.5]]
  [test-exp-eq [i32 5] [i32 5]]
  [comment if]
  [test-exp-eq [i32 5] [if [i32 0] [i32 7] [i32 5]]]
  [test-exp-eq [i32 5] [if [i32 1] [i32 5] [i32 9]]]
  [comment  [test-assert-undefined [trans-eval-form [if [i32 1] [do] [do]]]] ]

  [comment intrinsics]
  [test-exp-eq [i32 5] [intrinsic-call i32.add [i32 2] [i32 3]]]
  [test-exp-eq [i32 5] [intrinsic-call i32.sub [i32 8] [i32 3]]]
  [test-exp-eq [i32 15] [intrinsic-call i32.mul [i32 5] [i32 3]]]

  [comment parameters]
  [promise-bind
    [module-async [defn not [b] [if b [i32 0] [i32 1]]] [export not]]
    [func then [m]
      [let [i [wasm-instantiate m empty-object]
            f [get-export i [word not]]]
      [test-assert-eq [i32 1] [js-apply f [list [to-js-value [i32 0]]]]]
      [test-assert-eq [i32 0] [js-apply f [list [to-js-value [i32 1]]]]]
      [test-assert-eq [i32 0] [js-apply f [list [to-js-value [i32 1337]]]]]]]]

  [let-async
    [m [module-async [defn not2 [b] [intrinsic-call i32.eq b [i32 0]]] [export not2]]]
    [let [i [wasm-instantiate m empty-object]
          f [get-export i [word not2]]]
    [test-assert-eq [i32 1] [js-apply f [list [to-js-value [i32 0]]]]]
    [test-assert-eq [i32 0] [js-apply f [list [to-js-value [i32 1]]]]]
    [test-assert-eq [i32 0] [js-apply f [list [to-js-value [i32 1337]]]]]]]

  [let-async
    [m [module-async [defn twop [i f] [if i f [f64 1.5]]] [export twop]]]
    [let [i [wasm-instantiate m empty-object]
          twop [get-export i [word twop]]]
    [test-assert-eq [f64 1.5] [js-call twop 0 0]]
    [test-assert-eq [f64 1.5] [js-call twop 0 0.25]]
    [test-assert-eq [f64 0] [js-call twop 1 0]]
    [test-assert-eq [f64 0.25] [js-call twop 13.0 0.25]]
    [test-assert-eq [f64 0.1337] [js-call twop 13.0 0.1337]]]]

  [comment calls]
  [let-async [m [module-async
            [defn f [] [i32 1]]
            [export f]
            [defn g [] [f]]
            [export g]]]
    [let[i [wasm-instantiate m empty-object]
         f [get-export i [word f]]
         g [get-export i [word g]]]
    [test-assert-eq [f64 1] [js-call f]]
    [test-assert-eq [f64 1] [js-call g]]]]

  [comment recursion]
  [let-async [m [module-async
    [defn gauss-direct [n]
      [if n
        [intrinsic-call i32.add n [gauss-direct [intrinsic-call i32.sub n [i32 1]]]]
        [i32 0]]]
    [export gauss-direct]]]
    [let [i [wasm-instantiate m empty-object]
          gauss-direct [get-export i [word gauss-direct]]]
      [test-assert-eq [i32 0] [js-call gauss-direct 0]]
      [test-assert-eq [i32 55] [js-call gauss-direct 10]]
      [test-assert-eq [i32 5050] [js-call gauss-direct 100]]
      [test-assert-eq [i32 500500] [js-call gauss-direct 1000]]
      [test-assert-eq [i32 50005000] [js-call gauss-direct 10000]]
      [comment this one breaks the stack
        [test-assert-eq [i32 200010000] [js-call gauss-direct 20000]]]]

  [let-async [m [module-async
    [defn go [res n]
      [if n
        [go [intrinsic-call i32.add res n] [intrinsic-call i32.sub n [i32 1]]]
        res]]
    [defn gauss-tail [n] [go [i32 0] n]]
    [export gauss-tail]]]
    [let [i [wasm-instantiate m empty-object]
          gauss-tail [get-export i [word gauss-tail]]]
      [test-assert-eq [i32 0] [js-call gauss-tail 0]]
      [test-assert-eq [i32 55] [js-call gauss-tail 10]]
      [test-assert-eq [i32 5050] [js-call gauss-tail 100]]
      [comment here tail recursion allows us to calculate larger values]
  [comment      [test-assert-eq [i32 200010000] [js-call gauss-tail 20000]]
      [test-assert-eq [i32 2147450880] [js-call gauss-tail 65535]] ]
      ]]
  [let-async [m [module-async
    [defn gauss-loop [n]
      [loop [res [i32 0] i n]
        [if i
          [continue
            res [intrinsic-call i32.add res i]
            i [intrinsic-call i32.sub i [i32 1]]]
          res]]]
    [export gauss-loop]]][let[
        i [wasm-instantiate m empty-object]
        gauss-loop [get-export i [word gauss-loop]]]
      [test-assert-eq [i32 0] [js-call gauss-loop 0]]
      [test-assert-eq [i32 55] [js-call gauss-loop 10]]
      [test-assert-eq [i32 5050] [js-call gauss-loop 100]]
      [test-assert-eq [i32 200010000] [js-call gauss-loop 20000]]
      [test-assert-eq [i32 2147450880] [js-call gauss-loop 65535]]]]
  [comment
  [let-async [m [module-async
[import env mem [memory 1]]
[defn get-aligned [p] [intrinsic-call i32.load mem 0 4 p]]
[defn set-aligned [p v] [intrinsic-call i32.store mem 0 4 p v]]
[export get-aligned set-aligned]]]
  [let [env-kv [transient-kv-map]
        - [set-kv-map env-kv [word mem] [to-js-value [memory 1 1 0]]]
        env-object [kv-map-to-object env-kv]
        import-kv [transient-kv-map]
        -- [set-kv-map import-kv [word env] [to-js-value env-object]]
        import-object [kv-map-to-object import-kv]
        i [wasm-instantiate m import-object]
        get-aligned [get-export i [word get-aligned]]
        set-aligned [get-export i [word set-aligned]]]
      [test-assert-eq [i32 0] [js-call get-aligned 0]]
      [js-call set-aligned 0 1337]
      [test-assert-eq [i32 1337] [js-call get-aligned 0]]]]

  [comment hash it out]
  [let [m [module
[import env mem [memory 1]]
[def fnv-prime [i32 16777619]]
[def fnv-offset-basis [i32 -2128831035]]

[defn hash-fnv-1a-i32 [p len]
  [let [end-p [intrinsic-call i32.add p len]]
    [loop [hash fnv-offset-basis
           q p]
      [if [intrinsic-call i32.lt-s q end-p]
        [continue
            hash
            [intrinsic-call i32.mul
              [intrinsic-call i32.xor hash
                [intrinsic-call i32.load8-u mem 0 1 q]]
              fnv-prime]
            q [intrinsic-call i32.add q [i32 1]]]
        hash]]]]
[export hash-fnv-1a-i32]
]
        env-kv [transient-kv-map]
        wasm-mem [memory 1 1 0]
        wasm-mem-array [byte-array-from [object-get [to-js-value wasm-mem] [word buffer]]]
        - [set-kv-map env-kv [word mem] [to-js-value wasm-mem]]
        env-object [kv-map-to-object env-kv]
        import-kv [transient-kv-map]
        -- [set-kv-map import-kv [word env] [to-js-value env-object]]
        import-object [kv-map-to-object import-kv]
        i [wasm-instantiate m import-object]
        hash-fnv-1a-i32 [get-export i [word hash-fnv-1a-i32]]]
    [test-assert-eq [i32 -2128831035] [js-call hash-fnv-1a-i32 0 0]]

    [comment stolen from github.com/fnvhash/libfnv/blob/master/test/unit/basic-full.ts]

    [byte-array-set-word wasm-mem-array 0 [word a]]
    [test-assert-eq [word e40c292c] [i32-to-hex [js-call hash-fnv-1a-i32 0 1]]]

    [byte-array-set-word wasm-mem-array 0 [word foobar]]
    [test-assert-eq [word bf9cf968] [i32-to-hex [js-call hash-fnv-1a-i32 0 6]]]
    ]
 ]
]]
