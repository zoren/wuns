[load simple.wuns]

[defn make-init-evaluator-async []
  [let [evaluator [make-evaluator]]
    [promise-then
      [evaluate-top-async evaluator [quote [load llmacro.wuns]]]
      [func t [-] evaluator]]]]

[import ./runtime-lib/wabt.js wat-to-wasm-byte-array [func [byte-array] byte-array]]

[type wasm-module [] [union]]

[import ./runtime-lib/wasm.js byte-array-to-wasm-module [func [byte-array] wasm-module]]

[import ./runtime-lib/wasm.js memory-buffer [func [memory] array-buffer]]

[defn output-to-module [output]
  [let [wat-string [wat-to-wat-bytes [output-to-wat output]]]
    [byte-array-log-as-string wat-string]
    [byte-array-to-wasm-module [wat-to-wasm-byte-array wat-string]]]]

[def empty-object [kv-map-to-object [transient-kv-map]]]

[type wasm-instance [] [union]]

[import ./runtime-lib/wasm.js memory [func [i32 i32 i32] memory]]

[import ./runtime-lib/wasm.js wasm-instantiate [func [wasm-module [object [object js-value]]] wasm-instance]]

[import ./runtime-lib/wasm.js wasm-get-export-object [func [wasm-instance] [object js-value]]]

[import ./runtime-lib/wasm.js wasm-get-exports [func [wasm-module] [list [object string]]]]

[defn get-export [wasm-inst export-name]
  [get [object-to-kv-map [wasm-get-export-object wasm-inst]] export-name]]

[defmacro js-app [fn .. args]
  [flist [quote js-apply] fn
    [form-concat
      [list [quote list]]
      [list-map arg args [flist [quote to-js-value] arg]]]]]

[def c [make-compiler]]
[quote
[c [qlist [defn f [] [tuple]] [export f]]]
]

[defn forms-to-module [forms]
  [let
    [compiler [make-compiler]
     output [compiler forms]]
    [output-to-module output]]]

[defn forms-to-inst [forms]
  [let
    [module [forms-to-module forms]
     inst [wasm-instantiate module empty-object]]
    inst]]

[defn f-inst [] [forms-to-inst [qlist [defn f [p [i32]] [tuple]] [export f]]]]

[defn test-assert-eq [js-expected actual]
  [when-not [is-identical [to-js-value js-expected] [to-js-value actual]]
    [logq test-assert-eq failed]
    [logq expected [identity js-expected]]
    [logq but got- [identity actual]]
    [logq-abort test assert failed]]]

[defn test-arithmetic []
  [let [forms
        [qlist
          [defn f [x [i32]] [i32] [intrinsic i32.add x [i32 1]]]

          [export f]]
        inst [forms-to-inst forms]
        f [get-export inst [word f]]]
    [test-assert-eq [i32 2] [js-app f [i32 1]]]
    [test-assert-eq [i32 0] [js-app f [i32 -1]]]]]

[defn test-tuple-return []
  [let [forms
        [qlist
          [defn get-empty-tuple [] [tuple] [tuple]]
          [defn get-2tuple [] [tuple [f64] [i32]] [tuple [f64 1.1] [i32 2]]]
          [export get-empty-tuple get-2tuple]]
        inst [forms-to-inst forms]
        get-empty-tuple [get-export inst [word get-empty-tuple]]
        get-2tuple [get-export inst [word get-2tuple]]]
    [test-assert-eq true [is-undefined [js-app get-empty-tuple]]]
    [let [tup [js-app get-2tuple]
          ar [js-value-to-array tup]]
      [test-assert-eq 2 [size ar]]
      [test-assert-eq [f64 1.1] [at ar [i32 0]]]
      [test-assert-eq [i32 2] [at ar [i32 1]]]]]]

[defn test-mutable []
  [let [forms
        [qlist
          [mutable x [i32 1336]]

          [defn get-x [] [i32] x]

          [defn set-x [v [i32]] [tuple]
            [assign x v]]

          [export get-x set-x]]
        inst [forms-to-inst forms]
        get-x [get-export inst [word get-x]]
        set-x [get-export inst [word set-x]]
        ]
    [test-assert-eq [i32 1336] [js-app get-x]]
    [js-app set-x [i32 1337]]
    [test-assert-eq [i32 1337] [js-app get-x]]]]

[defn test-pointers []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[def p-int
  [cast [pointer [exp mem] [i64]] [i32 16]]]

[defn set [v [i64]] [tuple]
  [assign [deref p-int] v]]

[defn get [] [i64] [deref p-int]]

[defn inc [] [tuple] [set [intrinsic i64.add [get] [i64 1]]]]

[export set get inc]]
      inst [forms-to-inst forms]
      wget [get-export inst [word get]]
      wset [get-export inst [word set]]
      winc [get-export inst [word inc]]]
    [test-assert-eq [bigint 0] [js-app wget]]
    [js-app wset [bigint 1]]
    [test-assert-eq [bigint 1] [js-app wget]]
    [js-app winc]
    [test-assert-eq [bigint 2] [js-app wget]]
    [js-app wset [bigint 2147483648]]
    [js-app winc]
    [test-assert-eq [bigint 2147483649] [js-app wget]]]]

[defn test-array []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[def p-ar
  [cast [pointer [exp mem] [array [i32]]] [i32 16]]]

[defn set [i [i32] v [i32]] [tuple]
  [assign [index [deref p-ar] i] v]]

[defn get [i [i32]] [i32]
  [index [deref p-ar] i]]

[export set get]]
     inst [forms-to-inst forms]
     wset [get-export inst [word set]]
     wget [get-export inst [word get]]]
    [test-assert-eq [i32 0] [js-app wget [i32 0]]]
    [test-assert-eq [i32 0] [js-app wget [i32 16]]]
    [js-app wset [i32 0] [i32 1]]
    [test-assert-eq [i32 1] [js-app wget [i32 0]]]
    [test-assert-eq [i32 0] [js-app wget [i32 16]]]
    [js-app wset [i32 16] [i32 2]]
    [test-assert-eq [i32 1] [js-app wget [i32 0]]]
    [test-assert-eq [i32 2] [js-app wget [i32 16]]]]]

[defn test-array-exp []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn make-array [n [i32]] [pointer [exp mem] [array [i32]]]
  [let [p [cast [pointer [exp mem] [array [i32]]] [i32 16]]]
    [assign [deref p] [array [i32] [intrinsic i32.add [i32 1] n] [intrinsic i32.add [i32 2] n] [intrinsic i32.add [i32 3] n]]]
    p]]

[defn get [p [pointer [exp mem] [array [i32]]] i [i32]] [i32]
  [index [deref p] i]]

[export make-array get]]
     inst [forms-to-inst forms]
     make-array [get-export inst [word make-array]]
     wget [get-export inst [word get]]]
    [let [p [js-app make-array [i32 3]]]
      [test-assert-eq [i32 4] [js-app wget p [i32 0]]]
      [test-assert-eq [i32 5] [js-app wget p [i32 1]]]
      [test-assert-eq [i32 6] [js-app wget p [i32 2]]]]]]

[defn test-record-exp []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn make-record [n [i32]] [pointer [exp mem] [record [f [f64]] [i [i32]]]]
  [let [p [cast [pointer [exp mem] [record [f [f64]] [i [i32]]]] [i32 16]]]
    [assign [deref p] [record f [f64 1.1] i n]]
    p]]

[defn get-f [p [pointer [exp mem] [record [f [f64]] [i [i32]]]]] [f64]
  [field [deref p] f]]

[defn get-i [p [pointer [exp mem] [record [f [f64]] [i [i32]]]]] [i32]
  [field [deref p] i]]

[export make-record get-f get-i]]
     inst [forms-to-inst forms]
     make-record [get-export inst [word make-record]]
     get-i [get-export inst [word get-i]]
     get-f [get-export inst [word get-f]]]
    [let [p [js-app make-record [i32 3]]]
      [test-assert-eq [f64 1.1] [js-app get-f p]]
      [test-assert-eq [i32 3] [js-app get-i p]]]]]

[defn test-tuple-exp []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn make-tuple [n [i32]] [pointer [exp mem] [tuple [f64] [i32]]]
  [let [p [cast [pointer [exp mem] [tuple [f64] [i32]]] [i32 16]]]
    [assign [deref p] [tuple [f64 1.1] n]]
    p]]

[defn get-1 [p [pointer [exp mem] [tuple [f64] [i32]]]] [f64]
  [index [deref p] [i32 0]]]

[defn get-2 [p [pointer [exp mem] [tuple [f64] [i32]]]] [i32]
  [index [deref p] [i32 1]]]

[export make-tuple get-1 get-2]]
     inst [forms-to-inst forms]
     make-tuple [get-export inst [word make-tuple]]
     get-1 [get-export inst [word get-1]]
     get-2 [get-export inst [word get-2]]]
    [let [p [js-app make-tuple [i32 3]]]
      [test-assert-eq [f64 1.1] [js-app get-1 p]]
      [test-assert-eq [i32 3] [js-app get-2 p]]]]]

[defn test-assert-form-eq [expected actual]
  [when-not [eq-form expected actual]
    [logq test-assert-form-eq failed]
    [logq expected [identity expected]]
    [logq but got- [identity actual]]
    [logq-abort test assert failed]]]

[defn test-parse []
  [promise-then
    [read-parse-file-async [word llsimpleparse.wuns]]
    [func t [forms]
      [let [module [forms-to-module forms]
            mem [memory 1 2 0]
            mem-buf [memory-buffer mem]
            wasm-log
            [func wasm-log [data sz]
              [logq wasm-log
                [byte-array-to-string
                  [byte-array-from-array-buffer mem-buf data sz]]]]
            wasm-log-i32
            [func wasm-log-i32 [n]
              [logq wasm-log-i32 [identity n]]]
            env [transient-kv-map]
            - [set-kv-map env [word mem] [to-js-value mem]]
            -- [set-kv-map env [word log] [to-js-value wasm-log]]
            --- [set-kv-map env [word log-i32] [to-js-value wasm-log-i32]]
            import-map [transient-kv-map]
            ---- [set-kv-map import-map [word env] [kv-map-to-object env]]
            inst [wasm-instantiate module [kv-map-to-object import-map]]]
        ]]]]

[defn test-all []
  [test-arithmetic]
  [test-tuple-return]
  [test-mutable]
  [test-pointers]
  [test-array]
  [test-array-exp]
  [test-record-exp]
  [test-tuple-exp]
  [test-parse]
  ]
