[load simple.wuns]

[defn make-init-evaluator-async []
  [let [evaluator [make-evaluator]]
    [promise-then
      [evaluate-top-async evaluator [quote [load llmacro.wuns]]]
      [func t [-] evaluator]]]]

[import ./runtime-lib/wabt.js wat-to-wasm-byte-array [func [byte-array] byte-array]]

[type wasm-module [] [union]]

[import ./runtime-lib/wasm.js byte-array-to-wasm-module [func [byte-array] wasm-module]]

[import ./runtime-lib/wasm.js memory-buffer [func [memory] array-buffer]]

[defn output-to-module [output]
  [let [wat-string [wat-to-wat-bytes [output-to-wat output]]]
    [byte-array-log-as-string wat-string]
    [byte-array-to-wasm-module [wat-to-wasm-byte-array wat-string]]]]

[def empty-object [kv-map-to-object [transient-kv-map]]]

[type wasm-instance [] [union]]

[import ./runtime-lib/wasm.js wasm-instantiate [func [wasm-module [object [object js-value]]] wasm-instance]]

[import ./runtime-lib/wasm.js wasm-get-export-object [func [wasm-instance] [object js-value]]]

[import ./runtime-lib/wasm.js wasm-get-exports [func [wasm-module] [list [object string]]]]

[defn get-export [wasm-inst export-name]
  [get [object-to-kv-map [wasm-get-export-object wasm-inst]] export-name]]

[defmacro js-app [fn .. args]
  [flist [quote js-apply] fn
    [form-concat
      [list [quote list]]
      [list-map arg args [flist [quote to-js-value] arg]]]]]

[def c [make-compiler]]
[quote
[c [qlist [defn f [] [tuple]] [export f]]]
]

[defn forms-to-module [forms]
  [let
    [compiler [make-compiler]
     output [compiler forms]]
    [output-to-module output]]]

[defn forms-to-inst [forms]
  [let
    [module [forms-to-module forms]
     inst [wasm-instantiate module empty-object]]
    inst]]

[defn f-inst [] [forms-to-inst [qlist [defn f [p [i32]] [tuple]] [export f]]]]

[defn test-assert-eq [js-expected actual]
  [when-not [is-identical [to-js-value js-expected] [to-js-value actual]]
    [logq test-assert-eq failed]
    [logq expected [identity js-expected]]
    [logq but got- [identity actual]]]]

[defn test-arithmetic []
  [let [forms
        [qlist
          [defn f [x [i32]] [i32] [intrinsic i32.add x [i32 1]]]

          [export f]]
        inst [forms-to-inst forms]
        f [get-export inst [word f]]]
    [test-assert-eq [i32 2] [js-app f [i32 1]]]
    [test-assert-eq [i32 0] [js-app f [i32 -1]]]]]

[defn test-tuple-return []
  [let [forms
        [qlist
          [defn get-empty-tuple [] [tuple] [tuple]]
          [defn get-2tuple [] [tuple [f64] [i32]] [tuple [f64 1.1] [i32 2]]]
          [export get-empty-tuple get-2tuple]]
        inst [forms-to-inst forms]
        get-empty-tuple [get-export inst [word get-empty-tuple]]
        get-2tuple [get-export inst [word get-2tuple]]]
    [test-assert-eq true [is-undefined [js-app get-empty-tuple]]]
    [let [tup [js-app get-2tuple]
          ar [js-value-to-array tup]]
      [test-assert-eq 2 [size ar]]
      [test-assert-eq [f64 1.1] [at ar [i32 0]]]
      [test-assert-eq [i32 2] [at ar [i32 1]]]]]]

[defn test-mutable []
  [let [forms
        [qlist
          [mutable x [i32 1336]]

          [defn get-x [] [i32] x]

          [defn set-x [v [i32]] [tuple]
            [assign x v]]

          [export get-x set-x]]
        inst [forms-to-inst forms]
        get-x [get-export inst [word get-x]]
        set-x [get-export inst [word set-x]]
        ]
    [test-assert-eq [i32 1336] [js-app get-x]]
    [js-app set-x [i32 1337]]
    [test-assert-eq [i32 1337] [js-app get-x]]]]

[defn test-import []
  [let
    [forms
      [qlist
[import env
  [mem [memory [i32] 1]]
  [log
    [func
      [par [pointer [exp mem] [array [u8]]]
       n-bytes [i32]]
      [tuple]]]
  [log-i32
    [func
      [n [i32]]
      [tuple]]]]

[def 0 [i32 0]]
[def 1 [i32 1]]
[def 2 [i32 2]]
[def 3 [i32 3]]

[defn not [x [i32]] [i32]
  [if x 0 1]]

[defn add [x [i32] y [i32]] [i32] [intrinsic i32.add x y]]
[defn sub [x [i32] y [i32]] [i32] [intrinsic i32.sub x y]]

[defn inc [x [i32]] [i32] [add x 1]]
[defn dec [x [i32]] [i32] [sub x 1]]

[defn align [p [i32] x [i32]] [i32]
  [intrinsic i32.and
    [add x [dec p]]
    [intrinsic i32.xor [i32 -1] [dec p]]]]

      ]]
    [forms-to-module forms]]]

[defn test-all []
  [test-arithmetic]
  [test-tuple-return]
  [test-mutable]
  [test-import]
  ]
