[load simple.wuns]

[defn make-init-evaluator-async []
  [let [evaluator [make-evaluator]]
    [promise-then
      [evaluate-top-async evaluator [quote [load llmacro.wuns]]]
      [func t [-] evaluator]]]]

[import ./runtime-lib/wabt.js wat-to-wasm-byte-array [func [string] byte-array]]

[type wasm-module [] [union]]

[import ./runtime-lib/wasm.js byte-array-to-wasm-module [func [byte-array] wasm-module]]

[import ./runtime-lib/wasm.js memory-buffer [func [memory] array-buffer]]

[def empty-object [kv-map-to-object [transient-kv-map]]]

[type wasm-instance [] [union]]

[import ./runtime-lib/wasm.js memory [func [i32 i32 i32] memory]]

[import ./runtime-lib/wasm.js wasm-instantiate [func [wasm-module [object [object js-value]]] wasm-instance]]

[import ./runtime-lib/wasm.js wasm-get-export-object [func [wasm-instance] [object js-value]]]

[import ./runtime-lib/wasm.js wasm-get-exports [func [wasm-module] [list [object string]]]]

[defn get-export [wasm-inst export-name]
  [get [object-to-kv-map [wasm-get-export-object wasm-inst]] export-name]]

[defmacro js-app [fn .. args]
  [flist [quote js-apply] fn
    [form-concat
      [list [quote list]]
      [list-map arg args [flist [quote to-js-value] arg]]]]]

[def c [make-compiler]]
[quote
[c [qlist [defn f [] [tuple]] [export f]]]
]

[defn forms-to-module [forms]
  [let
    [compiler [make-compiler]
     output [compiler forms]
     wat-string [byte-array-to-string [wat-to-wat-bytes [output-to-wat output]]]]
;    [log wat-string]
    [byte-array-to-wasm-module [wat-to-wasm-byte-array wat-string]]]]

[defn forms-to-inst [forms]
  [let
    [module [forms-to-module forms]
     inst [wasm-instantiate module empty-object]]
    inst]]

[defn f-inst [] [forms-to-inst [qlist [defn f [p [i32]] [tuple]] [export f]]]]

[defn deep-equal-js [v1 v2]
  [or
    [is-identical v1 v2]
    [and [js-value-is-array v1] [js-value-is-array v2]
      [let [sz [size v1]]
        [and [eq sz [size v2]]
          [loop [i 0]
            [if [lt-s i sz]
              [and [deep-equal-js [at v1 i] [at v2 i]]
                [continue i [inc i]]]
              true]]]]]]]

[defn test-assert-eq-fn [js-expected actual messages]
  [when-not [deep-equal-js [to-js-value js-expected] [to-js-value actual]]
    [logq test-assert-eq failed]
    [logq expected [identity js-expected]]
    [logq but got- [identity actual]]
    [logq-abort test assert failed]]]

[defmacro test-assert-eq [js-expected actual .. messages]
  [flist [quote test-assert-eq-fn] js-expected actual [quote-list messages]]]

[defn test-assert-not-eq [js-expected actual]
  [when [is-identical [to-js-value js-expected] [to-js-value actual]]
    [logq test-assert-not-eq failed]
    [logq expected [identity js-expected]]
    [logq but got- [identity actual]]
    [logq-abort test assert failed]]]

[defn test-arithmetic []
  [let [forms
        [qlist
          [defn f [x [i32]] [i32] [intrinsic i32.add x [i32 1]]]

          [export f]]
        inst [forms-to-inst forms]
        f [get-export inst [word f]]]
    [test-assert-eq [i32 2] [js-app f [i32 1]]]
    [test-assert-eq [i32 0] [js-app f [i32 -1]]]]]

[defn test-tuple-return []
  [let [forms
        [qlist
          [defn get-empty-tuple [] [tuple] [tuple]]
          [defn get-2tuple [] [tuple [f64] [i32]] [tuple [f64 1.1] [i32 2]]]
          [export get-empty-tuple get-2tuple]]
        inst [forms-to-inst forms]
        get-empty-tuple [get-export inst [word get-empty-tuple]]
        get-2tuple [get-export inst [word get-2tuple]]]
    [test-assert-eq true [is-undefined [js-app get-empty-tuple]]]
    [let [tup [js-app get-2tuple]
          ar [js-value-to-array tup]]
      [test-assert-eq 2 [size ar]]
      [test-assert-eq [f64 1.1] [at ar [i32 0]]]
      [test-assert-eq [i32 2] [at ar [i32 1]]]]]]

[defn test-mutable []
  [let [forms
        [qlist
          [mutable x [i32 1336]]

          [defn get-x [] [i32] x]

          [defn set-x [v [i32]] [tuple]
            [assign x v]]

          [export get-x set-x]]
        inst [forms-to-inst forms]
        get-x [get-export inst [word get-x]]
        set-x [get-export inst [word set-x]]
        ]
    [test-assert-eq [i32 1336] [js-app get-x]]
    [js-app set-x [i32 1337]]
    [test-assert-eq [i32 1337] [js-app get-x]]]]

[defn test-pointers-float []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[def p-f64
  [cast [pointer [exp mem] [f64]] [i32 16]]]

[defn set [v [f64]] [tuple]
  [passign p-f64 v]]

[defn get [] [f64] [deref p-f64]]

[defn inc [] [tuple] [set [intrinsic f64.add [get] [f64 1]]]]

[export set get inc]]
      inst [forms-to-inst forms]
      wget [get-export inst [word get]]
      wset [get-export inst [word set]]
      winc [get-export inst [word inc]]]
    [test-assert-eq [f64 0] [js-app wget]]
    [js-app wset [f64 1]]
    [test-assert-eq [f64 1] [js-app wget]]
    [js-app winc]
    [test-assert-eq [f64 2] [js-app wget]]
    [js-app wset [f64 2147483648]]
    [js-app winc]
    [test-assert-eq [f64 2147483649] [js-app wget]]]]

[defn test-pointers []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[def p-i64
  [cast [pointer [exp mem] [i64]] [i32 16]]]

[defn set [v [i64]] [tuple]
  [passign p-i64 v]]

[defn get [] [i64] [deref p-i64]]

[defn inc [] [tuple] [set [intrinsic i64.add [get] [i64 1]]]]

[export set get inc]]
      inst [forms-to-inst forms]
      wget [get-export inst [word get]]
      wset [get-export inst [word set]]
      winc [get-export inst [word inc]]]
    [test-assert-eq [bigint 0] [js-app wget]]
    [js-app wset [bigint 1]]
    [test-assert-eq [bigint 1] [js-app wget]]
    [js-app winc]
    [test-assert-eq [bigint 2] [js-app wget]]
    [js-app wset [bigint 2147483648]]
    [js-app winc]
    [test-assert-eq [bigint 2147483649] [js-app wget]]]]

[defn test-array []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[def p-ar
  [cast [pointer [exp mem] [array [i32]]] [i32 16]]]

[defn set [i [i32] v [i32]] [tuple]
  [passign [pindex p-ar i] v]]

[defn get [i [i32]] [i32]
  [deref [pindex p-ar i]]]

[export set get]]
     inst [forms-to-inst forms]
     wset [get-export inst [word set]]
     wget [get-export inst [word get]]]
    [test-assert-eq [i32 0] [js-app wget [i32 0]]]
    [test-assert-eq [i32 0] [js-app wget [i32 16]]]
    [js-app wset [i32 0] [i32 1]]
    [test-assert-eq [i32 1] [js-app wget [i32 0]]]
    [test-assert-eq [i32 0] [js-app wget [i32 16]]]
    [js-app wset [i32 16] [i32 2]]
    [test-assert-eq [i32 1] [js-app wget [i32 0]]]
    [test-assert-eq [i32 2] [js-app wget [i32 16]]]]]

[defn test-array-exp []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn make-array [n [i32]] [pointer [exp mem] [array [i32]]]
  [let [p [cast [pointer [exp mem] [array [i32]]] [i32 16]]]
    [passign p [array [i32] [intrinsic i32.add [i32 1] n] [intrinsic i32.add [i32 2] n] [intrinsic i32.add [i32 3] n]]]
    p]]

[defn get [p [pointer [exp mem] [array [i32]]] i [i32]] [i32]
  [deref [pindex p i]]]

[export make-array get]]
     inst [forms-to-inst forms]
     make-array [get-export inst [word make-array]]
     wget [get-export inst [word get]]]
    [let [p [js-app make-array [i32 3]]]
      [test-assert-eq [i32 4] [js-app wget p [i32 0]]]
      [test-assert-eq [i32 5] [js-app wget p [i32 1]]]
      [test-assert-eq [i32 6] [js-app wget p [i32 2]]]]]]

[defn test-record-exp []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn make-record [n [i32]] [pointer [exp mem] [record [f [f64]] [i [i32]]]]
  [let [p [cast [pointer [exp mem] [record [f [f64]] [i [i32]]]] [i32 16]]]
    [passign p [record f [f64 1.1] i n]]
    p]]

[defn get-f [p [pointer [exp mem] [record [f [f64]] [i [i32]]]]] [f64]
  [deref [pfield p f]]]

[defn get-i [p [pointer [exp mem] [record [f [f64]] [i [i32]]]]] [i32]
  [deref [pfield p i]]]

[export make-record get-f get-i]]
     inst [forms-to-inst forms]
     make-record [get-export inst [word make-record]]
     get-i [get-export inst [word get-i]]
     get-f [get-export inst [word get-f]]]
    [let [p [js-app make-record [i32 3]]]
      [test-assert-eq [f64 1.1] [js-app get-f p]]
      [test-assert-eq [i32 3] [js-app get-i p]]]]]

[defn test-tuple-exp []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn make-tuple [n [i32]] [pointer [exp mem] [tuple [f64] [i32]]]
  [let [p [cast [pointer [exp mem] [tuple [f64] [i32]]] [i32 16]]]
    [passign p [tuple [f64 1.1] n]]
    p]]

[defn get-tuple [ptup [pointer [exp mem] [tuple [f64] [i32]]]] [tuple [f64] [i32]]
  [deref ptup]]

[defn get-1 [p [pointer [exp mem] [tuple [f64] [i32]]]] [f64]
  [deref [pindex p [i32 0]]]]

[defn get-2 [p [pointer [exp mem] [tuple [f64] [i32]]]] [i32]
  [deref [pindex p [i32 1]]]]

[export make-tuple get-1 get-2 get-tuple]]
     inst [forms-to-inst forms]
     make-tuple [get-export inst [word make-tuple]]
     get-tuple [get-export inst [word get-tuple]]
     get-1 [get-export inst [word get-1]]
     get-2 [get-export inst [word get-2]]]
    [let [p [js-app make-tuple [i32 3]]
          ;tup [js-value-to-array [js-app get-tuple p]]
          ]
      [test-assert-eq [f64 1.1] [js-app get-1 p]]
      [test-assert-eq [i32 3] [js-app get-2 p]]
      ; [test-assert-eq 2 [size tup]]
      ; [test-assert-eq [f64 1.1] [at tup [i32 0]]]
      ; [test-assert-eq [i32 3] [at tup [i32 1]]]

      ]]

[let
    [forms
      [qlist
[memory mem [i32] 1]

[defn alloc-tuple [t [tuple [f64] [i32]]] [pointer [exp mem] [tuple [f64] [i32]]]
  [let [p [cast [pointer [exp mem] [tuple [f64] [i32]]] [i32 16]]]
    [passign p t]
    p]]

[defn make-tuple [] [pointer [exp mem] [tuple [f64] [i32]]]
  [alloc-tuple [tuple [f64 1.1] [i32 3]]]]

[defn get-1 [p [pointer [exp mem] [tuple [f64] [i32]]]] [f64]
  [deref [pindex p [i32 0]]]]

[defn get-2 [p [pointer [exp mem] [tuple [f64] [i32]]]] [i32]
  [deref [pindex p [i32 1]]]]

[export make-tuple get-1 get-2]]
     inst [forms-to-inst forms]
     make-tuple [get-export inst [word make-tuple]]
     get-1 [get-export inst [word get-1]]
     get-2 [get-export inst [word get-2]]]
    [let [p [js-app make-tuple]]
      [test-assert-eq [f64 1.1] [js-app get-1 p]]
      [test-assert-eq [i32 3] [js-app get-2 p]]]]]

[defn test-tuple-let-destructure []
  [let [forms
        [qlist
          [defn tup [x [i32] y [i32]] [tuple [i32] [i32]]
            [tuple x y]]

          [defn proj1 [] [i32]
            [let [[a b] [tup [i32 4] [i32 5]]]
              a]]

          [defn proj2 [] [i32]
            [let [[a b] [tup [i32 4] [i32 5]]]
              b]]

          [export proj1 proj2]]
        inst [forms-to-inst forms]
        proj1 [get-export inst [word proj1]]
        proj2 [get-export inst [word proj2]]]
    [test-assert-eq [i32 4] [js-app proj1]]
    [test-assert-eq [i32 5] [js-app proj2]]]]

[defn test-tuple-parameters []
  [let [forms
        [qlist
          [defn proj1 [t [tuple [i32] [i32]]] [i32]
            [let [[a b] t]
              a]]

          [defn proj2 [t [tuple [i32] [i32]]] [i32]
            [let [[a b] t]
              b]]

          [defn main [] [i32]
            [intrinsic i32.sub
              [proj1 [tuple [i32 3] [i32 5]]]
              [proj2 [tuple [i32 3] [i32 5]]]]]

          [export main]]
        inst [forms-to-inst forms]
        main [get-export inst [word main]]]
    [test-assert-eq [i32 -2] [js-app main]]
    ]]

[defn test-pointer-assign-primitives []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn set-i8-i32 [p [pointer [exp mem] [i8]] v [i32]] [tuple] [passign p v]]

[defn set-i8-i64 [p [pointer [exp mem] [i8]] v [i64]] [tuple] [passign p v]]

[defn get-i8 [p [pointer [exp mem] [i8]]] [i64] [deref p]]

[export set-i8-i32 set-i8-i64 get-i8]]
     inst [forms-to-inst forms]
     get-i8 [get-export inst [word get-i8]]
     set-i8-i32 [get-export inst [word set-i8-i32]]
     set-i8-i64 [get-export inst [word set-i8-i64]]
     p [i32 16]
     q [i32 17]]
    [test-assert-eq [bigint 0] [js-app get-i8 p]]
    [js-app set-i8-i64 q [bigint 2]]
    ; if a too large instruction is used this will overwrite 2
    [js-app set-i8-i64 p [bigint 1]]
    [test-assert-eq [bigint 1] [js-app get-i8 p]]
    [test-assert-eq [bigint 2] [js-app get-i8 q]]
    [js-app set-i8-i64 p [bigint 127]]
    [test-assert-eq [bigint 127] [js-app get-i8 p]]
    [js-app set-i8-i64 p [bigint 128]]
    [test-assert-eq [bigint -128] [js-app get-i8 p]]]
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn set-i16-i32 [p [pointer [exp mem] [i16]] v [i32]] [tuple] [passign p v]]

[defn set-i16-i64 [p [pointer [exp mem] [i16]] v [i64]] [tuple] [passign p v]]

[defn get-i16 [p [pointer [exp mem] [i16]]] [i64] [deref p]]

[export set-i16-i32 set-i16-i64 get-i16]]
     inst [forms-to-inst forms]
     get-i16 [get-export inst [word get-i16]]
     set-i16-i32 [get-export inst [word set-i16-i32]]
     set-i16-i64 [get-export inst [word set-i16-i64]]
     p [i32 16]
     q [i32 18]]
    [test-assert-eq [bigint 0] [js-app get-i16 p]]
    [js-app set-i16-i64 q [bigint 2]]
    ; if a too large instruction is used this will overwrite 2
    [js-app set-i16-i64 p [bigint 1]]
    [test-assert-eq [bigint 1] [js-app get-i16 p]]
    [test-assert-eq [bigint 2] [js-app get-i16 q]]
    [js-app set-i16-i64 p [bigint 32767]]
    [test-assert-eq [bigint 32767] [js-app get-i16 p]]
    [js-app set-i16-i64 p [bigint 32768]]
    [test-assert-eq [bigint -32768] [js-app get-i16 p]]]

[let
    [forms
      [qlist
[memory mem [i32] 1]

[defn set-i32-i32 [p [pointer [exp mem] [i32]] v [i32]] [tuple] [passign p v]]

[defn set-i32-i64 [p [pointer [exp mem] [i32]] v [i64]] [tuple] [passign p v]]

[defn get-i32 [p [pointer [exp mem] [i32]]] [i32] [deref p]]

[export set-i32-i32 set-i32-i64 get-i32]]
     inst [forms-to-inst forms]
     get-i32 [get-export inst [word get-i32]]
     set-i32-i32 [get-export inst [word set-i32-i32]]
     set-i32-i64 [get-export inst [word set-i32-i64]]
     p [i32 16]
     q [i32 20]]
    [test-assert-eq [i32 0] [js-app get-i32 p]]
    [js-app set-i32-i64 q [bigint 2]]
    ; if a too large instruction is used this will overwrite 2
    [js-app set-i32-i64 p [bigint 1]]
    [test-assert-eq [i32 1] [js-app get-i32 p]]
    [test-assert-eq [i32 2] [js-app get-i32 q]]
    [js-app set-i32-i64 p [bigint 2147483647]]
    [test-assert-eq [i32 2147483647] [js-app get-i32 p]]
    [js-app set-i32-i64 p [bigint 2147483648]]
    [test-assert-eq [i32 -2147483648] [js-app get-i32 p]]]
  ]

[defn test-func-exp []
  [let
    [forms
      [qlist
    [def not
      [func [x [i32]] [i32] [if x [i32 0] [i32 1]]]]

    [functor id [t datatype]
      [func [x t] t
        x]]
    [def id-i32 [id [i32]]]
    [def id-f64 [id [f64]]]

    [functor sot [t2 datatype]
      [size-of-type t2]]
    [defn get-so-i64 [] [i32] [sot [i64]]]

    [functor sot-fn [t datatype]
      [func [] [i32] [size-of-type t]]]
    [def get-so-i32
      [sot-fn [i32]]]

[defn alloc-n [n-bytes [i32]] [i32]
  [i32 16]]

[memory mem [i32] 1]

[datatype pmem [a datatype]
  [pointer [exp mem] a]]

[functor alloc [t datatype]
  [cast [pmem t] [alloc-n [size-of-type t]]]]

[datatype growable-list [a datatype]
  [record
    [size [i32]]
    [capacity [i32]]
    [parray [pmem [array a]]]]]

[functor growable-list-alloc-init [elem-type datatype]
  [func [init-capacity [i32]] [pmem [growable-list elem-type]]
    [let
      [p [alloc [growable-list elem-type]]]
      [passign p
        [record
          size [i32 0]
          capacity init-capacity
          parray [alloc [array elem-type [exp init-capacity]]]]]
      p]]]

[def growable-list-alloc-init-i64
  [growable-list-alloc-init [i64]]]

    [export not id-i32 id-f64 get-so-i32 get-so-i64]]
     inst [forms-to-inst forms]
     wnot [get-export inst [word not]]
     id-i32 [get-export inst [word id-i32]]
     id-f64 [get-export inst [word id-f64]]
     get-so-i32 [get-export inst [word get-so-i32]]
     get-so-i64 [get-export inst [word get-so-i64]]]

    [test-assert-eq [i32 0] [js-app wnot [i32 1]]]
    [test-assert-eq [i32 0] [js-app wnot [i32 1337]]]
    [test-assert-eq [i32 1] [js-app wnot [i32 0]]]

    [test-assert-eq [i32 1337] [js-app id-i32 [i32 1337]]]

    [test-assert-eq [f64 1.1] [js-app id-f64 [f64 1.1]]]

    [test-assert-eq [i32 4] [js-app get-so-i32]]

    [test-assert-eq [i32 8] [js-app get-so-i64]]
    ]]

[defn test-local-vars []
  [let
    [forms
      [qlist
    [defn test-locals [] [i32]
      [let [x [i32 0]]
       x]
      [let [x [i32 2]]
       x]]

    [export test-locals]]
     inst [forms-to-inst forms]
     test-locals [get-export inst [word test-locals]]]

    [test-assert-eq [i32 2] [js-app test-locals]]
    ]]

[defn test-all []
  [test-arithmetic]
  [test-tuple-return]
  [test-mutable]
  [test-pointers-float]
  [test-pointers]
  [test-pointer-assign-primitives]
  [test-array]
  [test-array-exp]
  [test-record-exp]
  [test-tuple-exp]
  [test-tuple-let-destructure]
  [test-tuple-parameters]
  [test-func-exp]
  [test-local-vars]
  ]

; [func wasm-dump-mem [p n]
;   [let
;   ; consider https://en.wikipedia.org/wiki/Code_page_437
;     [ar [byte-array-from-mem p n]]
;     [logq wasm-dump-mem [identity p] [identity n] [identity ar]]]]

[defn byte-array-from-mem [mem data sz]
  [byte-array-from-array-buffer [memory-buffer mem] data sz]]

[defn make-import-object [mem]
  [let
    [wasm-log
      [func wasm-log [data sz]
        [logq wasm-log [byte-array-to-string [byte-array-from-mem mem data sz]]]]
     wasm-log-i32
      [func wasm-log-i32 [n]
        [logq wasm-log-i32 [identity n]]]
     wasm-log-i64
      [func wasm-log-i64 [n]
        [logq wasm-log-i64 [identity n]]]
     env [transient-kv-map]]
    [set-kv-map env [word mem] [to-js-value mem]]
    [set-kv-map env [word log] [to-js-value wasm-log]]
    [set-kv-map env [word log-i32] [to-js-value wasm-log-i32]]
    [set-kv-map env [word log-i64] [to-js-value wasm-log-i64]]
    [let [import-map [transient-kv-map]]
      [set-kv-map import-map [word env] [kv-map-to-object env]]
      [kv-map-to-object import-map]]]]

[defn test-assert-form-eq [expected actual]
  [when-not [eq-form expected actual]
    [logq test-assert-form-eq failed]
    [logq expected [identity expected]]
    [logq but got- [identity actual]]
    [logq-abort test assert failed]]]

[defn test-parse []
  [promise-then
    [read-parse-file-async [word llsimpleparse.wuns]]
    [func t [forms]
      [let
       [module [forms-to-module forms]
        mem [memory 1 9 0]
        import-obj [make-import-object mem]
        inst [wasm-instantiate module import-obj]
        parse-all-forms [get-export inst [word parse-all-forms]]
        form-free [get-export inst [word form-free]]
        list-forms-free [get-export inst [word list-forms-free]]
        text-free [get-export inst [word text-free]]
        list-size [get-export inst [word list-size]]
        list-alloc-byte [get-export inst [word list-alloc-byte]]
        form-tag [get-export inst [word form-tag]]
        form-word-is [get-export inst [word form-word-is]]
        form-list-is [get-export inst [word form-list-is]]
        form-list-get [get-export inst [word form-list-get]]
        form-word-get [get-export inst [word form-word-get]]
        list-get-form [get-export inst [word list-get-form]]
        list-data-byte-array [get-export inst [word list-data-byte-array]]
        realloc [get-export inst [word realloc-debug]]
        get-number-of-frames [get-export inst [word get-number-of-frames]]
        global-context-free [get-export inst [word global-context-free]]
        parse-translate [get-export inst [word parse-translate]]
        form-to-top [get-export inst [word form-to-top]]
        num-frames-i32 [func nfi [] [js-value-to-i32 [js-app get-number-of-frames]]]
        fill-word
        [func fill-word [jsp w]
          [let
            [src [word-to-byte-array w]
             sz [byte-array-size src]
             dst [byte-array-from-mem mem [js-value-to-i32 jsp] sz]]
            [for i 0 sz
              [byte-array-set dst i [byte-array-get src i]]]]]
        read-mem-as-word
        [func rmw [jsp sz]
          [let
            [ar [byte-array-from-mem mem [js-value-to-i32 jsp] sz]
             str [byte-array-to-string ar]]
            [string-to-word str]]]
        read-mem-byte
        [func rmb [jsp index]
          [let
            [ar [byte-array-from-mem mem [add [js-value-to-i32 jsp] index] 1]]
            [byte-array-get ar 0]]]
        alloc-word
        [func aw [w]
          [let
            [src [word-to-byte-array w]
             sz [byte-array-size src]
             vec [js-app list-alloc-byte sz]
             data [js-value-to-i32 [js-app list-data-byte-array vec]]
             dst [byte-array-from-mem mem data sz]]
            [for i 0 sz
              [byte-array-set dst i [byte-array-get src i]]]
            vec]]
        ptext-to-string
        [func p2s [p]
          [let
            [data [js-value-to-i32 [js-app list-data-byte-array p]]
             sz [js-value-to-i32 [js-app list-size p]]
             ar [byte-array-from-mem mem data sz]]
            [byte-array-to-string ar]]]
        pform-to-form
        [func pf2f [pform]
          [ifs
            [is-identical [js-value-to-i32 pform] [i32 0]]
            [logq-abort null form]

            [js-value-to-i32 [js-app form-word-is pform]]
            [let
              [fw [js-app form-word-get pform]
               str [ptext-to-string fw]]
              [form/word [string-to-word str]]]

            [js-value-to-i32 [js-app form-list-is pform]]
            [let
              [fl [js-app form-list-get pform]
               sz [js-value-to-i32 [js-app list-size fl]]
               gl [growable-list]]
              [for i 0 sz
                [push gl
                  [pf2f [js-app list-get-form fl i]]]]
              [form/list [clone-growable-to-frozen-list gl]]]

            [logq-abort unknown form type [identity pform]]]]]
        [let [empty-vec [js-app list-alloc-byte [i32 0]]]
          [test-assert-eq [i32 0] [js-app list-size empty-vec]]
          [let [l [js-app parse-all-forms empty-vec]]
            [test-assert-eq [i32 0] [js-value-to-i32 [js-app list-size l]]]
            [js-app list-forms-free l]
            [js-app text-free empty-vec]]]
        [let
          [tests
            [list
              [pair [qlist] [word ' ']]
              [pair [qlist] [word '    ']]
              [pair [qlist a] [word 'a']]
              [pair [qlist abc] [word 'abc']]
              [pair [qlist kebab-123] [word 'kebab-123']]
              [pair [qlist []] [word '[]']]
              [pair [qlist [list]] [word '[list]']]
              [pair [qlist [i32 5]] [word '[i32 5]']]
              [pair [qlist [if b [i32 1] [i32 0]]] [word '[if b [i32 1] [i32 0]]']]
              [pair [qlist [list 0 1 2 3]] [word '[list 0 1 2 3]']]
              [pair [qlist [list 0 1 2 3 4 5 6 7 8 9]] [word '[list 0 1 2 3 4 5 6 7 8 9]']]
              [pair [qlist parsed also-parsed] [word 'parsed also-parsed']]
              [pair [qlist []] [word '[  ']]
              [pair [qlist [[]]] [word '[ [ ']]
              [pair [qlist abc xyz] [word 'abc xyz']]
              [pair [qlist abc [i32 789]] [word 'abc [i32 789]']]
              ]]
          [for-each test tests
            [let
              [expected [pair/fst test]
               w [alloc-word [pair/snd test]]
               fl [js-app parse-all-forms w]
               sz [js-value-to-i32 [js-app list-size fl]]
               gl [growable-list]]
              [for i 0 sz
                [push gl [pform-to-form [js-app list-get-form fl i]]]]
              [test-assert-eq [size expected] sz]
              [let [actual [clone-growable-to-frozen-list gl]]
                [for i 0 sz
                [test-assert-form-eq [at expected i] [at actual i]]]]
              [js-app list-forms-free fl]
              [js-app text-free w]]]]

        [let
          [tests
            [list
              [pair [qlist] [word '[defn f [] [i32] [i32 0]] [def d [i32 5]]']]
              [pair [qlist] [word '[defn f [] [i32] [i32 2147483647]] [export f]']]
              [pair [qlist] [word '[defn f [] [i32] [if [i32 1] [i32 2] [i32 3]]] [export f]']]
;              [pair [qlist [compile-error variable not found]] [word '[defn not [x [i32]] [i32] [if p [i32 0] [i32 1]]]']]
              [pair [qlist] [word '[defn not [x [i32]] [i32] [if x [i32 0] [i32 1]]] [export not]']]
;              [pair [qlist] [word '[defn f [] [i32] [i32 4294967295]]']]
              [pair [qlist] [word '[defn f [] [i32] [i32 -1]]']]
              ; [pair [qlist [compile-error bla]] [word '[defn f [] [i32] [u32 -1]]']]
              [pair [qlist [compile-error bla]] [word '[defn f [] [i32] [i8 127]]']]
;              [pair [qlist [compile-error bla]] [word '[defn f [] [i32] [u8 -1]]']]
              [pair [qlist [compile-error bla]] [word '[defn f [] [i32] [u8 255]]']]

              [pair [qlist [compile-error bla]] [word '[defn f [] [i32] [i64 -9223372036854775808]]']] ;9.223.372.036.854.775.808
              [pair [qlist [compile-error bla]] [word '[defn f [] [i32] [i64 9223372036854775807]]']] ;9.223.372.036.854.775.808
              [pair [qlist [compile-error bla]] [word '[defn f [] [i32] [u64 18446744073709551617]]']] ; 18.446.744.073.709.551.616
              [pair [qlist [compile-error bla]] [word '[genfn g [t datatype] [v t] [i32] [i32 0]]']]

              [pair [qlist] [word '[mutable m [i32 0]] [export m]']]
              [pair [qlist] [word '[defn add [x [i32] y [i32]] [i32] [intrinsic i32.add x y]]']]


              ]]
          [for-each test tests
            [let
              [expected [pair/fst test]
               w [alloc-word [pair/snd test]]
               gctx [js-app parse-translate w]]
              [do]
              [js-app text-free w]
              [js-app global-context-free gctx]
              ]]
              ]]]]]

[defn test-realloc []
  [promise-then
    [read-parse-file-async [word llsimpleparse.wuns]]
    [func t [forms]
      [let
       [module [forms-to-module forms]
        mem [memory 1 9 0]
        import-obj [make-import-object mem]
        inst [wasm-instantiate module import-obj]
        form-free [get-export inst [word form-free]]
        alloc-frames-validate-all [get-export inst [word alloc-frames-validate-all]]
        realloc [get-export inst [word realloc-debug]]
        get-number-of-frames [get-export inst [word get-number-of-frames]]
        num-frames-i32 [func nfi [] [js-value-to-i32 [js-app get-number-of-frames]]]
        fill-word
        [func fill-word [jsp w]
          [let
            [src [word-to-byte-array w]
             sz [byte-array-size src]
             dst [byte-array-from-mem mem [js-value-to-i32 jsp] sz]]
            [for i 0 sz
              [byte-array-set dst i [byte-array-get src i]]]]]
        read-mem-as-word
        [func rmw [jsp sz]
          [let
            [ar [byte-array-from-mem mem [js-value-to-i32 jsp] sz]
             str [byte-array-to-string ar]]
            [string-to-word str]]]
        read-mem-byte
        [func rmb [jsp index]
          [let
            [ar [byte-array-from-mem mem [add [js-value-to-i32 jsp] index] 1]]
            [byte-array-get ar 0]]]]

          [let
            [n-frames [num-frames-i32]
             p [js-app realloc 0 0 [i32 7]]
             q [js-app realloc p 7 [i32 14]]]
            ; if there are no allocations in between we should get the same pointer
            [test-assert-eq q p]
            [test-assert-eq [inc n-frames] [num-frames-i32]]
            [js-app realloc q [i32 14] 7]
            [js-app realloc q 7 0]
            [test-assert-eq p [js-app realloc 0 0 [i32 6]]]
            [js-app realloc q 6 0]]

          [let
            [n-frames [num-frames-i32]
             p [js-app realloc 0 0 7]
             q [js-app realloc 0 0 5]
             new-p [js-app realloc p 7 8]]
            [test-assert-not-eq new-p p]
            [test-assert-eq [add 3 n-frames] [js-app get-number-of-frames]]
            ; pop the top
            [js-app realloc new-p 8 0]
            [test-assert-eq [add 2 n-frames] [js-app get-number-of-frames]]
            ; expect we can grow the new top
            [test-assert-eq q [js-app realloc q 5 6]]
            [js-app realloc q 6 0]
            ; we should have popped all frames by now
            [test-assert-eq n-frames [js-app get-number-of-frames]]
            [js-app alloc-frames-validate-all]]
          [let
            [p [js-app realloc 0 0 7]
             q [js-app realloc 0 0 5]
             r [js-app realloc 0 0 6]]
            [fill-word q [word '12345']]
            ; shrink a non top frame, and expect the same pointer
            [test-assert-eq q [js-app realloc q 5 3]]
            [test-assert-eq [word 123] [read-mem-as-word q 3]]
            ; 4 char is overwritten when shrinking
            [test-assert-not-eq [word-to-char-code 4] [read-mem-byte q 3]]
            ; 5 char is overwritten when shrinking
            [test-assert-not-eq [word-to-char-code 5] [read-mem-byte q 4]]
            ; grow it within the same frame
            [test-assert-eq q [js-app realloc q 3 4]]
            [test-assert-eq [word 123] [read-mem-as-word q 3]]
            ; new byte is zeroed out
            [test-assert-eq 0 [read-mem-byte q 3]]
            ; grow it to its original size
            [test-assert-eq q [js-app realloc q 4 5]]
            [test-assert-eq [word 123] [read-mem-as-word q 3]]
            ; new bytes are zeroed out
            [test-assert-eq 0 [read-mem-byte q 3]]
            [test-assert-eq 0 [read-mem-byte q 4]]
            ; grow it beyond its original size, allocating a new frame
            [let [new-q [js-app realloc q 5 6]]
              [test-assert-not-eq q new-q]
              [test-assert-eq [word 123] [read-mem-as-word new-q 3]]
              [test-assert-eq 0 [read-mem-byte new-q 3]]
              [test-assert-eq 0 [read-mem-byte new-q 4]]
              [test-assert-eq 0 [read-mem-byte new-q 5]]
              [js-app realloc new-q 6 0]]
            [js-app realloc r 6 0]
            [js-app realloc p 7 0]]
          [let [big [js-app realloc 0 0 [i32 65536]]]
            [js-app alloc-frames-validate-all]
            [logq n-frames [js-app alloc-frames-validate-all]]
            [js-app realloc big [i32 65536] 0]]
          [logq n-frames [js-app alloc-frames-validate-all]]]]]]


[defn test-self-translate []
  [promise-then
    [read-parse-file-async [word llsimpleparse.wuns]]
    [func t [forms]
      [let
       [module [forms-to-module forms]
        mem [memory 1 9 0]
        import-obj [make-import-object mem]
        inst [wasm-instantiate module import-obj]
        parse-translate [get-export inst [word parse-translate]]
        global-context-errors [get-export inst [word global-context-errors]]
        error-list-get [get-export inst [word error-list-get]]
        error-get-message [get-export inst [word error-get-message]]
        parse-translate-to-wat [get-export inst [word parse-translate-to-wat]]
        list-size [get-export inst [word list-size]]
        list-data-byte-array [get-export inst [word list-data-byte-array]]
        list-alloc-byte [get-export inst [word list-alloc-byte]]
        alloc-text
        [func at [w]
          [let
            [src [word-to-byte-array w]
             sz [byte-array-size src]
             vec [js-app list-alloc-byte sz]
             data [js-value-to-i32 [js-app list-data-byte-array vec]]
             dst [byte-array-from-mem mem data sz]]
            [for i 0 sz
              [byte-array-set dst i [byte-array-get src i]]]
            vec]]
        text-free [get-export inst [word text-free]]
        ptext-to-string
        [func p2s [p]
          [let
            [data [js-value-to-i32 [js-app list-data-byte-array p]]
             sz [js-value-to-i32 [js-app list-size p]]
             ar [byte-array-from-mem mem data sz]]
            [byte-array-to-string ar]]]
        translate-to-errors
        [func translate [wuns-string]
          [let
           [wuns-text [alloc-text wuns-string]
            gctx [js-app parse-translate wuns-text]]
           [js-app text-free wuns-text]
           [js-app global-context-errors gctx]]]
        translate-to-module
        [func translate [wuns-string]
          [let
           [wuns-text [alloc-text wuns-string]
            wat-text [js-app parse-translate-to-wat wuns-text]
            wat-string [ptext-to-string wat-text]]
           [log wat-string]
           [js-app text-free wuns-text]
           [js-app text-free wat-text]
           [byte-array-to-wasm-module [wat-to-wasm-byte-array wat-string]]]]
         translate-instantiate
         [func ti [wuns-string]
           [wasm-instantiate [translate-to-module wuns-string] empty-object]]
         test-constant
         [func tc [expected t src]
          [let
            [mod-src [concat-words
              [word '[defn f [] ['] t
              [word '] '] src
              [word '] [export f]']]
             sinst [translate-instantiate mod-src]
             f [get-export sinst [word f]]]
            [test-assert-eq expected [js-app f]]]]
         ]
        [test-constant [i32 1337] [word i32] [word '[i32 1337]']]
        [test-constant [i32 -1] [word i32] [word '[i32 -1]']]
        [test-constant [i32 -2147483648] [word i32] [word '[i32 -2147483648]']]
        [test-constant [i32 2147483647] [word i32] [word '[i32 2147483647]']]
        ; [test-constant [i32 4294967295] [word i32] [word '[i32 4294967295]']] fails

        [test-constant [bigint 4294967296] [word i64] [word '[i64 4294967296]']]
        [test-constant [bigint 9223372036854775807] [word i64] [word '[i64 9223372036854775807]']]
        [test-constant [bigint -9223372036854775808] [word i64] [word '[i64 -9223372036854775808]']]
        ;  [test-constant [bigint 9223372036854775808] [word i64] [word '[i64 9223372036854775808]']] fails!
        ;  [test-constant [bigint 18446744073709551617] [word i64] [word '[i64 18446744073709551617]']] fails

        [test-constant [i32 1337] [word i32] [word '[intrinsic i32.add [i32 1] [i32 1336]]']]
        [test-constant [i32 1337] [word i32] [word '[intrinsic i32.sub [i32 1] [i32 -1336]]']]
        [test-constant [i32 119] [word i32] [word '[intrinsic i32.mul [i32 7] [i32 17]]']]

        [test-constant [i32 2] [word i32] [word '[if [i32 0] [i32 1] [i32 2]]']]
        [test-constant [i32 2] [word i32] [word '[if [i32 1] [i32 2] [i32 3]]']]

        [let
          [empty-tup-inst
            [translate-instantiate
              [word '[defn empty-tup [] []] [export empty-tup]']]
           empty-tup [get-export empty-tup-inst [word empty-tup]]]
          [test-assert-eq true [is-undefined [js-app empty-tup]]]]

        [let
          [two-tup-inst
            [translate-instantiate
              [word '[defn two-tup [] [tuple [i32] [i64]] [tuple [i32 5] [i64 1337]]] [export two-tup]']]
           two-tup [get-export two-tup-inst [word two-tup]]]
          [test-assert-eq [tuple [i32 5] [bigint 1337]] [js-app two-tup]]]

        [let
          [tup-drop-inst
            [translate-instantiate
              [word '[defn tup-drop [] [i32] [tuple [i32 5] [i64 1337]] [i32 5]] [export tup-drop]']]
           tup-drop [get-export tup-drop-inst [word tup-drop]]]
          [test-assert-eq [i32 5] [js-app tup-drop]]]

        [let
          [def-var-inst
            [translate-instantiate
              [word '[def d [i32 5]] [defn def-var [] [i32] d] [export def-var]']]
           def-var [get-export def-var-inst [word def-var]]]
          [test-assert-eq [i32 5] [js-app def-var]]]

        [let
          [mut-var-inst
            [translate-instantiate
              [word '[mutable d [i32 5]] [defn mut-var [] [i32] d] [export mut-var]']]
           mut-var [get-export mut-var-inst [word mut-var]]]
          [test-assert-eq [i32 5] [js-app mut-var]]]

        [let
          [not-inst
            [translate-instantiate
              [word '[defn not [p [i32]] [i32] [if p [i32 0] [i32 1]]] [export not]']]
           wnot [get-export not-inst [word not]]]
          [test-assert-eq [i32 1] [js-app wnot [i32 0]]]
          [test-assert-eq [i32 0] [js-app wnot [i32 1]]]
          [test-assert-eq [i32 0] [js-app wnot [i32 1337]]]]

        [let
          [inst
            [translate-instantiate
              [word '[defn f [] [i32] [i32 5]] [defn g [] [i32] [intrinsic i32.add [i32 1] [f]]] [export g]']]
           g [get-export inst [word g]]]
          [test-assert-eq [i32 6] [js-app g]]]

        [let
          [inst
            [translate-instantiate
[word '[defn not [p [i32]] [i32] [if p [i32 0] [i32 1]]] [defn not-not [p [i32]] [i32] [not [not p]]] [export not-not]']]
           not-not [get-export inst [word not-not]]]
          [test-assert-eq [i32 0] [js-app not-not [i32 0]]]
          [test-assert-eq [i32 1] [js-app not-not [i32 1]]]
          [test-assert-eq [i32 1] [js-app not-not [i32 1337]]]]

; tuples
        [let
          [inst
            [translate-instantiate
[word '[defn get-tup [t [tuple [i32] [i64]]] [tuple [i32] [i64]] t] [export get-tup]']]
           get-tup [get-export inst [word get-tup]]]
          [test-assert-eq [tuple [i32 4] [bigint 67]] [js-app get-tup [i32 4] [bigint 67]]]]

        [let
          [inst
            [translate-instantiate
[word '[defn get-tup [t [tuple [i32]]] [tuple [i32]] t] [export get-tup]']]
           get-tup [get-export inst [word get-tup]]]
          [test-assert-eq [i32 4] [js-app get-tup [i32 4]]]]

        [let
          [inst
            [translate-instantiate
[word '[defn get-tup [t [tuple]] [tuple] t] [export get-tup]']]
           get-tup [get-export inst [word get-tup]]]
          [test-assert-eq true [is-undefined [js-app get-tup]]]]

        [let
          [inst
            [translate-instantiate
[word '[defn get-tup [[tuple si bi] [tuple [i32] [i64]]] [tuple [i64] [i32]] [tuple bi si]] [export get-tup]']]
           get-tup [get-export inst [word get-tup]]]
          [test-assert-eq [tuple [bigint 67] [i32 4]] [js-app get-tup [i32 4] [bigint 67]]]]

        ; partial projection
        [let
          [inst
            [translate-instantiate
[word '[defn get-tup [[tuple si] [tuple [i32] [i64]]] [i32] si] [export get-tup]']]
           get-tup [get-export inst [word get-tup]]]
          [test-assert-eq [i32 4] [js-app get-tup [i32 4] [bigint 67]]]]

        [let
          [inst
            [translate-instantiate
[word '[defn get-tup [[tuple si] [tuple [i32] [i64] [i32]]] [i32] si] [export get-tup]']]
           get-tup [get-export inst [word get-tup]]]
          [test-assert-eq [i32 4] [js-app get-tup [i32 4] [bigint 67] [i32 5]]]]

        [let
          [inst
            [translate-instantiate
[word '[defn get-tup [[tuple si] [tuple [i32] [tuple [i64] [i32]]]] [i32] si] [export get-tup]']]
           get-tup [get-export inst [word get-tup]]]
          [test-assert-eq [i32 4] [js-app get-tup [i32 4] [bigint 67] [i32 5]]]]

        ; over projection
        [let
          [errors
            [translate-to-errors
[word '[defn get-tup [[tuple si bi ti] [tuple [i32] [i64]]] [i32] si] [export get-tup]']]]
          [test-assert-eq [i32 1] [list-size errors]]
          [let [error [js-app error-list-get errors 0]]
            [test-assert-eq [word 'no type for pattern'] [js-app ptext-to-string [js-app error-get-message error]]]]]

          ; records
          [let
          [inst
            [translate-instantiate
[word '[defn get-rec [t [record]] [record] t] [export get-rec]']]
           get-rec [get-export inst [word get-rec]]]
          [test-assert-eq true [is-undefined [js-app get-rec]]]]

          [let
          [inst
            [translate-instantiate
[word '[defn get-rec [t [record fn [i32]]] [record fn [i32]] t] [export get-rec]']]
           get-rec [get-export inst [word get-rec]]]
          [test-assert-eq 5 [js-app get-rec [i32 5]]]]

          [let
          [inst
            [translate-instantiate
[word '[defn get-rec [t [record fn [i32]]] [record fn [i32]] t] [export get-rec]']]
           get-rec [get-export inst [word get-rec]]]
          [test-assert-eq 5 [js-app get-rec [i32 5]]]]

          [let
          [inst
            [translate-instantiate
[word '[defn get-rec [t [record si [i32] bi [i64]]] [record si [i32] bi [i64]] t] [export get-rec]']]
           get-rec [get-export inst [word get-rec]]]
          [test-assert-eq [tuple [i32 4] [bigint 67]] [js-app get-rec [i32 4] [bigint 67]]]]

        [let
          [inst
            [translate-instantiate
[word '[defn get-rec [s [i32] b [i64]] [record si [i32] bi [i64]] [record si s bi b]] [export get-rec]']]
           get-rec [get-export inst [word get-rec]]]
          [test-assert-eq [tuple [i32 4] [bigint 67]] [js-app get-rec [i32 4] [bigint 67]]]]
        [let
          [inst
            [translate-instantiate
[word '[defn get-rec [b [i64] s [i32]] [record si [i32] bi [i64]] [record si s bi b]] [export get-rec]']]
           get-rec [get-export inst [word get-rec]]]
          [test-assert-eq [tuple [i32 4] [bigint 67]] [js-app get-rec [bigint 67] [i32 4]]]]
        ; record patterns
        [let
          [inst
            [translate-instantiate
[word '[defn get-record [[record si s bi b] [record si [i32] bi [i64]]] [record bi [i64] si [i32]] [record bi b si s]] [export get-record]']]
           get-record [get-export inst [word get-record]]]
          [test-assert-eq [tuple [bigint 67] [i32 4]] [js-app get-record [i32 4] [bigint 67]]]]

        ; let
                [let
          [inst
            [translate-instantiate
[word '[defn get-let [] [tuple] [let []]] [export get-let]']]
           get-let [get-export inst [word get-let]]]
          [test-assert-eq true [is-undefined [js-app get-let]]]]

        [let
          [inst
            [translate-instantiate
[word '[defn get-let [] [i32] [let [] [i32 5]]] [export get-let]']]
           get-let [get-export inst [word get-let]]]
          [test-assert-eq [i32 5] [js-app get-let]]]
;[defn get-let [] [i32] [let [x [i32 5]] [i32 5]]]
        [let
          [inst
            [translate-instantiate
[word '[defn get-let [] [i32] [let [x [i32 5]] [i32 5]]] [export get-let]']]
           get-let [get-export inst [word get-let]]]
          [test-assert-eq [i32 5] [js-app get-let]]]

        [let
          [inst
            [translate-instantiate
[word '[defn get-let [] [i32] [let [x [i32 5]] x]] [export get-let]']]
           get-let [get-export inst [word get-let]]]
          [test-assert-eq [i32 5] [js-app get-let]]]

          ]]]]