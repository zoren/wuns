[load simple.wuns]

[defn make-init-evaluator-async []
  [let [evaluator [make-evaluator]]
    [promise-then
      [evaluate-top-async evaluator [quote [load llmacro.wuns]]]
      [func t [-] evaluator]]]]

[import ./runtime-lib/wabt.js wat-to-wasm-byte-array [func [byte-array] byte-array]]

[type wasm-module [] [union]]

[import ./runtime-lib/wasm.js byte-array-to-wasm-module [func [byte-array] wasm-module]]

[import ./runtime-lib/wasm.js memory-buffer [func [memory] array-buffer]]

[defn output-to-module [output]
  [let [wat-string [wat-to-wat-bytes [output-to-wat output]]]
    [byte-array-log-as-string wat-string]
    [byte-array-to-wasm-module [wat-to-wasm-byte-array wat-string]]]]

[def empty-object [kv-map-to-object [transient-kv-map]]]

[type wasm-instance [] [union]]

[import ./runtime-lib/wasm.js memory [func [i32 i32 i32] memory]]

[import ./runtime-lib/wasm.js wasm-instantiate [func [wasm-module [object [object js-value]]] wasm-instance]]

[import ./runtime-lib/wasm.js wasm-get-export-object [func [wasm-instance] [object js-value]]]

[import ./runtime-lib/wasm.js wasm-get-exports [func [wasm-module] [list [object string]]]]

[defn get-export [wasm-inst export-name]
  [get [object-to-kv-map [wasm-get-export-object wasm-inst]] export-name]]

[defmacro js-app [fn .. args]
  [flist [quote js-apply] fn
    [form-concat
      [list [quote list]]
      [list-map arg args [flist [quote to-js-value] arg]]]]]

[def c [make-compiler]]
[quote
[c [qlist [defn f [] [tuple]] [export f]]]
]

[defn forms-to-module [forms]
  [let
    [compiler [make-compiler]
     output [compiler forms]]
    [output-to-module output]]]

[defn forms-to-inst [forms]
  [let
    [module [forms-to-module forms]
     inst [wasm-instantiate module empty-object]]
    inst]]

[defn f-inst [] [forms-to-inst [qlist [defn f [p [i32]] [tuple]] [export f]]]]

[defn test-assert-eq-fn [js-expected actual messages]
  [when-not [is-identical [to-js-value js-expected] [to-js-value actual]]
    [logq test-assert-eq failed]
    [logq expected [identity js-expected]]
    [logq but got- [identity actual]]
    [logq-abort test assert failed]]]

[defmacro test-assert-eq [js-expected actual .. messages]
  [flist [quote test-assert-eq-fn] js-expected actual [quote-list messages]]]

[defn test-assert-not-eq [js-expected actual]
  [when [is-identical [to-js-value js-expected] [to-js-value actual]]
    [logq test-assert-not-eq failed]
    [logq expected [identity js-expected]]
    [logq but got- [identity actual]]
    [logq-abort test assert failed]]]

[defn test-arithmetic []
  [let [forms
        [qlist
          [defn f [x [i32]] [i32] [intrinsic i32.add x [i32 1]]]

          [export f]]
        inst [forms-to-inst forms]
        f [get-export inst [word f]]]
    [test-assert-eq [i32 2] [js-app f [i32 1]]]
    [test-assert-eq [i32 0] [js-app f [i32 -1]]]]]

[defn test-tuple-return []
  [let [forms
        [qlist
          [defn get-empty-tuple [] [tuple] [tuple]]
          [defn get-2tuple [] [tuple [f64] [i32]] [tuple [f64 1.1] [i32 2]]]
          [export get-empty-tuple get-2tuple]]
        inst [forms-to-inst forms]
        get-empty-tuple [get-export inst [word get-empty-tuple]]
        get-2tuple [get-export inst [word get-2tuple]]]
    [test-assert-eq true [is-undefined [js-app get-empty-tuple]]]
    [let [tup [js-app get-2tuple]
          ar [js-value-to-array tup]]
      [test-assert-eq 2 [size ar]]
      [test-assert-eq [f64 1.1] [at ar [i32 0]]]
      [test-assert-eq [i32 2] [at ar [i32 1]]]]]]

[defn test-mutable []
  [let [forms
        [qlist
          [mutable x [i32 1336]]

          [defn get-x [] [i32] x]

          [defn set-x [v [i32]] [tuple]
            [assign x v]]

          [export get-x set-x]]
        inst [forms-to-inst forms]
        get-x [get-export inst [word get-x]]
        set-x [get-export inst [word set-x]]
        ]
    [test-assert-eq [i32 1336] [js-app get-x]]
    [js-app set-x [i32 1337]]
    [test-assert-eq [i32 1337] [js-app get-x]]]]

[defn test-pointers []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[def p-i64
  [cast [pointer [exp mem] [i64]] [i32 16]]]

[defn set [v [i64]] [tuple]
  [assign [deref p-i64] v]]

[defn get [] [i64] [deref p-i64]]

[defn inc [] [tuple] [set [intrinsic i64.add [get] [i64 1]]]]

[export set get inc]]
      inst [forms-to-inst forms]
      wget [get-export inst [word get]]
      wset [get-export inst [word set]]
      winc [get-export inst [word inc]]]
    [test-assert-eq [bigint 0] [js-app wget]]
    [js-app wset [bigint 1]]
    [test-assert-eq [bigint 1] [js-app wget]]
    [js-app winc]
    [test-assert-eq [bigint 2] [js-app wget]]
    [js-app wset [bigint 2147483648]]
    [js-app winc]
    [test-assert-eq [bigint 2147483649] [js-app wget]]]]

[defn test-array []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[def p-ar
  [cast [pointer [exp mem] [array [i32]]] [i32 16]]]

[defn set [i [i32] v [i32]] [tuple]
  [assign [index [deref p-ar] i] v]]

[defn get [i [i32]] [i32]
  [index [deref p-ar] i]]

[export set get]]
     inst [forms-to-inst forms]
     wset [get-export inst [word set]]
     wget [get-export inst [word get]]]
    [test-assert-eq [i32 0] [js-app wget [i32 0]]]
    [test-assert-eq [i32 0] [js-app wget [i32 16]]]
    [js-app wset [i32 0] [i32 1]]
    [test-assert-eq [i32 1] [js-app wget [i32 0]]]
    [test-assert-eq [i32 0] [js-app wget [i32 16]]]
    [js-app wset [i32 16] [i32 2]]
    [test-assert-eq [i32 1] [js-app wget [i32 0]]]
    [test-assert-eq [i32 2] [js-app wget [i32 16]]]]]

[defn test-array-exp []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn make-array [n [i32]] [pointer [exp mem] [array [i32]]]
  [let [p [cast [pointer [exp mem] [array [i32]]] [i32 16]]]
    [assign [deref p] [array [i32] [intrinsic i32.add [i32 1] n] [intrinsic i32.add [i32 2] n] [intrinsic i32.add [i32 3] n]]]
    p]]

[defn get [p [pointer [exp mem] [array [i32]]] i [i32]] [i32]
  [index [deref p] i]]

[export make-array get]]
     inst [forms-to-inst forms]
     make-array [get-export inst [word make-array]]
     wget [get-export inst [word get]]]
    [let [p [js-app make-array [i32 3]]]
      [test-assert-eq [i32 4] [js-app wget p [i32 0]]]
      [test-assert-eq [i32 5] [js-app wget p [i32 1]]]
      [test-assert-eq [i32 6] [js-app wget p [i32 2]]]]]]

[defn test-record-exp []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn make-record [n [i32]] [pointer [exp mem] [record [f [f64]] [i [i32]]]]
  [let [p [cast [pointer [exp mem] [record [f [f64]] [i [i32]]]] [i32 16]]]
    [assign [deref p] [record f [f64 1.1] i n]]
    p]]

[defn get-f [p [pointer [exp mem] [record [f [f64]] [i [i32]]]]] [f64]
  [field [deref p] f]]

[defn get-i [p [pointer [exp mem] [record [f [f64]] [i [i32]]]]] [i32]
  [field [deref p] i]]

[export make-record get-f get-i]]
     inst [forms-to-inst forms]
     make-record [get-export inst [word make-record]]
     get-i [get-export inst [word get-i]]
     get-f [get-export inst [word get-f]]]
    [let [p [js-app make-record [i32 3]]]
      [test-assert-eq [f64 1.1] [js-app get-f p]]
      [test-assert-eq [i32 3] [js-app get-i p]]]]]

[defn test-tuple-exp []
  [let
    [forms
      [qlist
[memory mem [i32] 1]

[defn make-tuple [n [i32]] [pointer [exp mem] [tuple [f64] [i32]]]
  [let [p [cast [pointer [exp mem] [tuple [f64] [i32]]] [i32 16]]]
    [assign [deref p] [tuple [f64 1.1] n]]
    p]]

[defn get-1 [p [pointer [exp mem] [tuple [f64] [i32]]]] [f64]
  [index [deref p] [i32 0]]]

[defn get-2 [p [pointer [exp mem] [tuple [f64] [i32]]]] [i32]
  [index [deref p] [i32 1]]]

[export make-tuple get-1 get-2]]
     inst [forms-to-inst forms]
     make-tuple [get-export inst [word make-tuple]]
     get-1 [get-export inst [word get-1]]
     get-2 [get-export inst [word get-2]]]
    [let [p [js-app make-tuple [i32 3]]]
      [test-assert-eq [f64 1.1] [js-app get-1 p]]
      [test-assert-eq [i32 3] [js-app get-2 p]]]]]

[defn test-assert-form-eq [expected actual]
  [when-not [eq-form expected actual]
    [logq test-assert-form-eq failed]
    [logq expected [identity expected]]
    [logq but got- [identity actual]]
    [logq-abort test assert failed]]]

[defn test-func-exp []
  [let
    [forms
      [qlist
    [def not
      [func [x [i32]] [i32] [if x [i32 0] [i32 1]]]]

    [functor id [t datatype]
      [func [x t] t
        x]]
    [def id-i32 [id [i32]]]
    [def id-f64 [id [f64]]]

    [functor sot [t2 datatype]
      [size-of-type t2]]
    [defn get-so-i64 [] [i32] [sot [i64]]]

    [functor sot-fn [t datatype]
      [func [] [i32] [size-of-type t]]]
    [def get-so-i32
      [sot-fn [i32]]]

[defn alloc-n [n-bytes [i32]] [i32]
  [i32 16]]

[memory mem [i32] 1]

[datatype pmem [a datatype]
  [pointer [exp mem] a]]

[functor alloc [t datatype]
  [cast [pmem t] [alloc-n [size-of-type t]]]]

[datatype growable-list [a datatype]
  [record
    [size [i32]]
    [capacity [i32]]
    [parray [pmem [array a]]]]]

[functor growable-list-alloc-init [elem-type datatype]
  [func [init-capacity [i32]] [pmem [growable-list elem-type]]
    [let
      [p [alloc [growable-list elem-type]]]
      [assign [deref p]
        [record
          size [i32 0]
          capacity init-capacity
          parray [alloc [array elem-type [exp init-capacity]]]]]
      p]]]

[def growable-list-alloc-init-i64
  [growable-list-alloc-init [i64]]]

    [export not id-i32 id-f64 get-so-i32 get-so-i64]]
     inst [forms-to-inst forms]
     wnot [get-export inst [word not]]
     id-i32 [get-export inst [word id-i32]]
     id-f64 [get-export inst [word id-f64]]
     get-so-i32 [get-export inst [word get-so-i32]]
     get-so-i64 [get-export inst [word get-so-i64]]]

    [test-assert-eq [i32 0] [js-app wnot [i32 1]]]
    [test-assert-eq [i32 0] [js-app wnot [i32 1337]]]
    [test-assert-eq [i32 1] [js-app wnot [i32 0]]]

    [test-assert-eq [i32 1337] [js-app id-i32 [i32 1337]]]

    [test-assert-eq [f64 1.1] [js-app id-f64 [f64 1.1]]]

    [test-assert-eq [i32 4] [js-app get-so-i32]]

    [test-assert-eq [i32 8] [js-app get-so-i64]]
    ]]

[defn test-all []
  [test-arithmetic]
  [test-tuple-return]
  [test-mutable]
  [test-pointers]
  [test-array]
  [test-array-exp]
  [test-record-exp]
  [test-tuple-exp]
  [test-func-exp]
  ]

[defn test-parse []
  [promise-then
    [read-parse-file-async [word llsimpleparse.wuns]]
    [func t [forms]
      [let
       [module [forms-to-module forms]
        mem [memory 1 9 0]
        byte-array-from-mem
        [func bafm [data sz]
          [byte-array-from-array-buffer [memory-buffer mem] data sz]]
        wasm-log
        [func wasm-log [data sz]
          [logq wasm-log
            [byte-array-to-string
              [byte-array-from-mem data sz]]]]
        wasm-log-i32
        [func wasm-log-i32 [n]
          [logq wasm-log-i32 [identity n]]]
        wasm-dump-mem
        [func wasm-dump-mem [p n]
          [let
            [ar [byte-array-from-mem p n]]
            [logq wasm-dump-mem [identity p] [identity n] [identity ar]]]]
        env [transient-kv-map]
        - [set-kv-map env [word mem] [to-js-value mem]]
        -- [set-kv-map env [word log] [to-js-value wasm-log]]
        --- [set-kv-map env [word log-i32] [to-js-value wasm-log-i32]]
        -f [set-kv-map env [word dump-mem] [to-js-value wasm-dump-mem]]
        import-map [transient-kv-map]
        ---- [set-kv-map import-map [word env] [kv-map-to-object env]]
        inst [wasm-instantiate module [kv-map-to-object import-map]]
        parse-n [get-export inst [word parse-n]]
        form-free [get-export inst [word form-free]]
        list-forms-free [get-export inst [word list-forms-free]]
        text-free [get-export inst [word text-free]]
        list-size [get-export inst [word list-size]]
        list-alloc-byte [get-export inst [word list-alloc-byte]]
        form-tag [get-export inst [word form-tag]]
        form-word-is [get-export inst [word form-word-is]]
        form-list-is [get-export inst [word form-list-is]]
        form-list-get [get-export inst [word form-list-get]]
        form-word-get [get-export inst [word form-word-get]]
        list-get-form [get-export inst [word list-get-form]]
        list-data-byte-array [get-export inst [word list-data-byte-array]]
        realloc [get-export inst [word realloc-debug]]
        get-number-of-frames [get-export inst [word get-number-of-frames]]
        global-context-alloc [get-export inst [word global-context-alloc]]
        form-to-top [get-export inst [word form-to-top]]
        num-frames-i32 [func nfi [] [js-value-to-i32 [js-app get-number-of-frames]]]
        fill-word
        [func fill-word [jsp w]
          [let
            [src [word-to-byte-array w]
             sz [byte-array-size src]
             dst [byte-array-from-mem [js-value-to-i32 jsp] sz]]
            [for i 0 sz
              [byte-array-set dst i [byte-array-get src i]]]]]
        read-mem-as-word
        [func rmw [jsp sz]
          [let
            [ar [byte-array-from-mem [js-value-to-i32 jsp] sz]
             str [byte-array-to-string ar]]
            [string-to-word str]]]
        read-mem-byte
        [func rmb [jsp index]
          [let
            [ar [byte-array-from-mem [add [js-value-to-i32 jsp] index] 1]]
            [byte-array-get ar 0]]]
        alloc-word
        [func aw [w]
          [let
            [src [word-to-byte-array w]
             sz [byte-array-size src]
             vec [js-app list-alloc-byte sz]
             data [js-value-to-i32 [js-app list-data-byte-array vec]]
             dst [byte-array-from-mem data sz]]
            [for i 0 sz
              [byte-array-set dst i [byte-array-get src i]]]
            vec]]
        pform-to-form
        [func pf2f [pform]
          [ifs
            [is-identical [js-value-to-i32 pform] [i32 0]]
            [logq-abort null form]

            [js-value-to-i32 [js-app form-word-is pform]]
            [let
              [fw [js-app form-word-get pform]
               data [js-value-to-i32 [js-app list-data-byte-array fw]]
               sz [js-value-to-i32 [js-app list-size fw]]
               ar [byte-array-from-mem data sz]
               str [byte-array-to-string ar]]
              [form/word [string-to-word str]]]

            [js-value-to-i32 [js-app form-list-is pform]]
            [let
              [fl [js-app form-list-get pform]
               sz [js-value-to-i32 [js-app list-size fl]]
               gl [growable-list]]
              [for i 0 sz
                [push gl
                  [pf2f [js-app list-get-form fl i]]]]
              [form/list [clone-growable-to-frozen-list gl]]]

            [logq-abort unknown form type [identity pform]]]]]
        [let [empty-vec [js-app list-alloc-byte [i32 0]]]
          [test-assert-eq [i32 0] [js-app list-size empty-vec]]
          [let [js-ar [js-app parse-n empty-vec]
                l [first [js-value-to-array js-ar]]]
            [test-assert-eq [i32 0] [js-value-to-i32 [js-app list-size l]]]
            [js-app list-forms-free l]
            [js-app text-free empty-vec]]]
        [let
          [tests
            [list
              [pair [qlist] [word ' ']]
              [pair [qlist] [word '    ']]
              [pair [qlist a] [word 'a']]
              [pair [qlist abc] [word 'abc']]
              [pair [qlist kebab-123] [word 'kebab-123']]
              [pair [qlist []] [word '[]']]
              [pair [qlist [list]] [word '[list]']]
              [pair [qlist [i32 5]] [word '[i32 5]']]
              [pair [qlist [if b [i32 1] [i32 0]]] [word '[if b [i32 1] [i32 0]]']]
              [pair [qlist [list 0 1 2 3]] [word '[list 0 1 2 3]']]
              [pair [qlist [list 0 1 2 3 4 5 6 7 8 9]] [word '[list 0 1 2 3 4 5 6 7 8 9]']]
              [pair [qlist parsed also-parsed] [word 'parsed also-parsed']]
              [pair [qlist []] [word '[  ']]
              [pair [qlist [[]]] [word '[ [ ']]
              [pair [qlist abc xyz] [word 'abc xyz']]
              [pair [qlist abc [i32 789]] [word 'abc [i32 789]']]
              ]]
          [for-each test tests
            [let
              [expected [pair/fst test]
               w [alloc-word [pair/snd test]]
               js-ar [js-app parse-n w]
               fl [first [js-value-to-array js-ar]]
               sz [js-value-to-i32 [js-app list-size fl]]
               gl [growable-list]]
              [for i 0 sz
                [push gl [pform-to-form [js-app list-get-form fl i]]]]
              [test-assert-eq [size expected] sz]
              [let [actual [clone-growable-to-frozen-list gl]]
                [for i 0 sz
                [test-assert-form-eq [at expected i] [at actual i]]]]
              [js-app list-forms-free fl]
              [js-app text-free w]]]]

        [let
          [tests
            [list
              [pair [qlist] [word '[defn f [] [i32] [i32 0]] [def d [i32 5]]']]
              [pair [qlist] [word '[defn f [] [i32] [i32 2147483647]] [export f]']]
              [pair [qlist] [word '[defn f [] [i32] [if [i32 1] [i32 2] [i32 3]]] [export f]']]
              [pair [qlist] [word '[defn not [x [i32]] [i32] [if x [i32 0] [i32 1]]] [export not]']]
              [pair [qlist] [word '[defn not [x [i32]] [i32] [if p [i32 0] [i32 1]]] [export not]']]
;              [pair [qlist] [word '[defn f [] [i32] [i32 2147483648]]']]
              ]]
          [for-each test tests
            [let
              [expected [pair/fst test]
               w [alloc-word [pair/snd test]]
               parse-res [js-value-to-array [js-app parse-n w]]
               fl [first parse-res]
               sz [js-value-to-i32 [js-app list-size fl]]]
              [for i 0 sz
                [js-app form-to-top [js-app global-context-alloc] [js-app list-get-form fl i]]]
              ]]]]]]]

[defn test-realloc []
  [promise-then
    [read-parse-file-async [word llsimpleparse.wuns]]
    [func t [forms]
      [let
       [module [forms-to-module forms]
        mem [memory 1 9 0]
        byte-array-from-mem
        [func bafm [data sz]
          [byte-array-from-array-buffer [memory-buffer mem] data sz]]
        wasm-log
        [func wasm-log [data sz]
          [logq wasm-log
            [byte-array-to-string
              [byte-array-from-mem data sz]]]]
        wasm-log-i32
        [func wasm-log-i32 [n]
          [logq wasm-log-i32 [identity n]]]
        wasm-dump-mem
        [func wasm-dump-mem [p n]
          [let
            [ar [byte-array-from-mem p n]]
            [logq wasm-dump-mem [identity p] [identity n] [identity ar]]]]
        env [transient-kv-map]
        - [set-kv-map env [word mem] [to-js-value mem]]
        -- [set-kv-map env [word log] [to-js-value wasm-log]]
        --- [set-kv-map env [word log-i32] [to-js-value wasm-log-i32]]
        -f [set-kv-map env [word dump-mem] [to-js-value wasm-dump-mem]]
        import-map [transient-kv-map]
        ---- [set-kv-map import-map [word env] [kv-map-to-object env]]
        inst [wasm-instantiate module [kv-map-to-object import-map]]
        form-free [get-export inst [word form-free]]
        alloc-frames-validate-all [get-export inst [word alloc-frames-validate-all]]
        realloc [get-export inst [word realloc-debug]]
        get-number-of-frames [get-export inst [word get-number-of-frames]]
        num-frames-i32 [func nfi [] [js-value-to-i32 [js-app get-number-of-frames]]]
        fill-word
        [func fill-word [jsp w]
          [let
            [src [word-to-byte-array w]
             sz [byte-array-size src]
             dst [byte-array-from-mem [js-value-to-i32 jsp] sz]]
            [for i 0 sz
              [byte-array-set dst i [byte-array-get src i]]]]]
        read-mem-as-word
        [func rmw [jsp sz]
          [let
            [ar [byte-array-from-mem [js-value-to-i32 jsp] sz]
             str [byte-array-to-string ar]]
            [string-to-word str]]]
        read-mem-byte
        [func rmb [jsp index]
          [let
            [ar [byte-array-from-mem [add [js-value-to-i32 jsp] index] 1]]
            [byte-array-get ar 0]]]]

          [let
            [n-frames [num-frames-i32]
             p [js-app realloc 0 0 [i32 7]]
             q [js-app realloc p 7 [i32 14]]]
            ; if there are no allocations in between we should get the same pointer
            [test-assert-eq q p]
            [test-assert-eq [inc n-frames] [num-frames-i32]]
            [js-app realloc q [i32 14] 7]
            [js-app realloc q 7 0]
            [test-assert-eq p [js-app realloc 0 0 [i32 6]]]
            [js-app realloc q 6 0]]

          [let
            [n-frames [num-frames-i32]
             p [js-app realloc 0 0 7]
             q [js-app realloc 0 0 5]
             new-p [js-app realloc p 7 8]]
            [test-assert-not-eq new-p p]
            [test-assert-eq [add 3 n-frames] [js-app get-number-of-frames]]
            ; pop the top
            [js-app realloc new-p 8 0]
            [test-assert-eq [add 2 n-frames] [js-app get-number-of-frames]]
            ; expect we can grow the new top
            [test-assert-eq q [js-app realloc q 5 6]]
            [js-app realloc q 6 0]
            ; we should have popped all frames by now
            [test-assert-eq n-frames [js-app get-number-of-frames]]
            [js-app alloc-frames-validate-all]]
          [let
            [p [js-app realloc 0 0 7]
             q [js-app realloc 0 0 5]
             r [js-app realloc 0 0 6]]
            [fill-word q [word '12345']]
            ; shrink a non top frame, and expect the same pointer
            [test-assert-eq q [js-app realloc q 5 3]]
            [test-assert-eq [word 123] [read-mem-as-word q 3]]
            ; 4 char is overwritten when shrinking
            [test-assert-not-eq [word-to-char-code 4] [read-mem-byte q 3]]
            ; 5 char is overwritten when shrinking
            [test-assert-not-eq [word-to-char-code 5] [read-mem-byte q 4]]
            ; grow it within the same frame
            [test-assert-eq q [js-app realloc q 3 4]]
            [test-assert-eq [word 123] [read-mem-as-word q 3]]
            ; new byte is zeroed out
            [test-assert-eq 0 [read-mem-byte q 3]]
            ; grow it to its original size
            [test-assert-eq q [js-app realloc q 4 5]]
            [test-assert-eq [word 123] [read-mem-as-word q 3]]
            ; new bytes are zeroed out
            [test-assert-eq 0 [read-mem-byte q 3]]
            [test-assert-eq 0 [read-mem-byte q 4]]
            ; grow it beyond its original size, allocating a new frame
            [let [new-q [js-app realloc q 5 6]]
              [test-assert-not-eq q new-q]
              [test-assert-eq [word 123] [read-mem-as-word new-q 3]]
              [test-assert-eq 0 [read-mem-byte new-q 3]]
              [test-assert-eq 0 [read-mem-byte new-q 4]]
              [test-assert-eq 0 [read-mem-byte new-q 5]]
              [js-app realloc new-q 6 0]]
            [js-app realloc r 6 0]
            [js-app realloc p 7 0]]
          [let [big [js-app realloc 0 0 [i32 65536]]]
            [js-app alloc-frames-validate-all]
            [logq n-frames [js-app alloc-frames-validate-all]]
            [js-app realloc big [i32 65536] 0]]
          [logq n-frames [js-app alloc-frames-validate-all]]]]]]
