[import standard-library.wuns 0 1 2 3 4 assert when-not do abort log dec concat comment genword]

[func mk-i32 [x] [list [quote i32] x]]
[func is-power-of-2 [x] [eq [quote 0] [bitwise-and x [dec x]]]]

[wasm-import env memory [memory 0]]
[wasm-import env log-size-pointer [func [i32 i32] []]]

[wasm-func bump-alloc-init [] []
  [if [eq [load 2 0 [i32 0]] [i32 0]]
    [store 2 0 [i32 0] [i32 16]]
    [unreachable]]]

[wasm-func bump-free [p size] []
  [let [current-top [load 2 0 [i32 0]]
        popped-top [sub current-top size]]
    [if [eq popped-top p]
      [store 2 0 [i32 0] popped-top]
      [unreachable]]]]

[macro not-is-address-aligned [x]
  [let [n 4]
    [list [quote bitwise-and] [mk-i32 [dec n]] x]]]

[wasm-func bump-alloc [size] [i32]
  [if [le size [i32 0]] [unreachable]]
  [if [gt size [i32 65536]] [unreachable]]
  [if [not-is-address-aligned size] [unreachable]]
  [let
    [current-top [load 2 0 [i32 0]]
     - [if [eq current-top [i32 0]] [unreachable]]
     - [if [not-is-address-aligned current-top] [unreachable]]
     mem-size-bytes [bitwise-shift-left [memory.size 0] [i32 16]]
     - [if [gt current-top mem-size-bytes] [unreachable]]
     new-top [add current-top size]]
    [if [gt new-top mem-size-bytes] [unreachable]]
    [store 2 0 [i32 0] new-top]
    current-top]]

[macro align [n x]
  [assert n must not be zero]
  [assert [is-power-of-2 n] must be power of 2]
  [let [dn [dec n]]
    [list [quote bitwise-and]
      [list [quote add] [mk-i32 dn] x]
      [mk-i32 [bitwise-xor [i32 -1] dn]]]]]

[wasm-func test-log [] []
  [let [start [i32 32]
        end [i32 127]
        s [sub end start]
        alloc-size [align 4 s]
        p [bump-alloc alloc-size]]
    [loop [i [i32 0]]
      [if [lt i s]
        [let []
          [store8 0 0 [add p i] [add start i]]
          [continue i [add i [i32 1]]]]
        []]]
    [log-size-pointer s p]
    [bump-free p alloc-size]]]

[wasm-func f []
  [tuple [i32 10] [i32 20]]]

[wasm-func g []
  [f]]

[macro bump-alloc-init-passive [.. bytes]
  [let [s [size bytes]
        aligned-s [bitwise-and [add 3 s] [bitwise-xor -1 3]]
        genp [genword]]
    [list [quote let] [list genp [list [quote bump-alloc] [mk-i32 aligned-s]]]
      [list [quote memory.init]
        [list [quote data-passive-bytes] [list [quote quote] bytes]] 0
        genp [mk-i32 0] [mk-i32 s]]
      [list [quote tuple] [mk-i32 s] [mk-i32 aligned-s] genp]]]]

[wasm-func test-passive []
  [let [[s aligned-s p] [bump-alloc-init-passive 97 100 100 114 101 115 115]]
    [log-size-pointer s p]
    [bump-free p aligned-s]]]
