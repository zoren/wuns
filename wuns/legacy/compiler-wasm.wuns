[defn u32-word-to-leb-128 [w]
  [assert [not [is-negative w]] expected 32 bit ints]
  [let [res [mutable-list]]
    [loop [n w]
      [let
        [byte [bitwise-and n [quote 127]]
         nn [bitwise-shift-right n [quote 7]]]
        [if [is-zero nn]
          [push res byte]
          [do
            [push res [bitwise-ior byte [quote 128]]]
            [continue n nn]]]]]
    [freeze res]]]

[defn s32-word-to-leb-128 [value]
  [let [res [mutable-list]]
    [loop [value1 value]
      [let
        [byte [bitwise-and value1 [quote 127]]
         value2 [bitwise-shift-right value1 [quote 7]]
         sign-bit [bitwise-and byte [quote 64]]]
        [comment todo it seems we should swap the order here as we already have the sign bit]
        [if [or [and [is-zero value2] [not sign-bit]]
                [and [eq value2 -1]   sign-bit]]
          [push res byte]
          [do
            [push res [bitwise-ior byte [quote 128]]]
            [continue value1 value2]]]]]
    [freeze res]]]

[def i32.const [quote 0x41]]
[def local.get [quote 0x20]]
[def local.set [quote 0x21]]

[def empty-type [quote 0x40]]
[def i32 [quote 0x7f]]
[def f64 [quote 0x7c]]
[def immediate-u32 [quote immediate-u32]]
[def continue-type [quote continue-type]]

[def words-to-type
  [kv-map
    i32 [quote 0x7f]
    i64 [quote 0x7e]
    f32 [quote 0x7d]
    f64 [quote 0x7c]]]

[defn word-type-to-type-code [wt] [get words-to-type wt]]

[defn type-function [params results]
  [concat
    [quote [0x60]]
    [u32-word-to-leb-128 [size params]]
    params
    [u32-word-to-leb-128 [size results]]
    results]]

[def loop [quote 0x03]]
[def if [quote 0x04]]
[def else [quote 0x05]]
[def call [quote 0x10]]
[def end [quote 0x0b]]
[def br [quote 0x0c]]

[defn index-of-form [forms form]
  [let [s-forms [size forms]]
    [loop [i 0]
      [if [lt i s-forms]
        [if [eq-form form [at forms i]]
          i
          [continue i [inc i]]]
        -1]]]]

[def kind-function 0]

[defn word-to-codepoints [w]
  [let [ml [mutable-list]]
    [for i 0 [size w]
      [push ml [at-word w i]]]
    [freeze ml]]]

[defn word-to-length-bytes [name]
  [concat
    [u32-word-to-leb-128 [size name]]
    [word-to-codepoints name]]]

[defn wasm-export [name kind index]
  [concat
    [word-to-length-bytes name]
    [list kind]
    [u32-word-to-leb-128 index]]]

[defn wasm-import [module-name name import-desc]
  [concat
    [word-to-length-bytes module-name]
    [word-to-length-bytes name]
    import-desc]]

[def kind-memory [quote 0x02]]

[defn import-desc-mem-min [min]
  [concat
    [list kind-memory 0]
    [u32-word-to-leb-128 min]]]

[defn import-desc-mem-min-max [min max]
  [concat
    [list kind-memory 1]
    [u32-word-to-leb-128 min]
    [u32-word-to-leb-128 max]]]

[defn import-desc-func [index]
  [concat [list 0] [u32-word-to-leb-128 index]]]

[defn active-data-word [offset w]
  [concat [list 0 i32.const] [s32-word-to-leb-128 offset] [list end] [word-to-length-bytes w]]]

[defn passive-data-word [w]
  [concat [list 1] [word-to-length-bytes w]]]

[defn passive-data-bytes [bytes]
  [for i 0 [size bytes]
    [let [b [at bytes i]]
      [assert [not [is-negative b]] passive-data-bytes negative byte]
      [assert [le b [quote 255]] passive-data-bytes byte greater than 255]]]
  [concat [list 1] [u32-word-to-leb-128 [size bytes]] bytes]]

[defn decimal-word-to-i32 [dw]
  [if [eq-word [at-word dw 0] [quote 45]]
    [let [s [sub 0 [size dw]]]
      [loop [i [dec [size dw]] res 0 multi -1]
        [if [gt i 0]
          [let [c [at-word dw i]]
            [assert [and [le [quote 48] c] [le c [quote 57]]] not a decimal character neg]
            [assert [gt res [quote -214748364]] out of bounds]
            [continue
              i [dec i]
              res [add res [mul [sub c [quote 48]] multi]]
              multi [mul multi [quote 10]]]]
          res]]]
    [let [s [sub 0 [size dw]]]
      [loop [i -1 res 0 multi 1]
        [if [le s i]
          [let [c [at-word dw i]]
            [assert [and [le [quote 48] c] [le c [quote 57]]] not a decimal character pos]
            [assert [lt res [quote 214748364]] out of bounds]
            [continue
              i [dec i]
              res [add res [mul [sub c [quote 48]] multi]]
              multi [mul multi [quote 10]]]]
          res]]]]]

[def global-ctx-types [mutable-list]]
[def global-ctx-imports [mutable-list]]
[def global-ctx-functions [mutable-list]]
[def global-ctx-exports [mutable-list]]
[def global-ctx-codes [mutable-list]]
[def global-ctx-func-sigs [mutable-list]]
[def global-ctx-datas [mutable-list]]

[defn push-type [type]
  [let [index [index-of-form global-ctx-types type]]
    [if [is-negative index]
      [let [new-index [size global-ctx-types]]
        [push global-ctx-types type]
        new-index]
      index]]]

[defn type-list-to-code [type-list]
  [ifs
    [eq-form type-list []]
    empty-type

    [eq-form type-list [list i32]]
    i32

    [eq-form type-list [list f64]]
    f64

    [let
      [i [push-type [type-function [] type-list]]]
      [assert [lt i [quote 32]] not sure how to handle higher indexes]
      i]]]

[defn word-type-list-to-type-code [wtl]
  [if [has words-to-type wtl]
    [word-type-to-type-code wtl]
    [do
      [assert [is-tuple-type wtl] expected a tuple type]
      [let [ml [mutable-list]]
        [for i 1 [size wtl]
          [push ml [word-type-to-type-code [at wtl i]]]]
        [let
          [i [push-type [type-function [] ml]]]
          [assert [lt i [quote 32]] not sure how to handle higher indexes]
          i]]]]]

[defn push-code-byte [code-locals byte] [push [first code-locals] byte]]

[defn push-code-u32 [code-locals value] [push-all [first code-locals] [u32-word-to-leb-128 value]]]
[defn push-code-s32 [code-locals value] [push-all [first code-locals] [s32-word-to-leb-128 value]]]

[defn push-local [code-locals type]
  [let [locals [second code-locals]
        arity [third code-locals]
        index [add arity [div [size locals] 2]]]
    [push locals 1]
    [push locals type]
    index]]

[defn identity [x] x]

[def interpreter-context []]

[defn compile-form-mutable [local-ctx code form]
  [ifs
    [is-word form]
    [let [vars-index
      [loop [cur-ctx local-ctx]
        [if-not [hasq cur-ctx outer]
          [let [param-ctx [getq cur-ctx vars]
                pctx [get param-ctx form]]
            [assert [not [has param-ctx form]] not found in local ctx [identity form]]
            pctx]
          [let
            [- [assert [eq [size cur-ctx] 3] we need a local ctx and a outer ctx if not at root]
             vars [first cur-ctx]]
            [if [has vars form]
              [get vars form]
              [continue cur-ctx [getq cur-ctx outer]]]]]]]
      [log [concat [quote type from checker] [list [try-get-node-type form]]]]
      [push-code-byte code local.get]
      [push-code-u32 code [second vars-index]]
      [list [first vars-index]]]

    [eq-form form []]
    []

    [let [first-form [first form]
          args [rest form]
          s-form [size form]]
      [assert [is-word first-form] expected a word first]
      [ifs
        [eq-word first-form [quote tuple]]
        [let
          [res-types [mutable-list]]
          [for i 0 [size args]
            [comment do we actually want to concat them [i32 i32] [i32] we be surprising]
            [push-all res-types [compile-form-mutable local-ctx code [at args i]]]]
          [freeze res-types]]

        [eq-word first-form [quote i32]]
        [let
          [- [assert [eq [size args] 1] only support decimal integers]
           dw [decimal-word-to-i32 [first args]]]
          [push-code-byte code i32.const]
          [push-code-s32 code dw]
          [list i32]]

        [eq-word first-form [quote if]]
        [let
          [s-args [dec s-form]
           - [assert [or [eq s-args 2] [eq s-args 3]] if expects 2 or 3 arguments]
           ct [compile-form-mutable local-ctx code [first args]]
           - [push-code-byte code if]
           wtl-code [word-type-list-to-type-code [try-get-node-type form]]
           - [push-code-byte code wtl-code]
           - [assert [and [eq [size ct] 1] [eq [at ct 0] i32]] condition not i32]
           tt [compile-form-mutable local-ctx code [second args]]]
          [if [eq-form tt [list continue-type]]
            [let []
            ]
            [let []
              [if [eq s-args 3]
                [let [- [push-code-byte code else]
                      ft [compile-form-mutable local-ctx code [third args]]]
                  [assert [eq-form tt ft] if branch types differ [identity tt] [identity ft]]]
                [assert [eq s-args 2] if expects 2 or 3 arguments]]
              [push-code-byte code end]
              tt]]]

        [or
          [eq-word first-form [quote let]]
          [eq-word first-form [quote loop]]]
        [let
          [bindings [first args]
           var-values [mutable-list]
           let-loop-ctx [list var-values local-ctx first-form]
           n-of-bindings [size bindings]
           is-loop [eq-word first-form [quote loop]]]
          [assert [is-list bindings] expects a list of bindings]
          [assert [is-even n-of-bindings] expects an even number of bindings]
          [for-inc i 0 2 n-of-bindings
            [let
              [var [at bindings i]
               value [at bindings [inc i]]
               val-type [compile-form-mutable let-loop-ctx code value]]
              [ifs
                [eq-word [quote -] var]
                [assert [eq [size val-type] 0] binding - expects unit type]

                [is-word var]
                [let
                  [- [assert [not [is-tuple-type val-type]] binding expects a single type]
                   t [word-type-to-type-code val-type]
                   local-index [push-local code t]]
                  [push-code-byte code local.set]
                  [push-code-u32 code local-index]
                  [push var-values var]
                  [push var-values [list t local-index]]]

                [let [s [size var]]
                  [assert [is-list var] expects a word or list]
                  [assert [is-tuple-type val-type] binding expects a tuple type]
                  [assert [eq s [dec [size val-type]]] binding expects matching type arity]
                  [for i 0 s
                    [let
                      [t [at val-type [inc i]]
                       local-index [push-local code t]]
                      [push-code-byte code local.set]
                      [push-code-u32 code local-index]
                      [push var-values [at var [dec [sub s i]]]]
                      [push var-values [list t local-index]]]]]]]]
          [if is-loop
            [do
              [push-code-byte code loop]
              [do
                [push-code-byte code [word-type-list-to-type-code [try-get-node-type form]]]
                [for i 2 [dec [size form]]
                  [compile-form-mutable let-loop-ctx code [at form i]]]
                [let [last-body-type [compile-form-mutable let-loop-ctx code [last args]]]
                  [push-code-byte code end]
                  last-body-type]]]
            [do
              [for i 2 [dec [size form]]
                [compile-form-mutable let-loop-ctx code [at form i]]]
              [compile-form-mutable let-loop-ctx code [last form]]]]]

        [eq-word first-form [quote continue]]
        [let
          [loop-ctx
           [loop [cur-ctx local-ctx]
             [if [eq [size cur-ctx] 1]
               [do [log [quote continue not in a loop]]
                   [abort]]
               [do
                [assert [eq [size cur-ctx] 3] we need a local ctx and a outer ctx if not at root]
                [if [eq-word [third cur-ctx] [quote loop]]
                  [first cur-ctx]
                  [continue cur-ctx [second cur-ctx]]]]]]]
          [for-inc i 1 2 s-form
            [let
              [local [get loop-ctx [at form i]]
               arg-type [compile-form-mutable local-ctx code [at form [inc i]]]]
              [comment todo check types]
              [push-code-byte code local.set]
              [push-code-u32 code [second local]]]]
          [push-code-byte code br]
          [push-code-u32 code 1]
          [list continue-type]]

        [eq-word [quote data-passive-word] [first form]]
        [let [index [size global-ctx-datas]
              w [at form 1]]
          [push global-ctx-datas [passive-data-word w]]
          [push-code-byte code i32.const]
          [push-code-s32 code index]
          [list i32]]

        [eq-word [quote data-passive-bytes] [first form]]
        [let [index [size global-ctx-datas]
              byte-list [at form 1]]
          [push global-ctx-datas [passive-data-bytes byte-list]]
          [list]]

        [let [instruction [get-instruction first-form]]
          [if [ne [size instruction] 0]
            [let [arity [getq instruction arity]
                  immediate-parameters [getq instruction immediate-parameters]
                  parameters [getq instruction parameters]
                  opcode [getq instruction opcode]]
              [assert [eq arity [size args]] instruction arity mismatch [identity first-form]]
              [for i 0 [size parameters]
                [comment todo also check typessssss]
                [compile-form-mutable local-ctx code [at form [inc [add i [size immediate-parameters]]]]]]
              [if [is-list opcode]
                [for i 0 [size opcode]
                  [push-code-byte code [at opcode i]]]
                [push-code-byte code opcode]]
              [for i 0 [size immediate-parameters]
                  [assert [eq-word [at immediate-parameters i] immediate-u32] immediate parameter type mismatch]
                  [comment [push-code-u32 code [context-eval interpreter-context [at form [inc i]]]]]]
              [getq instruction results]]
            [if-not [has global-ctx-func-sigs first-form]
              [do [log [concat [quote unknown instruction] [list first-form]]] [abort]]
              [let [func-sig [get global-ctx-func-sigs first-form]
                    parameter-types [first func-sig]]
                [assert [eq [size parameter-types] [size args]] parameter arity mismatch [list first-form [size parameter-types] [size args]]]
                [for i 0 [size args]
                  [comment todo also check types]
                  [compile-form-mutable local-ctx code [at args i]]]
                [push-code-byte code call]
                [comment here we need the number of imported functions maybe use a temporary data structure
                  [push-code-u32 code [div sig-index 2]]]
                [second func-sig]]]
            ]]]]]]

[defn data-passive-bytes [byte-list]
  [let [index [size global-ctx-datas]]
    [push global-ctx-datas [passive-data-bytes byte-list]]
    index]]

[defn locals-to-bytes [locals]
  [let [bytes [mutable-list]
        number-of-locals [size locals]]
    [push-all bytes [u32-word-to-leb-128 [div number-of-locals 2]]]
    [for-inc i 0 2 number-of-locals
      [push-all bytes [u32-word-to-leb-128 [at locals i]]]
      [push bytes [at locals [inc i]]]]
    bytes]]

[defn code-to-bytes [locals instructions]
  [let
    [bytes [concat [locals-to-bytes locals] instructions]]
    [concat [u32-word-to-leb-128 [size bytes]] bytes]]]

[defn parse-type-list [types]
  [let [ml [mutable-list]]
    [for i 0 [size types]
      [let
        [type-word [at types i]
         type-code
         [ifs
          [eq-word [quote i32] type-word]
          i32

          [do
            [log [quote unknown]]
            [abort]]]]
        [push ml type-code]]]
    ml]]

[defn comp-const-expr [form]
  [if [eq-word [quote data-passive-bytes] [first form]]
    [let [index [size global-ctx-datas]]
      [push global-ctx-datas [passive-data-bytes [rest form]]]
      [list index [dec [size form]]]]
    [abort]]]

[defn dec-word-to-i32 [dw]
  [let [s [sub 0 [size dw]]]
    [loop [i -1 res 0 multi 1]
      [if [le s i]
        [let [c [at dw i]]
          [assert [and [le [quote 48] c] [le c [quote 57]]] not a decimal character]
          [assert [lt res [quote 214748364]] out of bounds]
          [continue i [dec i]
                    res [add res [mul [sub c [quote 48]] multi]]
                    multi [mul multi [quote 10]]]]
        res]]]]

[defn compile-top-level-form [form]
  [ifs
    [eq-word [quote func] [first form]]
    [let [name [second form]
          params [third form]
          param-ctx [transient-kv-map]
          parameter-type-list [mutable-list]
          -
          [for i 0 [size params]
            [let [p [at params i]
                  t [try-get-node-type p]
                  type-code [word-type-to-type-code t]]
              [log [concat [quote type from checker param] [list p [try-get-node-type p]]]]
              [set param-ctx p [kv-map type-code type-code index i]]
              [push parameter-type-list type-code]]]
          func-ctx [list param-ctx]
          parameter-type-list [freeze parameter-type-list]
          locals [mutable-list]
          code [mutable-list]
          code-locals [list code locals [size params]]
          -
          [for i 4 [dec [size form]]
            [comment remember to check type is empty maybe even drop unused and warn instead]
            [compile-form-mutable func-ctx code-locals [at form i]]]
          result-type [compile-form-mutable func-ctx code-locals [last form]]
          type-index
          [push-type
            [type-function parameter-type-list result-type]]
          import-count [size global-ctx-imports]
          functions global-ctx-functions
          func-index [div [size global-ctx-func-sigs] 2]]
      [push global-ctx-func-sigs name]
      [push global-ctx-func-sigs [list parameter-type-list result-type]]

      [push functions type-index]
      [push global-ctx-exports
        [wasm-export name kind-function func-index]]
      [push code end]
      [push global-ctx-codes [code-to-bytes locals code]]
      ]

    [eq-word [quote external-func] [first form]]
    [let [parameter-type-list [parse-type-list [at form 3]]
          result-type [parse-type-list [at form 4]]
          tf [type-function parameter-type-list result-type]
          - [log [list [quote tf] tf]]
          type-index [push-type tf]
          name [at form 2]]
      [push global-ctx-func-sigs name]
      [push global-ctx-func-sigs [list parameter-type-list result-type type-index]]
      [push global-ctx-imports
        [wasm-import [at form 1] name [import-desc-func type-index]]]]

    [eq-word [quote wasm-import] [first form]]
    [let [module-name [second form]
          field-name [third form]
          import-desc-syntax [fourth form]
          fw [first import-desc-syntax]
          import-desc
          [ifs
            [eq-word [quote memory] fw]
            [ifs
              [eq [size import-desc-syntax] 2]
              [import-desc-mem-min [dec-word-to-i32 [second import-desc-syntax]]]

              [eq [size import-desc-syntax] 3]
              [import-desc-mem-min-max [second import-desc-syntax] [third import-desc-syntax]]

              [do [log [quote mem wrong arity]] [abort]]]

            [eq-word [quote func] fw]
            [let [parameter-type-list [parse-type-list [second import-desc-syntax]]
                  result-type [parse-type-list [third import-desc-syntax]]
                  tf [type-function parameter-type-list result-type]
                  type-index [push-type tf]]
              [push global-ctx-func-sigs field-name]
              [push global-ctx-func-sigs [list parameter-type-list result-type type-index]]
              [import-desc-func type-index]
              ]

            [do [log [quote comp-import-desc not implemented]] [abort]]
            ]]
      [push global-ctx-imports
        [wasm-import module-name field-name import-desc]]]

    [eq-word [quote constant] [first form]]
    [let [name [second form]
          value [third form]]
      []]

    [comment todo
      [context-eval interpreter-context form]]]]

[defn vector-section [section-id content]
  [let [n-of-bytes [size content]]
    [if n-of-bytes
      [concat [list section-id] [u32-word-to-leb-128 n-of-bytes] content]
      [list]]]]

[defn vector-section-concat [section-id elements]
  [let [n-of-elements [size elements]]
    [if n-of-elements
      [vector-section section-id [concat [u32-word-to-leb-128 n-of-elements] [concat-lists elements]]]
      [list]]]]

[defn func-section [func-indexes]
  [let [n-of-funcs [size func-indexes]]
    [if n-of-funcs
      [vector-section 3 [concat [u32-word-to-leb-128 n-of-funcs] func-indexes]]
      [list]]]]

[defn ctx-to-module []
  [let [s-datas [size global-ctx-datas]]
    [concat
      [quote [0 97 115 109
              1 0 0 0]]
      [vector-section-concat 1 global-ctx-types]
      [vector-section-concat 2 global-ctx-imports]
      [func-section global-ctx-functions]
      [vector-section-concat [quote 7] global-ctx-exports]
      [if s-datas [vector-section [quote 12] [u32-word-to-leb-128 s-datas]] [list]]
      [vector-section-concat [quote 10] global-ctx-codes]
      [if s-datas [vector-section-concat [quote 11] global-ctx-datas] [list]]]]]

[defn push-wasm-import [module-name field-name import-desc]
  [push global-ctx-imports
    [wasm-import module-name field-name import-desc]]]

[defn import-func [name parameter-type-list result-type]
  [let [tf [type-function parameter-type-list result-type]
        type-index [push-type tf]]
    [push global-ctx-func-sigs name]
    [push global-ctx-func-sigs [list parameter-type-list result-type type-index]]
    [import-desc-func type-index]]]

[defn push-wasm-import-func [module-name func-name parameter-type-list result-type]
  [push-wasm-import module-name func-name
    [import-func func-name parameter-type-list result-type]]]

[defn compile-top-forms-to-module [forms]
  [for i 0 [size forms]
    [let [f [at forms i]]
      [check-top-form f]
      [compile-top-level-form f]]]
  [log [list [quote node-types] node-types]]
  [ctx-to-module]]

