[def tag-word [i32.const 1]]
[def tag-list [i32.const 3]]

[defn word-bytes [dw w]
  [let [s [word-byte-size w]
        l [mutable-list-of-size [i32.const 3]]
        byte-form [mutable-list-of-size [inc s]]]
    [set-array l 0 dw]
    [set-array l 1 [list [quote i32] [int-to-word tag-word] [int-to-word s]]]
    [set-array byte-form 0 [quote i8]]
    [for i 0 s
      [set-array byte-form [inc i] [int-to-word [char-code-at w i]]]]
    [set-array l 2 byte-form]
    l]]

[defn form-to-bytes-fn [dw f]
  [ifs
    [is-word f]
    [word-bytes dw f]

    [is-list f]
    [let [s [size f]
          l [mutable-list-of-size [add s [i32.const 2]]]
          data-form [mutable-list-of-size [inc s]]]
      [set-array l 0 dw]
      [set-array l 1 [list [quote i32] [int-to-word tag-list] [int-to-word s]]]
      [for i 0 s
        [set-array l [add 2 i] [recur [quote data] [at f i]]]]
      l]

    [logq-abort not a word or list]]]

[defmacro defselfmacro [name params .. bodies]
  [list [quote def] name
    [list [quote meta-assoc]
      [concat [list [quote func] name params] bodies]
      [mk-quote [quote self-macro]] 1]]]

[defselfmacro form-to-bytes [f]
  [form-to-bytes-fn [quote active-data] f]]

[defn defnt-fn [name return-type type-params .. bodies]
  [log [list [quote defnt] name return-type type-params]]
  [assert [is-word name] name must be a word]
  [assert [is-list type-params] params must be a list]
  [let [params [mutable-list-of-size [half [size type-params]]]
        - [for-pair i 0 [size type-params]
            [set-array params [half i] [meta-assoc [at type-params i] [quote type] [at type-params [inc i]]]]]
        t-params [with-meta params [assoc [meta type-params] [quote type] return-type]]]
    [make-func-macro-list [quote func] name t-params bodies]]]

[defmacro defnt [name return-type type-params .. bodies]
  [make-func-macro-list [quote func] name type-params bodies]]
