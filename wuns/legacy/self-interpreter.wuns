[load std.wuns]

[type
  rt-value []
  [union
    [i32 i32]
    [f64 f64]
    ]

  inst []
  [union
    [const rt-value]
    [get-var i32]
    [set-var i32 inst]
    [fcall inst [list inst]]
    [call inst [list inst]]
    [function function]
    [if inst inst inst]
    [loop inst]
    [continue]
    [insts [list inst]]
  ]

  function []
  [record
    [n-of-params i32]
    [has-rest-param i32]
    [n-of-locals i32]
    [body inst]]
]

[defn function-stack-size [f]
  [add [add [function/n-of-params f] [function/has-rest-param f]] [function/n-of-locals f]]]

[defn function-bind [f args]
  [assert [not [function/has-rest-param f]] function-bind does not support rest parameters]
  [assert [eq [size args] [function/n-of-params f]] function-bind requires the same number of arguments as the function]
  [for i 0 [size args]
    ]]

[type mutable-list [a]
  [union]]

[def-extern mutable-list-of-size [type-scheme [a] [func [i32 a] [mutable-list a]]]]
[def-extern mutable-list-get [type-scheme [a] [func [[mutable-list a] i32] a]]]
[def-extern set-array [type-scheme [a] [func [[mutable-list a] i32 a] [tuple]]]]

[defn get-rt-i32 [rtv]
  [match rtv
    [rt-value/i32 i] i
    [logq-abort get-rt-i32 not an i32]]]

[defn get-rt-func-2 [rtv]
  [match rtv
    [rt-value/func-2 f] f
    [logq-abort get-rt-i32 not a func-2]]]

[type stack []
  [record
    [top [atom i32]]
    [mut-list [mutable-list rt-value]]]]

[def rt-0 [rt-value/i32 0]]

[defn stack-make [init-size]
  [stack
    [atom 0]
    [mutable-list-of-size init-size rt-0]]]

[defn stack-push [stack n]
  [when n
    [let-do [top-atom [stack/top stack]
            new-top [add [atom-get top-atom] n]]
      [assert [le-s new-top [size [stack/mut-list stack]]] stack-push out of bounds]
      [atom-set top-atom new-top]]]]

[defn stack-pop [stack n]
  [when n
    [let-do [top-atom [stack/top stack]
             new-top [sub [atom-get top-atom] n]]
      [assert [le-s 0 new-top] stack-pop out of bounds]
      [atom-set top-atom new-top]]]]

[defn stack-get [stack index]
  [mutable-list-get [stack/mut-list stack] [sub [atom-get [stack/top stack]] index]]]

[defn stack-set [stack index value]
  [set-array [stack/mut-list stack] [sub [atom-get [stack/top stack]] index] value]]

[defn eval-inst [stack instruction]
  [let-do [current-loop [atom [none]]]
    [[func go [inst]
      [match inst
        [inst/const v] v
        [inst/if ci t f]
        [match [go ci]
          [rt-value/i32 c] [if c [go t] [go f]]
          [logq-abort if condition must be an i32]]
        [inst/get-var i] [stack-get stack i]
        [inst/set-var i val-inst] [let-do [v [go val-inst]] [stack-set stack i v] v]
        [inst/insts insts]
        [do
          [assert [not [is-empty insts]] eval-inst requires a non-empty list of instructions]
          [for i 0 [size insts]
            [go [at insts i]]]
          [go [at insts -1]]]
        [inst/fcall f args]
        [switch [size args]
          [i32 2] [[get-rt-func-2 [go f]] [go [at args 0]] [go [at args 1]]]
          [logq-abort fcall requires exactly two arguments]]
        [inst/recur args]
        [do
          ]
        [inst/loop body]
        [do
          [atom-set current-loop [some body]]
          [go body]]
        [inst/continue]
        [if-let [loop [atom-get current-loop]]
          [go loop]
          [logq-abort continue outside of loop]]
      [logq-abort eval-inst not implemented]]]
   instruction]]]

[defn decimal-word-to-i32 [dw]
  [if [eq [char-code-at dw 0] [i32 45]]
    [logq-abort negative numbers are not supported]
    [let [s [sub 0 [word-byte-size dw]]]
      [[func go [i res multi]
        [if [le-s s i]
          [let-do [c [char-code-at dw i]]
            [assert [and [le-s [i32 48] c] [le-s c [i32 57]]] not a decimal character pos]
            [assert [lt-s res [i32 214748364]] out of bounds]
            [go
              [dec i]
              [add res [mul [sub c [i32 48]] multi]]
              [mul multi [i32 10]]]]
          res]]
          -1 0 1]]]]

[defn decimal-word-to-64 [dw]
  [if [eq [char-code-at dw 0] [i32 45]]
    [logq-abort negative numbers are not supported]
    [let [s [sub 0 [word-byte-size dw]]]
      [[func go [i res multi]
        [if [le-s s i]
          [let-do [c [char-code-at dw i]]
            [assert [and [le-s [i32 48] c] [le-s c [i32 57]]] not a decimal character pos]
            [assert [lt-s res [i32 214748364]] out of bounds]
            [go
              [dec i]
              [add res [mul [sub c [i32 48]] multi]]
              [mul multi [i32 10]]]]
          res]]
          -1 [f64 0] [f64 1]]]]]

[type compiler-context []
  [record
    [number-of-locals [atom i32]]
    [local-vars [transient-kv-map word i32]]
    [current-func-name [atom [option word]]]
    [current-func-params [atom [list i32]]]
    [has-non-tail-recur [atom i32]]
    ]]

[defn make-local-context []
  [compiler-context
    [atom 0]
    [transient-kv-map]
    [atom [some [word deez]]]
    [atom [list]]
    [atom 0]]]

[defn make-tmp-lvar [lctx]
  [inc [inc-atom [compiler-context/number-of-locals lctx]]]]

[defn make-lvar [lctx var-name]
  [let-do [index [make-tmp-lvar lctx]]
    [set-kv-map [compiler-context/local-vars lctx] var-name index]
    index]]

[defn get-lvar-index [lctx var-name]
  [get [compiler-context/local-vars lctx] var-name]]

[type pair [a b] [record [fst a] [snd b]]]

[defn comp [lctx is-tail-position form]
  [match form
    [form/word w]
    [inst/get-var [get [compiler-context/local-vars lctx] w]]

    [form/list l]
    [match [first l]
      [form/word fw]
      [switch fw
        [word i32]
        [inst/const [rt-value/i32 [decimal-word-to-i32 [form-to-word [second l]]]]]

        [word if]
        [inst/if
          [comp lctx 0 [second l]]
          [comp lctx is-tail-position [third l]]
          [comp lctx is-tail-position [fourth l]]]

        [word let]
        [inst/insts
          [concat
            [list-map pair [pairwise [form-to-list [second l]]]
              [let
                [var-index [make-lvar lctx [form-to-word [first pair]]]]
                [inst/set-var var-index [comp lctx 0 [second pair]]]]]
            [list [comp lctx is-tail-position [third l]]]]]

        [word intrinsic]
        [do
          [assert [eq 3 [size l]] intrinsic requires exactly two arguments]
          [assert [eq-word [form-to-word [second l]] [word instructions]] intrinsic requires the second argument to be instructions]
          [inst/const
            [switch [form-to-word [third l]]
              [word i32.eq]
              [rt-value/func-2
                [func i32.eq [rta rtb] [rt-value/i32 [eq [get-rt-i32 rta] [get-rt-i32 rtb]]]]]
              [word i32.add]
              [rt-value/func-2
                [func i32.add [rta rtb] [rt-value/i32 [add [get-rt-i32 rta] [get-rt-i32 rtb]]]]]
              [word i32.sub]
              [rt-value/func-2
                [func i32.sub [rta rtb] [rt-value/i32 [sub [get-rt-i32 rta] [get-rt-i32 rtb]]]]]
              [logq-abort intrinsic not implemented]]]]

        [if-let [current-func-name [atom-get [compiler-context/current-func-name lctx]]]
          [if [eq-word current-func-name fw]
            [let-do
              [args [rest l]
               params [atom-get [compiler-context/current-func-params lctx]]]
              [assert [eq [size params] [size args]] comp requires the same number of arguments as the function]
              [if is-tail-position
                [let-do [param-tmp-vars [list-map p params [pair p [make-tmp-lvar lctx]]]]
                  [assert [eq [size params] [size args]] comp requires the same number of arguments as the function]
                  [inst/insts
                    [concat
                      [concat
                        [list-init-func [size params]
                            [func bind [i]
                              [inst/set-var [pair/snd [at param-tmp-vars i]] [comp lctx 0 [at args i]]]]]
                          [list-map pp param-tmp-vars
                            [inst/set-var [pair/fst pp] [inst/get-var [pair/snd pp]]]]]
                      [list [inst/continue]]]]]
                [do
                  [atom-set [compiler-context/has-non-tail-recur lctx] 1]
                  [inst/call [f] [list-map a args [comp lctx 0 a]]]]]]
            [logq-abort call on word not implemented]]
          [logq-abort call on word not implemented]]]

      [form/list fl]
      [switch [form-to-word [first fl]]
        [word func]
        [let-do [fname [form-to-word [second fl]]
                 param-indexes [list-map p [form-to-list [third fl]] [make-lvar lctx [form-to-word p]]]
                 body [fourth fl]
                 args [rest l]]
          [assert [eq [size param-indexes] [size args]] comp requires the same number of arguments as the function]
          [atom-set [compiler-context/current-func-name lctx] [some fname]]
          [atom-set [compiler-context/current-func-params lctx] param-indexes]
          [let [cbody [comp lctx 1 body]]
            [if [atom-get [compiler-context/has-non-tail-recur lctx]]
              [inst/call
                [inst/function
                  [function
                    [size param-indexes]
                    0
                    [atom-get [compiler-context/number-of-locals lctx]]
                    cbody]]
                [list-map a args [comp lctx 0 a]]]
              [inst/insts
                [concat
                  [list-init-func [size param-indexes]
                    [func bind [i]
                      [inst/set-var [at param-indexes i] [comp lctx 0 [at args i]]]]]
                  [list [inst/loop cbody]]]]]]]

        [inst/fcall
          [comp lctx 0 [first l]]
          [list-map a [rest l] [comp lctx 0 a]]]]]]]

[defn rt-value-to-form [v]
  [match v
    [rt-value/i32 i] [flist [quote i32] [form/word [int-to-word i]]]
    [logq-abort rt-value-to-form not implemented]]]

[defn test-fn [expected given-form]
  [log given-form]
  [let-do [ctx [make-local-context]
        inst [comp ctx 0 given-form]
        n [atom-get [compiler-context/number-of-locals ctx]]
        - [log n]
        stack [stack-make n]
        - [stack-push stack n]
        actual [rt-value-to-form [eval-inst stack inst]]]
    [when-not [eq-form expected actual]
      [logq [quote [test passed]]]
      [logq [quote [test failed]]]
      [logq expected [identity expected]]
      [logq actual [identity actual]]]]]

[defexpr test [expected given-form]
  [test-fn expected given-form]]

[defn run-tests []
  [test [i32 5] [i32 5]]
  [test [i32 6] [if [i32 5] [i32 6] [i32 7]]]
  [test [i32 7] [if [i32 0] [i32 6] [i32 7]]]

  [test [i32 5] [let [x [i32 5]] x]]
  [test [i32 5] [let [x [i32 9]] [i32 5]]]
  [test [i32 5] [[intrinsic i32.add] [i32 2] [i32 3]]]
  [test [i32 5] [[intrinsic i32.sub] [i32 9] [i32 4]]]
  [test [i32 0] [[intrinsic i32.eq] [i32 9] [i32 4]]]
  [test [i32 1] [[intrinsic i32.eq] [i32 4] [i32 4]]]
  [test [i32 55]
    [[func gauss-tail [res n]
      [if n
        [gauss-tail [[intrinsic i32.add] res n] [[intrinsic i32.sub] n [i32 1]]]
        res]]
      [i32 0] [i32 10]]]
  [test [i32 55]
    [[func gauss-tail-swapped [n res]
      [if n
        [gauss-tail-swapped [[intrinsic i32.sub] n [i32 1]] [[intrinsic i32.add] res n]]
        res]]
      [i32 10] [i32 0]]]
  [test [i32 55]
    [[func gauss-direct [n]
      [if n
        [[intrinsic i32.add] n [gauss-direct [[intrinsic i32.sub] n [i32 1]]]]
        [i32 0]]]
      [i32 10]]]
      ]

[defn gauss-direct [n]
  [if n
    [[intrinsic i32.add] n [gauss-direct [[intrinsic i32.sub] n [i32 1]]]]
    [i32 0]]]

[log [gauss-direct [i32 10]]]
[log [gauss-direct [i32 100]]]
