[load ast.wuns]

[type local-descriptor-kind []
  [union
    [internal-func wuns-func]
    [let]
    [parameter]]]

[type local-descriptor []
  [record
    [kind local-descriptor-kind]
    [form form]]]

[type local-context []
  [union
    [top]
    [local
      [transient-kv-map word local-descriptor]
      local-context]]]

[defn try-get-local [lctx name]
  [[func loop [cur-ctx]
    [match cur-ctx
      [local-context/top]
      [option/none]

      [local-context/local map rest]
      [if-let [desc [try-get map name]]
        [option/some desc]
        [loop rest]]]]
    lctx]]

[type global-descriptor []
  [union
    [union-ctor]]]

[type bind-ast-errors []
  [union
    [local-redefined]
    [global-redefined]
    [variable-unbound]
    [not-a-union-ctor]]]

[type tail-position []
  [union
    [no]
    [tail]]]

[type fact []
  [union
    [recursive-call wuns-func wuns]
    [tail-recursive-call wuns-func wuns]]]

[type binder []
  [record
    [bind-ast [func [wuns] [tuple]]]
    [errors [atom [linked-list [pair word-with-form bind-ast-errors]]]]
    [db [atom [linked-list fact]]]]]

[defn mk-bind-db []
  [let
    [errors [atom [linked-list/nil]]
     push-error [func pe [name err] [push errors [pair name err]]]
     def-ctx [transient-kv-map]
     db [atom [linked-list/nil]]
     set-def
     [func set-def [wwf-name desc]
      [let-do [name [word-with-form/word wwf-name]]
        [when [has def-ctx name]
          [push-error wwf-name [bind-ast-errors/global-redefined]]]
        [set-kv-map def-ctx name [pair desc wwf-name]]]]
     set-local
     [func set-local [lctx wwf-name desc-kind]
      [let-do [name [word-with-form/word wwf-name]]
        [when [has lctx name]
          [push-error wwf-name [bind-ast-errors/local-redefined]]]
        [set-kv-map lctx name [local-descriptor desc-kind [word-with-form/form wwf-name]]]]]]
     [letfn [
      [func bind-func [lctx func]
        [let-do
          [name [wuns-func/name func]
           new-ctx-map [transient-kv-map]
           new-ctx [local-context/local new-ctx-map lctx]]
          [set-local new-ctx-map name [local-descriptor-kind/internal-func func]]
          [for-each p [wuns-func/parameters func]
            [set-local new-ctx-map p [local-descriptor-kind/parameter]]]
          [when-let [r [wuns-func/rest-param func]]
            [set-local new-ctx-map r [local-descriptor-kind/parameter]]]
          [bind-ast new-ctx [tail-position/tail] [wuns-func/body func]]]]
     [func bind-ast [lctx tail-pos-info ast]
      [match ast
        [wuns/var wwf]
[comment
          [let [w [word-with-form/word wwf]]
          [if-let [desc [try-get-local lctx w]]
            [bound-ast/var-local wwf]
            [do
              [when-not [has def-ctx w]
                [push-error wwf [bind-ast-errors/variable-unbound]]]
              [bound-ast/var-global wwf]]]]]

        [wuns/literal l]
        [do]

        [wuns/intrinsic l]
        [do
          [comment check if valid intrinsic]
          ]

        [wuns/if c t e]
        [do
          [bind-ast lctx [tail-position/no] c]
          [bind-ast lctx tail-pos-info t]
          [bind-ast lctx tail-pos-info e]]

        [wuns/switch value cases opt-default]
        [do
          [bind-ast lctx [tail-position/no] value]
          [for-each case cases
            [bind-ast lctx tail-pos-info [pair/snd case]]]
          [when-let [d opt-default]
            [bind-ast lctx tail-pos-info d]]]

        [wuns/match value cases opt-default]
        [do
          [bind-ast lctx [tail-position/no] value]
          [for-each c cases
            [let-do
              [match-pattern [pair/fst c]
               ctor-name [match-pattern/ctor match-pattern]
               new-ctx-map [transient-kv-map]
               new-ctx [local-context/local new-ctx-map lctx]]
              [if-let [def-desc [try-get def-ctx [word-with-form/word ctor-name]]]
                [match [pair/fst def-desc]
                  [global-descriptor/union-ctor]
                  [do]
                  [push-error ctor-name [bind-ast-errors/not-a-union-ctor]]]
                [push-error ctor-name [bind-ast-errors/variable-unbound]]]
              [for-each p [match-pattern/params match-pattern]
                [set-local new-ctx-map p [local-descriptor-kind/parameter]]]
              [bind-ast new-ctx tail-pos-info [pair/snd c]]]]
          [when-let [d opt-default]
            [bind-ast lctx tail-pos-info d]]]

        [wuns/do forms]
        [when-not [is-empty forms]
          [for-each form [slice forms 0 [dec [size forms]]] [bind-ast lctx [tail-position/no] form]]
          [bind-ast lctx tail-pos-info [last forms]]]

        [wuns/let bindings body]
        [let-do
          [new-ctx-map [transient-kv-map]
           new-ctx [local-context/local new-ctx-map lctx]]
          [for-each binding bindings
            [bind-ast new-ctx [tail-position/no] [pair/snd binding]]
            [set-local new-ctx-map [pair/fst binding] [local-descriptor-kind/let]]]
          [bind-ast new-ctx tail-pos-info body]]

        [wuns/letfn functions body]
        [let-do
          [new-ctx-map [transient-kv-map]
           new-ctx [local-context/local new-ctx-map lctx]]
          [for-each function functions
            [set-local new-ctx-map [wuns-func/name function] [local-descriptor-kind/let]]]
          [for-each function functions
            [bind-func new-ctx function]]
          [bind-ast new-ctx tail-pos-info body]]

        [wuns/def name value]
        [set-def name [bind-ast lctx [tail-position/no] value]]

        [wuns/func func]
        [bind-func lctx func]

        [wuns/call-word wwf form-args]
        [let-do
          [w [word-with-form/word wwf]]
          [if-let [desc [try-get-local lctx w]]
            [match [local-descriptor/kind desc]
              [local-descriptor-kind/internal-func func]
              [match tail-pos-info
                [tail-position/no]
                [push db [fact/recursive-call func ast]]
                [tail-position/tail]
                [push db [fact/tail-recursive-call func ast]]
                ]
              [do]]
            [if-let [gdesc [try-get def-ctx w]]
              [logq it is a global]
              [do
                [push-error wwf [bind-ast-errors/variable-unbound]]
                ]]]]]]]
    [binder
      [func out-bind-ast [ast] [bind-ast [local-context/top] [tail-position/no] ast]]
      errors
      db]]]]

[defn check-errors [name errors-atom]
  [match [atom-get errors-atom]
    [linked-list/nil]
    [do]
    [do
      [logq there were errors]
      [log name]
      [for-each error [clone-growable-to-frozen-list errors-atom]
        [log error]]
      [logq-abort aborting due to errors]]]]

[defn test-bind-fn [test-forms]
  [let-do
    [form-ast-converter [mk-form-to-ast]
     form-to-ast [form-to-ast-converter/form-to-ast form-ast-converter]
     conversion-errors-atom [form-to-ast-converter/errors form-ast-converter]
     binder [mk-bind-db]
     bind-ast [binder/bind-ast binder]
     binder-errors-atom [binder/errors binder]]
    [for-each form test-forms
      [let-do
        [ast [form-to-ast form]]
        [check-errors [quote conversion] conversion-errors-atom]
        [bind-ast ast]]
        [check-errors [quote binding] binder-errors-atom]]
    [let-do [facts [clone-growable-to-frozen-list [binder/db binder]]]
      [logq facts in db]
      [log [size facts]]
      [for-each fact facts
        [log fact]]]]]

[defexpr test-bind [.. test-forms]
  [test-bind-fn test-forms]]

