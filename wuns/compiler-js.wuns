[import ./standard-library.wuns]

[constant-ids - ..]

[func make-operation-obj [name parameters results]
  [concat
    [quote [name]] [list name]
    [quote [parameters]] [list parameters]
    [quote [results]] [list results]]]

[macro make-binary-i32 [name]
  [list [quote quote] [make-operation-obj name [quote i32 i32] [quote [i32]]]]]

[constant instructions
  [list
    [make-binary-i32 eq]
    [make-binary-i32 add]
    [make-binary-i32 sub]
    [make-binary-i32 mul]
    [make-binary-i32 div]
    [make-binary-i32 lt]
    [make-binary-i32 le]
    [make-binary-i32 gt]
    [make-binary-i32 ge]
    [make-binary-i32 bitwise-and]
    ]]

[func get-instruction [name]
  [loop [i 0]
    [if [lt i [size instructions]]
      [let [o [at instructions i]]
        [if [eq-word [assoc-list-get o [quote name]] name]
          o
          [continue i [inc i]]]]
      0]]]

[constant js-keywords [quote
  break
  case
  catch
  class
  const
  continue
  debugger
  default
  delete
  do
  else
  export
  extends
  false
  finally
  for
  function
  if
  import
  in
  instanceof
  new
  null
  return
  super
  switch
  this
  throw
  true
  try
  typeof
  var
  void
  while
  with]]

[func index-of-word [words word]
  [let [s-words [size words]]
    [loop [i 0]
      [if [lt i s-words]
        [if [eq-word word [at words i]]
          i
          [continue i [inc i]]]
        -1]]]]

[func is-js-keyword [word]
  [not [is-negative [index-of-word js-keywords word]]]]

[func word-to-codepoints [w]
  [let [ml [mutable-list]]
    [loop [i 0]
      [when [lt i [size w]]
        [push ml [at w i]]
        [continue i [inc i]]]]
    [freeze ml]]]

[func dec-word-to-i32 [dw]
  [let [s [sub 0 [size dw]]]
    [loop [i -1 res 0 multi 1]
      [if [le s i]
        [let [c [at dw i]]
          [assert [and [le [quote 48] c] [le c [quote 57]]] not a decimal character]
          [assert [lt res [quote 214748364]] out of bounds]
          [continue i [dec i]
                    res [add res [mul [sub c [quote 48]] multi]]
                    multi [mul multi [quote 10]]]]
        res]]]]

[func is-decimal [dw]
  [let [s [size dw]]
    [loop [i [if [eq [first dw] [quote 45]] 1 0]]
      [if [lt i s]
        [let [c [at dw i]]
          [if [and [le [quote 48] c] [le c [quote 57]]]
            [continue i [inc i]]
            0]]
        1]]]]

[func return-if-tail [is-tail-pos exp]
  [if is-tail-pos
    [list [quote return] exp]
    exp]]

[func iife [.. forms]
  [list [quote call] [list [quote arrow-func] [quote []] [concat-lists forms]]]]

[func value-to-js [form]
  [if [is-word form]
    [list [if [is-decimal form] [quote number] [quote string]] form]
    [let [ml [mutable-list] sf [size form]]
      [push ml [quote array]]
      [loop [i 0]
        [when [lt i sf]
          [push ml [value-to-js [at form i]]]
          [continue i [inc i]]]]
      [freeze ml]]]]

[func js-escape [word]
  [if [is-js-keyword word]
    [concat-words [list [quote kw] word]]
    word]]

[constant top-level-ctx [mutable-list]]
[constant macro-ctx [mutable-list]]

[func local-context-has [lctx sym]
  [loop [ctx lctx]
    [if [= [size ctx] 2]
      [let [vars [first ctx]
            outer [second ctx]]
        [if [is-negative [assoc-list-index vars sym]]
          [continue ctx outer]
          1]]
      0]]]

[external-func form-to-func [list list] []]

[external-func js-apply [any list] []]

[external-func emit-js [list] []]

[external-func make-macro-iife [word] []]

[func compile-form [lctx is-tail-pos form]
  [ifs
    [is-word form]
    [return-if-tail is-tail-pos
      [if [local-context-has lctx form]
        [list [quote var] form]
        [let [index [assoc-list-index top-level-ctx form]]
          [if [is-negative index]
            [do [log [concat [quote variable not found] [list form] lctx]]
                [abort]]
            [let [v [at top-level-ctx [inc index]]]
              [when-not [eq-word [first v] [quote constant]]
                [log [concat [list form] [quote not a constant] [first v]]]
                [abort]]
              [let [c-exp [second v]]
                [if [= [first c-exp] [quote number]]
                  c-exp
                  [list [quote var] form]]]]]]]]

    [eq [size form] 0]
    [return-if-tail is-tail-pos [quote [array]]]

    [let [first-form [first form]
          s-form [size form]
          n-of-args [dec s-form]]
      [assert [is-word first-form] expected a word first]
      [ifs
        [eq-word first-form [quote quote]]
        [return-if-tail is-tail-pos
          [value-to-js
            [if [eq [size form] 2]
              [second form]
              [rest form]]]]

        [eq-word first-form [quote if]]
        [let [c [compile-form lctx 0 [second form]]
              t [compile-form lctx is-tail-pos [third form]]
              f [compile-form lctx is-tail-pos [fourth form]]]
          [assert [eq [size form] 4] if needs a condition and two branches]
          [if is-tail-pos
            [list [quote if] c [list [quote block] t] f]
            [list [quote ternary] c t f]]]

        [or [eq-word first-form [quote let]] [eq-word first-form [quote loop]]]
        [let
           [bindings [second form]
            n-of-bindings [size bindings]
            var-values [mutable-list]
            exps [mutable-list]
            is-let [eq-word first-form [quote let]]
            decl-kind [if is-let [quote const] [quote let]]
            var-ctx [mutable-list]
            new-lctx [list var-ctx lctx]]
          [loop [i 0]
            [when [lt i n-of-bindings]
              [push var-values [list decl-kind [at bindings i] [compile-form new-lctx 0 [at bindings [inc i]]]]]
              [assoc-list-set var-ctx [at bindings i] [list first-form]]
              [continue i [add i 2]]]]
          [loop [i 2]
            [when [lt i n-of-args]
              [push exps [compile-form new-lctx 0 [at form i]]]
              [continue i [inc i]]]]
          [if is-tail-pos
            [if is-let
              [concat [quote [stmts]]
                var-values exps [list [compile-form new-lctx 1 [last form]]]]
              [concat [quote [block]]
                var-values
                [list
                  [list [quote while] [quote number 1]
                    [concat [quote [block]] exps [list [compile-form new-lctx 1 [last form]]]]]]]]
            [if is-let
              [iife [quote [block]] var-values
                exps [list [compile-form new-lctx 1 [last form]]]]
              [iife var-values
                [list [quote while] [quote number 1]
                  [list [quote block]
                    [concat exps [list [compile-form new-lctx 1 [last form]]]]]]]]]]

        [eq-word first-form [quote continue]]
        [let [var-updates [mutable-list]]
          [assert is-tail-pos continue must be in tail position]
          [assert [is-even n-of-args] continue needs an even number of arguments]
          [push var-updates [quote stmts]]
          [loop [i 1]
            [when [lt i n-of-args]
              [push var-updates [list [quote assign] [list [quote var] [at form i]] [compile-form lctx 0 [at form [inc i]]]]]
              [continue i [add i 2]]]]
          [push var-updates [list [quote continue]]]
          [freeze var-updates]]

        [eq-word first-form [quote import]]
        [let
          [module-name [second form]]
          [loop [i 2]
            [when [lt i s-form]
              [assoc-list-set top-level-ctx [at form i] [list first-form module-name]]
              [continue i [inc i]]]]]

        [eq-word first-form [quote export]]
        [let [ml [mutable-list]]
          [push ml [quote export]]
          [loop [i 1]
            [when [lt i s-form]
              [push ml [js-escape [at form i]]]
              [continue i [inc i]]]]
          [emit-js ml]
          [freeze ml]]

        [eq-word first-form [quote list]]
        [let [ml [mutable-list]]
          [push ml [quote array]]
          [loop [i 1]
            [when [lt i s-form]
              [push ml [compile-form lctx 0 [at form i]]]
              [continue i [inc i]]]]
          [return-if-tail is-tail-pos [freeze ml]]]

        [or
          [eq-word first-form [quote func]]
          [eq-word first-form [quote macro]]]
        [let [name [second form]
              orig-params [third form]
              body-block [mutable-list]
              - [push body-block [quote block]]
              param-ctx [mutable-list]
              has-rest-param [and [lt 1 [size orig-params]] [= [at orig-params -2] ..]]
              params
              [if has-rest-param
                [let [regular-params [slice orig-params 0 -2]
                      rest-param [last orig-params]]
                  [loop [i 0]
                    [when [lt i [size regular-params]]
                      [assoc-list-set param-ctx [at regular-params i] [list [quote parameter]]]
                      [continue i [inc i]]]]
                  [assoc-list-set param-ctx rest-param [list [quote parameter]]]
                  [concat regular-params [list rest-param]]]
                [do
                  [loop [i 0]
                    [when [lt i [size orig-params]]
                      [assoc-list-set param-ctx [at orig-params i] [list [quote parameter]]]
                      [continue i [inc i]]]]
                  orig-params]]
              fctx [list param-ctx []]]
            [assoc-list-set top-level-ctx name [list first-form [] has-rest-param [size params]]]
            [loop [i 3]
              [when [lt i [dec [size form]]]
                [push body-block [compile-form fctx 0 [at form i]]]
                [continue i [inc i]]]]
            [push body-block [compile-form fctx 1 [last form]]]
            [emit-js [list [quote const] [js-escape name] [list [quote arrow-func] params body-block]]]
            [when [eq-word first-form [quote macro]]
              [assoc-list-set macro-ctx name [make-macro-iife [js-escape name]]]]
            [list [quote assign]
              [list [quote field]
                [list [quote field] [quote var global] [quote wuns]]
                [js-escape name]]
              [list [quote arrow-func] params body-block]]]

        [eq-word first-form [quote constant]]
        [let [name [second form]
              value [compile-form [] 0 [third form]]]
          [assoc-list-set top-level-ctx name [list [quote constant] value]]
          [when-not [is-decimal name]
            [emit-js [list [quote const] [js-escape name] value]]]
          [comment
            [list [quote assign] [list [quote field] [list [quote field] [quote var global] [quote wuns]] [js-escape name]] value]
          ]]

        [eq-word first-form [quote external-func]]
        [let [name [second form]
              params [third form]
              results [fourth form]]
          [emit-js [concat [quote import ./host.js] [list [js-escape name]]]]
          [assoc-list-set top-level-ctx name [list [quote external-func] params results]]
          [list [quote import] [quote core.js] name]]

        [let [top-level-index [assoc-list-index top-level-ctx first-form]]
          [if [is-negative top-level-index]
            [let [cargs [mutable-list]]
              [when-not [get-instruction first-form]
                [log [concat [quote unknown func or op] [list first-form]]]
                [abort]]
              [push cargs [quote binop]]
              [push cargs first-form]
              [loop [i 1]
                [when [lt i [size form]]
                  [push cargs [compile-form lctx 0 [at form i]]]
                  [continue i [inc i]]]]
              [return-if-tail is-tail-pos [freeze cargs]]]
            [let
                [ns-obj [at top-level-ctx [inc top-level-index]]
                 kind [first ns-obj]
                 obj-word [if [= [first ns-obj] [quote import]] [second ns-obj] [quote wuns]]]
              [ifs
                [= kind [quote macro]]
                [let [has-rest-param [third ns-obj]
                      arity [fourth ns-obj]
                      mac [assoc-list-get macro-ctx first-form]]
                  [log [list [quote mac mac]]]
                  [compile-form lctx is-tail-pos
                    [if [third ns-obj]
                      [let [args [mutable-list]]
                        [push-all args [slice form 1 arity]]
                        [push args [slice form arity s-form]]
                        [log [concat [quote macro args] [list first-form] args]]
                        [let [mac-res [js-apply mac args]]
                          [log [concat [quote [macro-res]] [list mac-res]]]
                          mac-res]]
                      [js-apply mac [rest form]]]]]

                [= kind [quote func]]
                [return-if-tail is-tail-pos
                  [let [cargs [mutable-list]
                        has-rest-param [third ns-obj]
                        arity [fourth ns-obj]]
                    [push cargs [quote call]]
                    [push cargs [list [quote var] first-form]]
                    [if has-rest-param
                      [let [rest-arg [mutable-list]
                            regular-arity [dec arity]]
                        [loop [i 1]
                          [when [lt i regular-arity]
                            [push cargs [compile-form lctx 0 [at form i]]]
                            [continue i [inc i]]]]
                        [push rest-arg [quote array]]
                        [loop [i arity]
                          [when [lt i s-form]
                            [push rest-arg [compile-form lctx 0 [at form i]]]
                            [continue i [inc i]]]]
                        [push cargs [freeze rest-arg]]]
                      [loop [i 1]
                        [when [lt i s-form]
                          [push cargs [compile-form lctx 0 [at form i]]]
                          [continue i [inc i]]]]]
                    [freeze cargs]]]

                [= kind [quote import]]
                [return-if-tail is-tail-pos
                  [let [cargs [mutable-list]]
                    [push cargs [quote call]]
                    [list [quote field] [list [quote var] [second ns-obj]]  first-form]
                    [loop [i 1]
                      [when [lt i [size form]]
                        [push cargs [compile-form lctx 0 [at form i]]]
                        [continue i [inc i]]]]
                    [freeze cargs]]]

                [= kind [quote external-func]]
                [return-if-tail is-tail-pos
                  [let [cargs [mutable-list]]
                    [push cargs [quote call]]
                    [push cargs [list [quote var] first-form]]
                    [list [quote field] [quote var host] first-form]
                    [loop [i 1]
                      [when [lt i [size form]]
                        [push cargs [compile-form lctx 0 [at form i]]]
                        [continue i [inc i]]]]
                    [freeze cargs]]]

                [do
                  [log [list [quote unknown kind] kind]]
                  [abort]]]]]]]]]]

[func compile-top-form [aform]
  [let [cf [compile-form [] 0 aform]]
    cf
  ]]

[func compile-forms [forms]
  [let [res [mutable-list]]
    [loop [i 0]
      [when [lt i [size forms]]
        [push res [compile-top-form [at forms i]]]
        [continue i [inc i]]]]
    [freeze res]]]
