[load translator.wuns]

[defn eq-int-list [expected actual]
  [and [eq [size expected] [size actual]]
    [[func go [i]
      [if [lt-s i [size expected]]
        [if [eq [at expected i] [at actual i]]
          [go [inc i]]
          0]
        1]] 0]]]

[defn eq-f64-list [expected actual]
  [and [eq [size expected] [size actual]]
    [[func go [i]
      [if [lt-s i [size expected]]
        [if [[intrinsic f64.eq] [at expected i] [at actual i]]
          [go [inc i]]
          0]
        1]] 0]]]

[type test-assert []
  [union
    [eq [list f64] word [list f64]]]]

[type test []
  [record
    [asserts [list test-assert]]
    [module [list form]]]]

[defn run-test [test-data]
  [let-do [instance [translate-to-wat [test/module test-data]]]
    [for-each a [test/asserts test-data]
      [match a
        [test-assert/eq expected func-name args]
        [let [actual [wasm-call-export instance func-name args]]
          [when-not [eq-f64-list expected actual]
            [logq test failed]
            [log expected]
            [log actual]]]]]]]

[def evaluate-list-num
  [type-anno
    [extern interpreter evaluate-list-num]
    [func [evaluation-context word [list f64]] [list f64]]]]

[defn run-test-interpreter [test-data]
  [let-do
    [forms [test/module test-data]
     eval-ctx [make-eval-context]]
    [for-each form forms
      [evaluate eval-ctx form]]
    [for-each a [test/asserts test-data]
      [match a
        [test-assert/eq expected func-name args]
        [let [actual [evaluate-list-num eval-ctx func-name args]]
          [when-not [eq-f64-list expected actual]
            [logq test failed in interpreter]
            [log expected]
            [log actual]]]]]]]

[defn test-translate []
[let [tests
  [list
    [test
      [list [test-assert/eq [list] [word f] [list]]]
      [list
        [quote [def f [func f [] [do]]]]]]
    [test
      [list [test-assert/eq [list] [word g] [list]]]
      [list
        [quote [def g [func internal-name [] [do]]]]]]
    [test
      [list [test-assert/eq [list [f64 5]] [word f] [list]]]
      [list
        [quote [def f [func internal-name [] [i32 5]]]]]]
    [test
      [list [test-assert/eq [list [f64 5]] [word f] [list]]]
      [list
        [quote [def f [func internal-name [] [do [i32 2] [i32 5]]]]]]]
    [test
      [list [test-assert/eq [list [f64 5]] [word f] [list]]]
      [list
        [quote [def f [func internal-name [] [[intrinsic i32.sub] [i32 7] [i32 2]]]]]]]
    [test
      [list [test-assert/eq [list [f64 5]] [word f] [list]]]
      [list
        [quote [def f [func f [] [if [i32 0] [i32 7] [i32 5]]]]]]]
    [test
      [list [test-assert/eq [list [f64 5]] [word f] [list]]]
      [list
        [quote [def f [func f [] [if [i32 1] [i32 5] [i32 9]]]]]]]
    [test
      [list [test-assert/eq [list] [word f] [list]]]
      [list
        [quote [def f [func f [] [if [i32 1] [do] [do]]]]]]]
    [test
      [list
        [test-assert/eq [list [f64 1]] [word not] [list [f64 0]]]
        [test-assert/eq [list [f64 0]] [word not] [list [f64 1]]]
        [test-assert/eq [list [f64 0]] [word not] [list [f64 2]]]
        [test-assert/eq [list [f64 0]] [word not] [list [f64 -1]]]
        [test-assert/eq [list [f64 0]] [word not] [list [f64 10]]]]
      [list
        [quote [def not [func not [p] [if p [i32 0] [i32 1]]]]]]]
    [test
      [list
        [test-assert/eq [list [f64 1.5]] [word twop] [list [f64 0] [f64 0]]]
        [test-assert/eq [list [f64 1.5]] [word twop] [list [f64 0] [f64 0.25]]]
        [test-assert/eq [list [f64 0]] [word twop] [list [f64 1] [f64 0]]]
        [test-assert/eq [list [f64 0.25]] [word twop] [list [f64 13.0] [f64 0.25]]]
        [test-assert/eq [list [f64 0.1337]] [word twop] [list [f64 13.0] [f64 0.1337]]]
        ]
      [list
        [quote [def twop [func twop [i f] [if i f [f64 1.5]]]]]]]
    [test
      [list
        [test-assert/eq [list [f64 1]] [word f] [list]]
        [test-assert/eq [list [f64 1]] [word g] [list]]]
      [list
        [quote [def f [func f [] [i32 1]]]]
        [quote [def g [func g [] [f]]]]]]
]]
  [for-each t tests
    [run-test t]
    [run-test-interpreter t]]]
]
