[load check.wuns]

[defn get-messages-list [gctx]
  [clone-growable-to-frozen-list [check-context/messages gctx]]]

[defn log-report-message [message]
  [log [report-message/message message]]
  [log [meta [report-message/form message]]]]

[defn eq-list-of-forms [l1 l2]
  [and [eq [size l1] [size l2]]
    [[func eq-list-of-forms-go [i]
      [if [lt-s i [size l1]]
        [if [eq-form [at l1 i] [at l2 i]]
          [eq-list-of-forms-go [inc i]]
          0]
        1]] 0]]]

[defn i32-form [i]
  [form/word [int-to-word i]]]

[defn size-form [l]
  [i32-form [size l]]]

[defn test-ok-fn [tests-run-atom expected-type forms]
  [let [gctx [make-global-context]
        res [check-top-forms gctx forms]
        present-type [normalize-present-type-scheme res]
        messages [get-messages-list gctx]]
    [do
      [when-not [is-empty messages]
        [for-each message messages
          [log-report-message message]]
        [logq-abort test-ok failed there were errors]]
      [assert [eq-form present-type expected-type] test-ok failed expected type [identity expected-type] but found [identity present-type]]
      [inc-atom tests-run-atom]]]]

[defmacro test-ok [expected-type .. forms]
  [flist [quote test-ok-fn]
    [quote tests-run-atom]
    [mk-quote expected-type]
    [form-concat [list [quote list]] [list-map f forms [mk-quote f]]]]]

[defn test-errors-fn [tests-run-atom expected-type expected-messages forms]
  [let-do
   [gctx [make-global-context]
    res [check-top-forms gctx forms]
    present-type [normalize-present-type-scheme res]
    messages [get-messages-list gctx]]
    [if [is-empty messages]
      [logq-abort test-failed failed there were no errors]
      [when-not [eq [size expected-messages] [size messages]]
        [for-each message messages [log-report-message message]]
        [logq-abort test-failed failed expected [size-form expected-messages] messages but found [size-form messages]]]]
    [for i 0 [size messages]
      [let-do [expected-message [form-to-list [at expected-messages i]]
               message [report-message/message [at messages i]]]
        [assert [eq-list-of-forms expected-message message]
          test-failed failed expected message
          but found
          ]]]
    [assert [eq-form present-type expected-type] test-errors failed expected type [identity expected-type] but found [identity present-type]]
    [inc-atom tests-run-atom]]]

[defmacro test-errors [expected-type expected-messages .. forms]
  [flist [quote test-errors-fn]
    [quote tests-run-atom]
    [mk-quote expected-type]
    [form-concat [list [quote list]] [list-map m [form-to-list expected-messages] [mk-quote m]]]
    [form-concat [list [quote list]] [list-map f forms [mk-quote f]]]]]

[defn run-unit-tests []
  [let-do [tests-run-atom [atom 0]]

[comment variable]
[test-errors [type-scheme [a] a] [[not found]] [do not-found]]

[comment i32]
[test-ok i32 [i32 42]]

[comment word]
[test-ok word [word a]]

[comment if]
[test-errors i32 [[not unifiable - different types]] [if [word ok] [i32 5] [i32 5]]]
[test-errors i32 [[not unifiable - different types]] [if [i32 5] [i32 5] [word a]]]
[test-errors word [[not unifiable - different types]] [if [i32 5] [word a] [i32 5]]]
[test-ok i32 [if [i32 5] [i32 6] [i32 7]]]
[test-ok word [if [i32 5] [word a] [word b]]]

[comment do]
[test-ok [tuple] [do]]
[test-errors [type-scheme [a] a] [[not found]] [do v]]
[test-errors [tuple] [[not found]] [do v [do]]]
[test-errors [type-scheme [a] a] [[not found]] [do [do] v]]
[test-ok word [do [word a]]]
[test-ok i32 [do [word a] [i32 3]]]

[comment let]
[test-errors [tuple] [[expects two arguments]] [let []]]
[test-ok word [let [] [word a]]]
[test-ok word [let [v [word a]] v]]
[test-ok word [let [v [word a] u v] u]]

[comment letrec]
[test-ok [func [i32] i32]
  [letrec
    [is-even
      [func ieven [n] [if [[intrinsic i32.eq] [i32 0] n] [i32 1] [is-odd [[intrinsic i32.sub] n [i32 1]]]]]
     is-odd
      [func iodd [n] [if [[intrinsic i32.eq] [i32 0] n] [i32 0] [is-even [[intrinsic i32.sub] n [i32 1]]]]]]
    is-even]]

[comment letfn]
[test-ok [func [i32] i32]
  [letfn
    [[func is-even [n] [if [[intrinsic i32.eq] [i32 0] n] [i32 1] [is-odd [[intrinsic i32.sub] n [i32 1]]]]]
     [func is-odd [n] [if [[intrinsic i32.eq] [i32 0] n] [i32 0] [is-even [[intrinsic i32.sub] n [i32 1]]]]]]
    is-even]]

[comment func]
[comment function parameters cannot be polymorphically instantiated]
[test-errors [type-scheme [a] [func [[func [i32] a]] a]] [[not unifiable  - different types]]
  [func f [i]
    [do
      [i [i32 5]]
      [i [word a]]]]]
[test-ok [type-scheme [a] [func [[func [i32] a]] a]]
  [func f [i]
    [i [i32 5]]]]
[test-ok
  [type-scheme [a] [func [.. a] [list a]]]
  [func list [.. entries] entries]]
[test-ok
  [type-scheme [a b] [func [a b] i32]]
  [func f [x y] [i32 5]]]
[test-ok
  [type-scheme [a] [func [] a]]
  [func diverge [] [diverge]]]
[test-ok
  [func [i32] i32]
  [func f [p]
    [if p
      [i32 2]
      [f [i32 1]]]]]
[test-ok
  [type-scheme [a] [func [.. a] i32]]
  [func f [.. p] [i32 0]]]
[test-ok
  [type-scheme [a] [list a]]
  [[func f [.. p] p]]]
[test-ok
  [list i32]
  [[func f [.. p] p] [i32 5]]]
[test-ok
  [list i32]
  [[func f [.. p] p] [i32 5] [i32 6]]]
[test-errors
  [list i32]
  [[not unifiable - different types]]
  [[func f [.. p] p] [i32 5] [word a]]]
[test-ok
  [type-scheme [a] [func [a] a]]
  [func id [x] x]]
[test-ok
  [func [i32] i32]
  [if [i32 5]
    [func id-i32 [x] [if x x x]]
    [func id [x] x]]]
[test-errors
  [func [form] i32]
  [[not unifiable - different types]]
  [macro mac-i32 [x] [i32 5]]]
[test-ok
  [func [form] form]
  [macro mac-id [x] x]]
[test-ok
  [func [form] form]
  [fexpr fexpr-id [x] x]]
[test-ok
  [func [form] i32]
  [fexpr fexpr-i32 [x] [i32 5]]]

[test-ok
  i32
  [[fexpr fexpr-i32 [x] [i32 5]] [this is not evaluated]]]

[comment call]
[test-errors i32 [[not unifiable - different number of parameters]]
  [[func one-param [p] [i32 5]]]]
[test-errors i32 [[not unifiable - different number of parameters]]
  [[func zero-params [] [i32 5]] [word extra-argument]]]
[test-ok word
  [[func f [i] [i [word a]]] [func id [x] x]]]
[test-ok word [let [id [func id [x] x]] [do [id [i32 5]] [id [word a]]]]]
[test-errors [type-scheme [a] a] [[not unifiable - different types]]
  [[i32 5] [i32 6]]]

[comment def]
[test-errors [type-scheme [a] a] [[not found]] [def a a]]
[test-errors [type-scheme [a] a] [[not found]] [def a [do a]]]
[test-errors [type-scheme [a] a] [[not found]] [def a [[func id [x] x] a]]]
[test-ok
  word
  [def d [word a]]]
[test-ok
  word
  [def d [word a]]
  d]
[test-ok
  i32
  [def f [func id [x] x]]
  [f [i32 5]]
  [f [i32 6]]]
[test-ok
  word
  [def f [func id [x] x]]
  [f [i32 5]]
  [f [word a]]]
[test-ok
  [list i32]
  [def list [func list [.. entries] entries]]
  [def test [list [i32 1] [i32 2]]]
  test]
[test-ok word
  [def d [word a]]
  [def d [word b]]]
[test-ok [type-scheme [a] [func [.. a] [list a]]]
  [def list [func list [.. entries] entries]]]

[comment extern]
[test-ok [type-scheme [a] a] [extern host size]]

[comment macro expansion]
[test-ok i32
  [type form []
    [union
      [word word]
      [list [list form]]]]
  [def flist [func flist [.. elements] [form/list elements]]]
  [def m [macro m [] [flist [form/word [word i32]] [form/word [word 5]]]]]
  [m]]

[comment type annotations]
[test-ok [func [word] form]
  [def form-word
    [type-anno
      [extern host form-word]
      [func [word] form]]]]
[test-ok i32
  [type-anno
    [extern host form-word]
    i32]]
[test-ok form
  [type-anno
    [extern host form-word]
    form]]
[test-ok word
  [def id [func id [p] p]]
  [id [i32 4]]
  [id [word a]]]
[test-ok word
  [let
    [id [func id [p] p]]
    [do
      [id [i32 4]]
      [id [word a]]]]]

[test-ok word
  [let
    [id [type-anno [extern] [type-scheme [a] [func [a] a]]]]
    [do
      [id [i32 4]]
      [id [word a]]]]]

[test-ok word
  [def id [type-anno [extern] [type-scheme [a] [func [a] a]]]]
  [id [i32 4]]
  [id [word a]]]

[test-ok i32
  [def size
    [type-anno
      [extern host size]
      [type-scheme [a] [func [[list a]] i32]]]]
  [def list [func list [.. entries] entries]]
  [size [list [i32 5]]]
  [size [list [word a]]]]

[comment type union]
[test-ok boolean
  [type boolean [] [union [false] [true]]]
  [boolean/false]]
[test-ok boolean
  [type boolean [] [union [false] [true]]]
  [boolean/true]]
[test-ok [type-scheme [a] [func [] [option a]]]
  [type option [a] [union [none] [some a]]]
  option/none]
[test-ok [type-scheme [a] [func [a] [option a]]]
  [type option [a] [union [none] [some a]]]
  option/some]
[test-ok [type-scheme [a] [linked-list a]]
  [type linked-list [a] [union [nil] [cons a [linked-list a]]]]
  [linked-list/nil]]
[test-ok [linked-list i32]
  [type linked-list [a] [union [nil] [cons a [linked-list a]]]]
  [linked-list/cons [i32 5] [linked-list/nil]]]

[comment type record]
[test-ok empty-rec
  [type empty-rec [] [record]]
  [empty-rec]]
[test-ok one-field-rec
  [type one-field-rec [] [record [field i32]]]
  [one-field-rec [i32 5]]]
[test-ok [func [one-field-rec] i32]
  [type one-field-rec [] [record [field i32]]]
  one-field-rec/field]
[test-ok two-field-rec
  [type two-field-rec [] [record [field i32] [word word]]]
  [two-field-rec [i32 5] [word a]]]

[test-ok [func [word [list type]] type]
  [type
    type []
    [union
      [apply word [list [type]]]]]
    type/apply]

[test-ok [func [inst-type] type]
[type function-kind []
  [union
    [ctor]
    [func]]]

[type option [a]
  [union
    [none]
    [some a]]]
[type
  type-var-kind []
  [union
    [linked type]
    [word word]]

  type-var []
  [record
    [kind [atom type-var-kind]]
    [level [atom i32]]]

  func-type []
  [record
    [params [list type]]
    [rest-param-opt [option type]]
    [result type]
    [kind function-kind]]

  inst-type []
  [union
    [func func-type]
    [apply word [list type]]]

  type []
  [union
    [var type-var]
    [inst inst-type]]]
    type/inst]

[comment match]
[test-errors i32 [[not unifiable - different types]]
  [type option []
    [union
      [none]]]
  [match [option/none] [option/none] [i32 5] [word a]]]
[test-ok i32
  [type option []
    [union
      [none]]]
  [match [option/none] [option/none] [i32 5]]]

[comment switch]
[test-errors word [[not unifiable - different types]]
  [switch [i32 0]
    [i32 0] [word zero]
    [word a] [word one]
    [word not-01]]]
[test-errors word [[not unifiable - different types]]
  [switch [i32 0]
    [
      [i32 0]
      [word a]
      ] [word zero-a]
    [word not-01]]]
[comment check default case]
[test-errors word [[not unifiable - different types]]
  [switch [i32 0]
    [i32 0] [word zero]
    [i32 1] [word one]
    [i32 1337]]]
[test-ok word
  [switch [i32 0]
    [[i32 0] [i32 1]] [word zero-or-one]
    [word not-01]]]
[test-ok word
  [switch [i32 0]
    [i32 0] [word zero]
    [i32 1] [word one]
    [word not-01]]]

[comment from wright]
[test-errors i32 [[not unifiable - different types]]
  [def atom-get
    [type-anno
      [extern atom-get]
      [type-scheme [a] [func [[atom a]] a]]]]
  [def atom-set
    [type-anno
      [extern atom-set]
      [type-scheme [a] [func [[atom a] a] [tuple]]]]]
  [def add
    [type-anno
      [extern add]
      [func [i32 i32] i32]]]
  [let [c [atom [func id [x] x]]]
    [do
      [atom-set c [func inc [x] [add [i32 1] x]]]
      [[atom-get c] [word true]]]]]
[test-errors i32 [[not unifiable - different types]]
  [def atom-get
    [type-anno
      [extern atom-get]
      [type-scheme [a] [func [[atom a]] a]]]]
  [def atom-set
    [type-anno
      [extern atom-set]
      [type-scheme [a] [func [[atom a] a] [tuple]]]]]
  [def add
    [type-anno
      [extern add]
      [func [i32 i32] i32]]]
  [def mk-atom [func mk-atom [init] [atom init]]]
  [let [c [mk-atom [func id [x] x]]]
    [do
      [atom-set c [func inc [x] [add [i32 1] x]]]
      [[atom-get c] [word true]]]]]
[test-ok i32
  [def atom-get
    [type-anno
      [extern atom-get]
      [type-scheme [a] [func [[atom a]] a]]]]
  [def atom-set
    [type-anno
      [extern atom-set]
      [type-scheme [a] [func [[atom a] a] [tuple]]]]]
  [type linked-list [a]
    [union
      [nil]
      [cons a [linked-list a]]]]
  [def push [func push [list-ref element]
    [atom-set list-ref [linked-list/cons element [atom-get list-ref]]]]]
  [let [gli [atom [linked-list/nil]]]
    [push gli [i32 5]]]
  [def push2 [func push [list-ref element]
    [atom-set list-ref [linked-list/cons element [atom-get list-ref]]]]]
  push2
  [let [glw [atom [linked-list/nil]]]
    [push2 glw [word a]]]
  [i32 5]]

[logq tests-run [i32-form [atom-get tests-run-atom]]]
  ]]

[defn test-ok-fn-stop-at-error [gctx forms]
  [for-each form forms
    [check-top gctx form]
    [let [messages [get-messages-list gctx]]
      [when-not [is-empty messages]
        [for-each message messages
          [log-report-message message]]
        [logq-abort test-ok-fn-stop-at-error failed there were errors [meta [identity form]]]]]]]

[defn test-ok-files [.. files]
  [let-do
    [gctx [make-global-context]
     before [performance-now]]
    [for-each file files
      [test-ok-fn-stop-at-error gctx [read-file file]]]
    [logq it took ms]
    [log [[intrinsic f64.sub] [performance-now] before]]]]

[defn test-check []
  [run-unit-tests]
  [let-do
    [file [word test-translator.wuns]]
    [log [word checking] file]
    [test-ok-files file]]]
