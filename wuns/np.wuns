[import env mem [memory 0]]

[defn bump-alloc-init []
  [if [eq [load 0 2 0 [const 0]] [const 0]]
    [store 0 2 0 [const 0] [const 16]]
    [unreachable]]]

[defn bump-free [p size]
  [let [current-top [load 0 2 0 [const 0]]
        popped-top [sub current-top size]]
    [if [eq popped-top p]
      [store 0 2 0 [const 0] popped-top]
      [unreachable]]]]

[defn mk-i32 [x] [list [quote i32.const] x]]

[def mem-alloc-size [quote 4]]

[defmacro not-is-address-aligned [x]
  [list [quote bitwise-and] [mk-i32 [dec mem-alloc-size]] x]]

[defn bump-alloc [size]
  [if [le size [i32.const 0]] [unreachable]]
  [if [gt size [i32.const 65536]] [unreachable]]
  [if [not-is-address-aligned size] [unreachable]]
  [let
    [current-top [load 0 2 0 [i32.const 0]]
     - [if [eq current-top [i32.const 0]] [unreachable]]
     - [if [not-is-address-aligned current-top] [unreachable]]
     mem-size-bytes [bitwise-shift-left [memory.size 0] [i32.const 16]]
     - [if [gt current-top mem-size-bytes] [unreachable]]
     new-top [add current-top size]]
    [if [gt new-top mem-size-bytes] [unreachable]]
    [store 0 2 0 [i32.const 0] new-top]
    current-top]]

[defn is-power-of-2 [x] [eq [quote 0] [bitwise-and x [dec x]]]]

[defn align [n x]
  [assert n must not be zero]
  [assert [is-power-of-2 n] must be power of 2]
  [let [dn [dec n]]
    [list [quote bitwise-and]
      [list [quote add] [mk-i32 dn] x]
      [mk-i32 [bitwise-xor [i32.const -1] dn]]]]]

[defmacro mem-align [x] [align mem-alloc-size x]]

[import env log-size-pointer [func [i32 i32 i32] []]]

[defn test-log []
  [let [start [i32.const 32]
        end [i32.const 127]
        s [sub end start]
        alloc-size [mem-align s]
        p [bump-alloc alloc-size]]
    [loop [i [i32.const 0]]
      [when [lt i s]
        [store8 0 0 0 [add p i] [add start i]]
        [continue i [add i [i32.const 1]]]]]
    [log-size-pointer 0 s p]
    [bump-free p alloc-size]]]
