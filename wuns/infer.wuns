[comment
  here we implement hindley-milner type inference

  we will have type variables containing an atom potentially referencing a linked type
  and a binding level for unification of type variables letting the lowest level be the most general]

[defn make-type-var [kind level]
  [atom [kv-map-id kind level]]]

[defn int-to-type-var-name [i]
  [if [lt-s i [i32 26]]
    [char-code-to-word [add [i32 97] i]]
    [concat-words
      [recur [i32.div-s i [i32 26]]]
      [char-code-to-word [add [i32 97] [i32.rem-s i [i32 26]]]]]]]

[defn int-to-type-var [i]
  [form-word [int-to-type-var-name i]]]

[defn generate-fresh-type-var-atom [counter-atom level]
  [make-type-var [int-to-type-var [inc-atom counter-atom]] level]]

[defn is-type-var [t]
  [and [is-atom t]
    [let [v [atom-get t]] [and [hasq v kind] [hasq v level]]]]]

[defn type-var-kind [t]
  [assert [is-type-var t] not a type var [identity t]]
  [getq [atom-get t] kind]]

[defn type-var-level [t]
  [assert [is-type-var t] not a type var [identity t]]
  [getq [atom-get t] level]]

[defn set-type-var-kind [type-var kind]
  [assert [is-type-var type-var] not a type var [identity type-var]]
  [let [av [atom-get type-var]]
    [atom-set type-var [assoc av [word kind] kind]]]]

[defn set-type-var-level [type-var level]
  [assert [is-type-var type-var] not a type var [identity type-var]]
  [let [av [atom-get type-var]]
    [atom-set type-var [assoc av [word level] level]]]]

[defn is-type [t]
  [and [not [is-type-var t]] [eq-word [getq t tag] [quote type]]]]

[defn make-type [type-name type-args]
  [for-each arg type-args
    [assert [or [is-type-var arg] [is-type arg]] make-type not a type [identity arg]]]
  [kv-mapq
    tag [quote type]
    type-name type-name
    type-args type-args]]

[def type-i32 [make-type [quote i32] [list]]]
[def type-word [make-type [quote word] [list]]]
[def type-form [make-type [quote form] [list]]]
[defn type-list [elem-type] [make-type [quote list] [list elem-type]]]
[def type-empty-tuple [make-type [quote tuple] [list]]]
[defn type-tuple [elem-types]
  [if [size elem-types]
    [make-type [quote tuple] elem-types]
    type-empty-tuple]]
[defn type-func-no-rest [params result]
  [kv-mapq
    tag [quote type]
    type-name [quote func]
    params params
    result result]]

[defn type-func [params opt-rest-param result]
  [if-let [rest-param opt-rest-param]
    [kv-mapq
      tag [quote type]
      type-name [quote func]
      params params
      rest-param rest-param
      result result]
    [type-func-no-rest params result]]]

[defn is-internal-func-type [t]
  [and [is-type t] [eq-word [getq t type-name] [quote func]]]]

[defn make-infer-global-context []
  [kv-mapq
    messages [growable-list]
    eval-context [make-eval-context host-object]
    def-var-types [transient-kv-map]
    type-var-counter [atom 0]]]


[defn set-def-var-type [gctx var type]
  [let [def-var-types [getq gctx def-var-types]]
    [assert [not [has def-var-types var]] [list [quote set-def-var-type] var type]]
    [set-kv-map def-var-types var type]
    type]]

[defn try-get-local-var-type [local-ctx var-name]
  [loop [cur-ctx local-ctx]
    [if cur-ctx
      [if-let [type [try-get [getq cur-ctx vars] var-name]]
        type
        [continue cur-ctx [try-getq cur-ctx outer]]]
      0]]]

[defn try-get-var-type [gctx local-ctx var-name]
  [if-let [ltype [try-get-local-var-type local-ctx var-name]]
    ltype
    [try-get [getq gctx def-var-types] var-name]]]

[defn generate-fresh-type-var [gctx level]
  [generate-fresh-type-var-atom [getq gctx type-var-counter] level]]


[defn check-type-arity [gctx type-name n-of-given-type-args]
  [ifs
    [eq-word type-name [quote tuple]]
    [report-when [eq n-of-given-type-args 1] type-name tuple type expects zero or multiple arguments]

    [or
      [eq-word type-name [quote i32]]
      [eq-word type-name [quote word]]
      [eq-word type-name [quote form]]]
    [report-when [eq n-of-given-type-args 0] type-name atomic type expects no arguments]

    [eq-word type-name [quote list]]
    [report-when-not [eq n-of-given-type-args 1] type-name list type expects one argument]

    [eq-word type-name [quote func]]
    [report-when-not [eq n-of-given-type-args 3]
      type-name func type expects a parameter list a rest parameter list and a return type]

    [logq-abort check-builtin-type-arity type-name not a known builtin type [identity type-name]]]]

[defn set-type-var-kind-to-type [type-var type]
  [set-type-var-kind type-var type]]

[comment normalize a type make type variable point directly to the linked type - if any]
[defn normalize-type [t0]
  [if [is-type-var t0]
    [let [kind [type-var-kind t0]]
      [if [is-word kind]
        t0
        [let [t2 [recur kind]]
          [set-type-var-kind-to-type t0 t2]
          t2]]]
    t0]]

[defn member-type-var-list [set t]
  [loop [i 0]
    [if [lt-s i [size set]]
      [if [is-identical [at set i] t]
        1
        [continue i [inc i]]]
      0]]]

[defn free-type-vars-growable [set t]
  [let [nt [normalize-type t]]
    [if
      [is-type-var nt]
      [when-not [member-type-var-list set nt]
        [push set nt]]

      [if [eq-word [getq nt type-name] [quote func]]
        [let [params [getq nt params]
              result [getq nt result]]
            [for-each param params [recur set param]]
            [if-let [rest-param [try-getq nt rest-param]]
              [recur set rest-param]
              [do]]
            [recur set result]]
        [for-each arg [getq nt type-args]
          [recur set arg]]]]]]

[defn free-type-vars [t]
  [let [set [growable-list]]
    [free-type-vars-growable set t]
    [clone-growable-to-frozen-list set]]]

[defn prune-level [max-level tvs]
  [for-each tv tvs
    [set-type-var-level tv [min [type-var-level tv] max-level]]]]

[defn link-var-to-type [type-var type]
  [let
    [level [type-var-level type-var]
     fvs [free-type-vars type]]
    [assert [not [member-type-var-list fvs type-var]] type-var occurs in type
      [list fvs type-var [member-type-var-list fvs type-var]]]
    [prune-level level fvs]
    [set-type-var-kind-to-type type-var type]]]

[defn push-unify-error [errors msg]
  [push errors msg]]

[defn unify [errors t1 t2]
  [let [nt1 [normalize-type t1]
        nt2 [normalize-type t2]]
    [ifs
      [and [is-type-var nt1] [is-type-var nt2]]
      [when-not [is-identical nt1 nt2]
        [if [lt-s [type-var-level nt1] [type-var-level nt2]]
          [link-var-to-type nt1 nt2]
          [link-var-to-type nt2 nt1]]]

      [is-type-var nt1]
      [link-var-to-type nt1 nt2]

      [is-type-var nt2]
      [link-var-to-type nt2 nt1]

      [and [is-type nt1] [is-type nt2]]
      [let [type-name1 [getq nt1 type-name]
            type-name2 [getq nt2 type-name]]
        [ifs
          [not [eq-word type-name1 type-name2]]
          [push-unify-error errors [quote [not unifiable - different types]]]

          [if [eq-word [quote func] type-name1]
            [let [params1 [getq nt1 params]
                  params2 [getq nt2 params]
                  arity1 [size params1]
                  arity2 [size params2]
                  opt-rest-param1 [try-getq nt1 rest-param]
                  opt-rest-param2 [try-getq nt2 rest-param]
                  result1 [getq nt1 result]
                  result2 [getq nt2 result]]
              [ifs
                [and [not opt-rest-param1] [not opt-rest-param2]]
                [if
                  [not [eq arity1 arity2]]
                  [push-unify-error errors [quote [not unifiable - different number of parameters]]]

                  [for i 0 arity1
                    [recur errors [at params1 i] [at params2 i]]]]

                [and opt-rest-param1 [not opt-rest-param2]]
                [if
                  [lt-s arity2 arity1]
                  [push-unify-error errors [quote [not unifiable - insufficient number of parameters]]]

                  [do
                    [for i 0 arity1
                      [recur errors [at params1 i] [at params2 i]]]
                    [for i arity1 arity2
                      [recur errors opt-rest-param1 [at params2 i]]]]]

                [logq-abort func unification not implemented]]
              [recur errors result1 result2]]

            [let [type-args1 [getq nt1 type-args]
                  type-args2 [getq nt2 type-args]
                  arity1 [size type-args1]]
              [if [not [eq arity1 [size type-args2]]]
                [push-unify-error errors [quote [not unifiable - different number of type arguments]]]
                [loop [i 0]
                  [if [lt-s i arity1]
                    [if-let [msg [recur errors [at type-args1 i] [at type-args2 i]]]
                      msg
                      [continue i [inc i]]]
                    0]]]]]]]

      [logq-abort unify arguments not a type nor type variables [identity nt1] [identity nt2]]]]]

[defn unify-report [gctx t1 t2 .. forms]
  [let [errors [growable-list]
        form [first forms]]
    [unify errors t1 t2]
    [for-each error [clone-growable-to-frozen-list errors]
      [report-fn gctx error form]]]]

[defn unify-call [gctx level func-type arg-types form]
  [let [t-res [generate-fresh-type-var gctx level]
        t-func [type-func-no-rest arg-types t-res]]
    [unify-report gctx func-type t-func form]
    t-res]]


[comment

      [and [is-internal-func-type nt1] [is-internal-func-type nt2]]
      [let [params1 [getq nt1 params]
            params2 [getq nt2 params]
            rest-params1 [getq nt1 rest-params]
            rest-params2 [getq nt2 rest-params]
            result1 [fourth nt1]
            result2 [fourth nt2]
            arity1 [size params1]
            arity2 [size params2]
            n-of-params [inc [max arity1 arity2]]]
        [or
          [loop [i 0]
            [if [lt-s i n-of-params]
              [if-let [p1 [if [lt-s i arity1] [at params1 i] rest-params1]]
                [if-let [p2 [if [lt-s i arity2] [at params2 i] rest-params2]]
                  [if-let [msg [recur p1 p2]]
                    msg
                    [continue i [inc i]]]
                  0]
                0]
              0]]
          [recur result1 result2]
          [if [and [not [size rest-params1]] [not [size rest-params2]] [not [eq arity1 arity2]]]
            [quote [insufficient number of arguments]] 0]]]
]

[defn mk-type-scheme [type-vars type] [list [quote type-scheme] type-vars type]]

[defn generalize [current-level type]
  [let [tvs [growable-list]]
    [for-each tv [free-type-vars type]
      [when [lt-s current-level [type-var-level tv]]
        [push tvs tv]]]
    [mk-type-scheme [clone-growable-to-frozen-list tvs] type]]]

[defn try-get-assoc-atom [assoc-list var]
  [loop [i 0]
    [if [lt-s i [size assoc-list]]
      [let [pair [at assoc-list i]]
        [if [is-identical var [first pair]]
          [second pair]
          [continue i [inc i]]]]
      0]]]

[defn copy-type [subst-map t]
  [ifs
    [is-type-var t]
    [if-let [subst-type [try-get-assoc-atom subst-map t]]
      subst-type
      [let [kind [type-var-kind t]]
        [if [is-word kind]
          t
          [recur subst-map kind]]]]

    [let [type-name [getq t type-name]]
      [if [eq-word type-name [quote func]]
        [let [params [getq t params]
              result [getq t result]
              cparams [macro-map params param [recur subst-map param]]
              crest-param [if-let [rest-param [try-getq t rest-param]] [recur subst-map rest-param] 0]]
          [type-func cparams crest-param [recur subst-map result]]]
        [let [type-args [getq t type-args]
              cargs [macro-map type-args arg [recur subst-map arg]]]
        [make-type type-name cargs]]]]]]

[defn specialize [gctx level type-vars type]
  [if [is-empty type-vars]
    type
    [let [subst-assoc-list [macro-map type-vars tv [list tv [generate-fresh-type-var gctx level]]]]
      [copy-type subst-assoc-list type]]]]

[defn specialize-type-scheme [gctx level type-scheme]
  [assert [eq-word [first type-scheme] [quote type-scheme]] not a type scheme [identity type-scheme]]
  [let [type-vars [second type-scheme]
        type [third type-scheme]]
    [specialize gctx level type-vars type]]]

[defn mk-empty-type-scheme [type] [mk-type-scheme [list] type]]

[defn get-outer-context-by-form [local-ctx first-form]
  [loop [cur-ctx local-ctx]
    [ifs
      [not cur-ctx]
      0

      [eq-form first-form [getq cur-ctx first-form]]
      cur-ctx

      [continue cur-ctx [getq cur-ctx outer]]]]]

[defn try-get-def-var-annotated-type [gctx form]
  [if [is-word form]
    [if-let [var [eval-try-get-var gctx form]]
      [try-get-meta-assoc var [quote type]]
      0]
    0]]

[comment given a type such as [func [i32 i32] i32] instantiates to a type-scheme]
[defn instantiate-annotated-type [gctx type-var-env type]
  [ifs
    [is-word type]
    [ifs
      [eq-word type [quote i32]]
      type-i32

      [eq-word type [quote word]]
      type-word

      [eq-word type [quote form]]
      type-form

      [let [w [form-to-word type]]
        [if-let [t [try-get type-var-env w]]
          t
          [logq-abort type could not be instantiated - not known - [identity type] [identity type-var-env]]]]]

    [not [is-list type]]
    [logq-abort type expected word or list]

    [let [elements [form-to-list type]
          first-form [first elements]
          s-form [size elements]
          n-of-args [dec s-form]]
      [if [eq s-form 0]
        [logq-abort type expects a non-empty list]
        [ifs
          [not [is-word first-form]]
          [logq-abort type expects a word [identity first-form]]

          [eq-word first-form [quote func]]
          [do
            [report-when-not [eq n-of-args 2] type expects 2 arguments a parameter list and a return type]
            [let [params [second elements]
                  - [report-when-not [is-list params] type expects a list]
                  params-list [form-to-list params]
                  result [third elements]
                  params-map [params-to-map params-list]
                  reg-params [getq params-map params]
                  internal-params
                  [macro-map reg-params param
                    [do
                      [report-when [eq-word param ..] param .. in wrong place]
                      [recur gctx type-var-env param]]]]
              [type-func
                internal-params
                [if-let [rest-param [try-getq params-map rest-param]]
                  [recur gctx type-var-env rest-param]
                  0]
                [recur gctx type-var-env result]]]]

          [eq-word first-form [quote type-scheme]]
          [do
            [report-when type-var-env type cannot have a type-scheme inside a type-scheme]
            [report-when-not [eq n-of-args 2] type type-scheme expects 2 arguments]
            [let [type-vars [second elements]
                  type [third elements]
                  type-var-env [transient-kv-map]]
              [report-when-not [is-list type-vars] type type-vars expects a list]
              [for-each tv [form-to-list type-vars]
                [report-when-not [is-word tv] type-vars expects a word]
                [set-kv-map type-var-env [form-to-word tv] [generate-fresh-type-var gctx 0]]]
              [recur gctx type-var-env type]]]

          [let [type-args [mutable-list-of-size n-of-args]]
            [check-type-arity gctx first-form n-of-args]
            [for i 0 n-of-args
              [set-array type-args i [recur gctx type-var-env [at elements [inc i]]]]]
            [make-type first-form type-args]]]]]]]

[defn infer-form-type [gctx level lctx form]
  [ifs
    [is-word form]
    [if-let [type-scheme [try-get-var-type gctx lctx [form-to-word form]]]
      [specialize-type-scheme gctx level type-scheme]
      [generate-fresh-type-var gctx level]]

    [let [sub-forms [form-to-list form]
          s-form [size sub-forms]
          first-form [first sub-forms]
          n-of-args [dec s-form]]
      [ifs
        [eq-form first-form [quote i32]]
        type-i32

        [eq-form first-form [quote word]]
        [do
          [report-when-not [eq n-of-args 1] form expects 1 argument]
          [report-when-not [is-word [second sub-forms]] form expects a word]
          type-word]

        [eq-form first-form [quote quote]]
        type-form

        [eq-form first-form [quote if]]
        [let [cond [second sub-forms]
              then-branch [third sub-forms]
              else-branch [fourth sub-forms]
              cond-type [recur gctx level lctx cond]
              then-type [recur gctx level lctx then-branch]
              else-type [recur gctx level lctx else-branch]]
          [unify-report gctx cond-type type-i32 cond]
          [unify-report gctx then-type else-type then-branch else-branch]
          then-type]

        [or [eq-form first-form [quote let]] [eq-form first-form [quote loop]]]
        [let
          [var-values [transient-kv-map]
           let-loop-ctx [kv-mapq vars var-values outer lctx first-form first-form]
           bindings [if [lt-s 1 s-form] [form-to-list [second sub-forms]] [do [report form expects bindings] [list]]]
           n-of-bindings [size bindings]
           level-1 [inc level]]
          [when [eq-word first-form [quote let]]
            [comment [logq we are in a let form [meta form]]]
            ]
          [when [lt-s 1 s-form]
            [let
              [n-of-bindings [size bindings]]
              [for-pair i 0 [dec n-of-bindings]
                [let
                  [var [form-to-word [at bindings i]]
                   value [at bindings [inc i]]
                   val-type [recur gctx level-1 let-loop-ctx value]
                   general-val-type [generalize level val-type]]
                  [set-kv-map var-values var general-val-type]]]]]
          [for i 2 [dec s-form]
            [recur gctx level let-loop-ctx [at sub-forms i]]]
          [if [lt-s 2 s-form]
            [recur gctx level let-loop-ctx [last sub-forms]]
            type-empty-tuple]]

        [eq-form first-form [quote continue]]
        [let [loop-ctx [get-outer-context-by-form lctx [quote loop]]]
          [if loop-ctx
            [let [loop-vars [getq loop-ctx vars]]
              [for-pair i 1 n-of-args
                [let [var [at sub-forms i]
                      value [at sub-forms [inc i]]
                      val-type [recur gctx level lctx value]]
                  [if [is-word var]
                    [if-let [type-scheme [try-get loop-vars [form-to-word var]]]
                      [unify-report gctx [specialize-type-scheme gctx level type-scheme] val-type value]
                      []]
                    [report var expected a loop variable here]]]]]]
          [generate-fresh-type-var gctx level]]

        [eq-form first-form [quote func]]
        [let [level-1 [inc level]
              func-name [second sub-forms]
              params-form [third sub-forms]
              params [form-to-list params-form]
              param-ctx [transient-kv-map]
              parsed-params [params-to-map params]
              reg-params-parsed [getq parsed-params params]
              func-type [generate-fresh-type-var gctx level-1]
              func-ctx [kv-mapq vars param-ctx first-form first-form func-type func-type]
              reg-params [growable-list]
              n-of-bodies [sub s-form 3]]
            [for-each param reg-params-parsed
              [let [tv [generate-fresh-type-var gctx level-1]]
                [set-kv-map param-ctx [form-to-word param] [mk-empty-type-scheme tv]]
                [push reg-params tv]]]
            [let [opt-rest-param
                  [if-let [rest-param [try-getq parsed-params rest-param]]
                    [let [tv [generate-fresh-type-var gctx level-1]]
                      [set-kv-map param-ctx [form-to-word rest-param]
                        [mk-empty-type-scheme [type-list tv]]]
                      tv]
                    0]
                  return-type
                  [if n-of-bodies
                    [do
                      [for i 3 [dec s-form]
                        [recur gctx level-1 func-ctx [at sub-forms i]]]
                      [recur gctx level-1 func-ctx [last sub-forms]]]
                    type-empty-tuple]]
              [unify-report gctx
                func-type
                [type-func
                  [clone-growable-to-frozen-list reg-params]
                  opt-rest-param
                  return-type]
                form]]
            func-type]

        [eq-form first-form [quote recur]]
        [let [func-ctx [get-outer-context-by-form lctx [quote func]]]
          [if-not func-ctx
            [report form recur outside func]
            [let [func-type [getq func-ctx func-type]
                  arg-types [mutable-list-of-size n-of-args]]
              [for i 0 n-of-args
                [set-array arg-types i [recur gctx level lctx [at sub-forms [inc i]]]]]
              [unify-call gctx level func-type arg-types form]]]]

        [eq-form first-form [quote def]]
        [let [name [second sub-forms]
              value-form [third sub-forms]
              value-type [recur gctx [inc level] lctx value-form]
              general-val-type [generalize level value-type]]
          [set-def-var-type gctx [form-to-word name] general-val-type]
          type-empty-tuple]

        [eq-form first-form [quote def-with-meta]]
        [let [name [second sub-forms]
              meta-form [third sub-forms]
              value-form [fourth sub-forms]
              value-type [recur gctx [inc level] lctx value-form]
              general-val-type [generalize level value-type]
              def-var [eval-try-get-var gctx name]
              function-kind [try-get-meta-assoc def-var [quote function-kind]]]
          [assert def-var the form should be expanded by now [identity name]]
          [ifs
            [or [not function-kind] [eq-word function-kind [quote function]]]
            []

            [eq-word function-kind [quote macro]]
            []

            [eq-word function-kind [quote fexpr]]
            []

            [eq-word function-kind [quote manc]]
            [logq-abort manc not implemented]

            [logq-abort unknown function-kind [identity function-kind]]]

          [set-def-var-type gctx [form-to-word name] general-val-type]
          type-empty-tuple]

        [eq-form first-form [quote extern]]
        [do
          [for i 1 s-form
            [report-when-not [is-word [at sub-forms i]] form expects words]]
          [generate-fresh-type-var gctx level]]

        [let
          [func-type [recur gctx level lctx first-form]
           arg-types [mutable-list-of-size n-of-args]]
          [for i 0 n-of-args
            [set-array arg-types i [recur gctx level lctx [at sub-forms [inc i]]]]]
          [let
            [t-res [generate-fresh-type-var gctx level]
             t-func [type-func-no-rest arg-types t-res]]
            [if-let [annotated-type [try-get-def-var-annotated-type gctx first-form]]
              [unify-report gctx [instantiate-annotated-type gctx 0 annotated-type] t-func form]
              []]
            [unify-report gctx func-type t-func form]
            t-res]]]]]]

[defn normalize-deep [internal-type]
  [let [nt [normalize-type internal-type]]
    [if [is-type-var nt]
      [assert [is-word [type-var-kind nt]] normalize-deep expected a non-linked type var]
      [if [eq-word [getq nt type-name] [quote func]]
        [do
          [for-each p [getq nt params] [recur p]]
          [if-let [rp [try-getq nt rest-param]]
            [recur rp]
            [do]]
          [recur [getq nt result]]]
        [for-each type-arg [getq nt type-args]
          [recur type-arg]]]]]]

[defn untuple [t]
  [assert [eq-word [getq t type-name] [quote tuple]] not a tuple [identity t]]
  [getq t type-args]]

[comment given an internal type returns a presentable type]
[defn internal-to-present-type [internal-type]
  [let [nt internal-type]
    [if [is-type-var nt]
      [let [kind [type-var-kind nt]]
        [assert [is-word kind] not a type var [identity nt]]
        kind]
      [do
        [let [type-name [getq nt type-name]]
          [if
            [eq-word type-name [quote func]]
            [let [params [getq nt params]
                  n-params [size params]
                  opt-rest-param [try-getq nt rest-param]
                  result [getq nt result]
                  n-present-params [if opt-rest-param [add n-params 2] n-params]
                  regular-present-params [macro-map params param [recur param]]
                  present-params
                  [if opt-rest-param
                    [concat regular-present-params [list .. [recur opt-rest-param]]]
                    regular-present-params]]
                [form-list [quote func] [form-list-list present-params] [recur result]]]

            [let [type-args [getq nt type-args]
                  n-of-args [size type-args]
                  present-type [mutable-list-of-size [inc n-of-args]]]
              [if n-of-args
                [do
                  [set-array present-type 0 type-name]
                  [for i 0 n-of-args
                    [set-array present-type [inc i] [recur [at type-args i]]]]
                  [freeze-mutable-list present-type]
                  [form-list-list present-type]]
                [if [eq-word type-name [quote tuple]] [quote unit] type-name]]]]]]]]]

[defn normalize-present-type-scheme [internal-type]
  [normalize-deep internal-type]
  [let [type-vars [free-type-vars internal-type]
        type-var-counter [atom 0]
        fresh-type-vars [macro-map type-vars tv [generate-fresh-type-var-atom type-var-counter 0]]
        subst-assoc-list [mutable-list-of-size [size type-vars]]
        new-present-type-vars [macro-map fresh-type-vars tv [internal-to-present-type tv]]]
    [for i 0 [size type-vars]
      [let [tv [at type-vars i]
            new-tv [at fresh-type-vars i]]
        [set-array subst-assoc-list i [list tv new-tv]]]]
    [if [is-empty new-present-type-vars]
      [internal-to-present-type [copy-type subst-assoc-list internal-type]]
      [form-list [quote type-scheme]
        [form-list-list new-present-type-vars]
        [internal-to-present-type [copy-type subst-assoc-list internal-type]]]]]]
