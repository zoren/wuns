[def - [quote -]]
[def .. [quote ..]]

[def errors [growable-list]]

[defn report-error [msg form]
  [push errors [kv-map message msg form form]]]

[defmacro report-when [cond form .. lmsg]
  [list [quote when] cond
    [list [quote report-error] [mk-quote lmsg] form]]]

[defmacro report-when-not [cond form .. lmsg]
  [list [quote when-not] cond
    [list [quote report-error] [mk-quote lmsg] form]]]

[defmacro report [form .. lmsg]
  [list [quote report-error] [mk-quote lmsg] form]]

[defn has-local-context [ctx var]
  [loop [cur-ctx ctx]
    [ifs
      [has [getq cur-ctx vars] var]
      1

      [hasq cur-ctx outer]
      [continue cur-ctx [getq cur-ctx outer]]

      0]]]

[defn get-top-context [local-ctx]
  [loop [cur-ctx local-ctx]
    [if [hasq cur-ctx outer]
      [continue cur-ctx [getq cur-ctx outer]]
      cur-ctx]]]

[defn try-get-loop-vars [local-ctx]
  [loop [cur-ctx local-ctx]
    [ifs
      [eq-word [quote loop] [getq cur-ctx decl-form]]
      [getq cur-ctx vars]

      [hasq cur-ctx outer]
      [continue cur-ctx [getq cur-ctx outer]]

      0]]]

[defn check-signature [signature call-form]
  [let [regular-params [getq signature params]]
    [if [hasq signature rest-param]
      [report-when-not [lt-s [size regular-params] [dec [size call-form]]] call-form wrong number of arguments]
      [report-when-not [eq [size regular-params] [dec [size call-form]]] call-form wrong number of arguments]]]]

[defn try-get-def [global-binding-context form]
  [if [has global-binding-context form]
    [get global-binding-context form]
    0]]

[defn expand-form [global-binding-context local-ctx form]
  [ifs
    [is-word form]
    [do
      [when-not [has-local-context local-ctx form]
        [if-not [has global-binding-context form]
          [report form symbol not found]
          [let [def-desc [get global-binding-context form]]
            [report-when [eq-word [quote is-macro] [getq def-desc def-form]] form macro used as value]]]]
      form]

    [not [is-list form]]
    form

    [is-empty form]
    [do
      [report form empty form]
      form]

    [let [first-form [first form]
          s-form [size form]]
        [ifs
          [eq-word [quote quote] first-form]
          form

          [eq-word [quote if] first-form]
          [let [res [mutable-list-of-size s-form]]
            [set-array res 0 first-form]
            [for i 1 s-form [set-array res i [recur global-binding-context local-ctx [at form i]]]]
            res]

          [or [eq-word [quote let] first-form] [eq-word [quote loop] first-form]]
          [let [res [mutable-list-of-size s-form]
                bindings [at form 1]
                s-bindings [size bindings]
                vars [transient-kv-map]
                new-local-ctx [kv-map vars vars outer local-ctx decl-form first-form]
                new-bindings [mutable-list-of-size s-bindings]]
            [for-pair i 0 s-bindings
              [let [var [at bindings i]
                    value [at bindings [inc i]]]
                [set-array new-bindings i var]
                [set-array new-bindings [inc i] [recur global-binding-context new-local-ctx value]]
                [if [is-word var]
                  [do
                    [report-when [has vars var] var already defined]
                    [set vars var [kv-map var var]]]
                  [report var not a word]]]]
            [set-array res 0 first-form]
            [set-array res 1 new-bindings]
            [for i 2 s-form [set-array res i [recur global-binding-context new-local-ctx [at form i]]]]
            res]

          [eq-word [quote continue] first-form]
          [let [loop-vars [try-get-loop-vars local-ctx]
                res [mutable-list-of-size s-form]]
            [set-array res 0 first-form]
            [for-pair i 1 s-form
              [let [var [at form i]]
                [report-when-not [is-word var] var not a word]
                [report-when-not [and loop-vars [has loop-vars var]] var loop var not found in expand]
                [set-array res i var]
                [set-array res [inc i] [recur global-binding-context local-ctx [at form [inc i]]]]]]
            res]

          [eq-word [quote recur] first-form]
          [let [top-ctx [get-top-context local-ctx]
                res [mutable-list-of-size s-form]]
            [report-when-not [and [hasq top-ctx decl-form] [eq-word [getq top-ctx decl-form] [quote defn]]]
              form recur not inside function]
            [check-signature [getq top-ctx signature] form]
            [set-array res 0 first-form]
            [for i 1 s-form [set-array res i [recur global-binding-context local-ctx [at form i]]]]
            res]

          [if [has-local-context local-ctx first-form]
            [let [res [mutable-list-of-size s-form]]
              [set-array res 0 first-form]
              [for i 1 s-form [set-array res i [recur global-binding-context local-ctx [at form i]]]]
              res]
            [if-let [def-desc [try-get-def global-binding-context first-form]]
              [do
                [check-signature [getq def-desc signature] form]
                [assert [not [eq-word [getq def-desc def-form] [quote defmacro]]] macro not implemented yet]
                [let [res [mutable-list-of-size s-form]]
                  [set-array res 0 first-form]
                  [for i 1 s-form [set-array res i [recur global-binding-context local-ctx [at form i]]]]
                  res]]
              [if-let [instruction [try-get-instruction first-form]]
                [let [imm-parameters [getq instruction immediate-parameters]
                      imm-index [inc [size imm-parameters]]
                      res [mutable-list-of-size s-form]]
                  [report-when-not [eq [getq instruction arity] [dec s-form]] form wrong number of arguments]
                  [set-array res 0 first-form]
                  [for i 1 imm-index [set-array res i [at form i]]]
                  [for i imm-index s-form [set-array res i [recur global-binding-context local-ctx [at form i]]]]
                  res]
                [do
                  [report first-form symbol not found]
                  form]]]]]]]]

[defn add-global-binding [global-binding-context name def-desc]
  [if [is-word name]
    [if [has global-binding-context name]
      [report name already defined not redefined]
      [set global-binding-context name def-desc]]
    [report name not a word not added to global context]]]

[defn expand-top-level [global-binding-context form]
  [ifs
    [is-word form]
    [do
      [if-not [has global-binding-context form]
        [report form not found]
        [let [def-desc [get global-binding-context form]]
          [report-when [eq-word [quote is-macro] [getq def-desc def-form]] form macro used as value]]]
      form]

    [is-list form]
    [if [is-empty form]
      [do
        [report form empty form]
        form]
      [let [first-form [first form]
            s-form [size form]]
        [ifs
          [eq-word [quote constant] first-form]
          [let [name [at form 1]
                local-ctx [kv-map vars empty-kv-map decl-form first-form]]
            [add-global-binding global-binding-context name [kv-map def-form first-form]]
            [list first-form name [expand-form global-binding-context local-ctx [at form 2]]]]

          [eq-word [quote import] first-form]
          [let [- [report-when-not [eq s-form 4] form import expects 3 arguments]
                module-name [at form 1]
                name [at form 2]
                t [at form 3]
                ff [first t]]
              [ifs
                [eq-word ff [quote func]]
                [let [signature [kv-map params [second t]]]
                  [add-global-binding global-binding-context name [kv-map def-form ff signature signature]]
                  form]

                [eq-word ff [quote memory]]
                [do
                  [add-global-binding global-binding-context name [kv-map def-form ff]]
                  form]

                [assert 0 bla bla]]]

          [or [eq-word [quote defn] first-form] [eq-word [quote defmacro] first-form]]
          [let [name [at form 1]
                params [at form 2]
                params-map [transient-kv-map]
                n-of-params [size params]
                signature
                [if [and [lt-s 1 n-of-params] [eq-word [at params -2] ..]]
                  [let [dot-dot-index [sub n-of-params 2]]
                    [for i 0 dot-dot-index
                      [let [param [at params i]]
                        [set params-map param [kv-map var param]]]]
                    [let [rest-param [last params]]
                      [set params-map rest-param [kv-map var rest-param rest-param 1]]
                      [kv-map params [slice params 0 dot-dot-index]
                              rest-param rest-param]]]
                  [do
                    [for-each param params
                      [set params-map param [kv-map var param]]]
                    [kv-map params params]]]
                  fn-local-ctx [kv-map vars params-map decl-form first-form signature signature]]
            [add-global-binding global-binding-context name [kv-map def-form first-form signature signature]]
            [let [res [mutable-list-of-size s-form]]
              [set-array res 0 first-form]
              [set-array res 1 name]
              [set-array res 2 params]
              [for i 3 s-form [set-array res i [expand-form global-binding-context fn-local-ctx [at form i]]]]
              res]]

          [if-let [def-desc [try-get-def global-binding-context first-form]]
            [let [local-ctx [kv-map vars empty-kv-map]]
              [check-signature [getq def-desc signature] form]
              [if-not [eq-word [getq def-desc def-form] [quote defmacro]]
                [let [res [mutable-list-of-size s-form]]
                  [set-array res 0 first-form]
                  [for i 1 s-form [set-array res i [expand-form global-binding-context local-ctx [at form i]]]]
                  res]
                [assert 0 macro not implemented yet]]]
            [report first-form symbol not found]]]]]

      [assert 0 not a word or list not expanded]]]

[def node-id-counter [atom [i32.const 100]]]

[defn next-node-id []
  [let [c [atom-get node-id-counter]]
    [atom-set node-id-counter [inc c]]
    [int-to-word c]]]

[defn assign-node-ids [node]
  [ifs
    [is-word node]
    [assoc-meta node [quote node-id] [next-node-id]]

    [is-list node]
    [let [s-node [size node]
          res [mutable-list-of-size s-node]]
      [for i 0 s-node
        [set-array res i [recur [at node i]]]]
      [assoc-meta res [quote node-id] [next-node-id]]]

    [assert 0 not a word or list not assigned node id]]]

[defn expand-top-level-forms [forms]
  [let [res [mutable-list-of-size [size forms]]
        global-binding-context [transient-kv-map]]
    [add-global-binding global-binding-context [quote wuns-active-mem-top]
      [kv-map def-form [quote constant]]]
    [for i 0 [size forms]
      [set-array res i [assign-node-ids [expand-top-level global-binding-context [at forms i]]]]]
    res]]

[defn is-decimal [dw]
  [let [s [size dw]]
    [loop [i [if [eq [char-code-at dw 0] ascii-dash] 1 0]]
      [if [lt-s i s]
        [let [c [char-code-at dw i]]
          [if [and [le-s [const 48] c] [le-s c [const 57]]]
            [continue i [inc i]]
            0]]
        1]]]]

[defn is-non-negative-decimal [dw]
  [let [s [size dw]]
    [loop [i 0]
      [if [lt-s i s]
        [let [c [char-code-at dw i]]
          [if [and [le-s [const 48] c] [le-s c [const 57]]]
            [continue i [inc i]]
            0]]
        1]]]]

[def type-word [quote word]]
[def type-i32 [quote i32]]
[def type-f64 [quote f64]]
[def type-form [quote form]]
[def type-any [quote any]]
[def type-error [quote type-error]]

[defn is-word-type [t] [or [eq-form t type-word] [eq-form t type-i32]]]

[defn type-list [element-type] [list [quote list] element-type]]
[defn type-tuple [.. types] [concat [quote [tuple]] types]]
[def type-empty [type-tuple]]

[defn is-atomic-type [t]
  [or
    [eq-form t type-form]
    [eq-form t type-word]
    [eq-form t type-i32]
    [eq-form t type-f64]
    [eq-form t type-any]
    [eq-form t type-error]]]

[defn is-mutable-list-type [t] [and [is-list t] [eq [size t] 2] [eq-word [first t] [quote mutable-list]] [is-atomic-type [second t]]]]
[defn is-tuple-type [t] [and [is-list t] [lt-s 0 [size t]] [eq-form [first t] [quote tuple]]]]

[defn is-type [t]
  [or
    [is-atomic-type t]
    [and [is-list t] [eq [size t] 2]
      [or [eq-word [first t] [quote list]] [eq-word [first t] [quote mutable-list]]]
      [recur [second t]]]
    [and [is-list t] [le-s 1 [size t]]
      [eq-word [first t] [quote tuple]]
      [loop [i 1]
        [if [lt-s i [size t]]
          [if [recur [at t i]]
            [continue i [inc i]]
            0]
          1]]]]]

[defn is-list-or-mut-list-type [t]
  [and [is-list t] [eq [size t] 2]
    [or [eq-word [first t] [quote list]] [eq-word [first t] [quote mutable-list]]]
    [is-type [second t]]]]

[defn is-list-type [t]
  [and [is-list t] [eq [size t] 2]
    [eq-word [first t] [quote list]]
    [is-type [second t]]]]

[defn is-type-list [ts]
  [loop [i 0]
    [if [lt-s i [size ts]]
      [if [is-type [at ts i]]
        [continue i [inc i]]
        0]
      1]]]

[defn is-pointer-type [t]
  [or [eq-form t type-word] [eq-form t type-form] [is-list-type t]]]

[defn check-type [t]
  [report-when-not [is-type t] t not a type]]

[defn check-type-list [ts]
  [for-each t ts [check-type t]]
  ts]

[defn check-param-arg-conform [param-type arg-t]
  [or
    [eq-form param-type type-any]
    [eq-form param-type arg-t]
    [and [eq-word param-type type-i32] [is-pointer-type arg-t]]
    [and [eq-word param-type type-form]
      [or [is-word-type arg-t] [is-list-type arg-t]]]
    [and [is-list-type param-type] [is-list-or-mut-list-type arg-t]]
    [and [is-list-type param-type] [is-list-type arg-t]
         [eq [size param-type] [size arg-t]]
         [lt-s 0 [size param-type]]
         [eq-word [first param-type] [first arg-t]]
         [loop [i 1]
           [if [lt-s i [size param-type]]
             [if [recur [second param-type] [second arg-t]]
               [continue i [inc i]]
               0]
             1]]]]]

[def global-ctx [transient-kv-map]]

[defn add-sig [name sig-obj]
  [if [has global-ctx name]
    [report name function already defined]
    [set global-ctx name sig-obj]]]

[defn try-get-global-sig [name]
  [if [has global-ctx name]
    [get global-ctx name]
    0]]

[def node-types [transient-kv-map]]

[defn get-node-id [node]
  [getq [meta node] node-id]]

[defn set-node-type [node type]
  [set node-types [get-node-id node] type]
  type]

[defn try-get-node-type [node]
  [let [node-id [get-node-id node]]
    [if [has node-types node-id]
      [get node-types node-id]
      type-error]]]

[def default-memargs [kv-map mem 0 offset 0 align 0]]

[defn check-memargs [form]
  [report-when-not [is-list form] form expects a list]
  [report-when-not [is-odd [size form]] form expects an odd number of elements]
  [let [f [first form]
        tkvm [transient-kv-map]]
    [report-when-not [eq-word f [quote memarg]] f expects a memarg]
    [for-pair i 1 [size form]
      [let [k [at form i]
            v [at form [inc i]]]
        [if [is-word k]
          [do
            [report-when-not [has default-memargs k] k unknown memarg key]
            [if [is-non-negative-decimal v]
              [do
                [report-when [has tkvm k] k duplicate memarg key will use last value]
                [set tkvm k v]]
              [report v memarg expects a non-negative decimal]]]
          [report k memarg expects a word]]]]
    [freeze-kv-map tkvm]
    [set-node-type form tkvm]]]

[defn check-form [local-ctx tail-pos form]
  [ifs
    [is-word form]
    [loop [cur-ctx local-ctx]
      [if [eq [size cur-ctx] 1]
        [let [param-ctx [first cur-ctx]]
          [if [has param-ctx form]
            [set-node-type form [get param-ctx form]]
            [if [has global-ctx form]
              [let [sig [get global-ctx form]]
                [if [eq-word [getq sig def] [quote constant]]
                  [set-node-type form [getq sig constant]]
                  [do
                    [report form not a constant]
                    [log [list [quote c] form [quote not a constant]]]
                    [log global-ctx]
                    type-error]]]
              [do
                [report form symbol not found]
                type-error]]]]
        [let [vars [first cur-ctx]]
          [if [has vars form]
            [set-node-type form [get vars form]]
            [continue cur-ctx [second cur-ctx]]]]]]

    [is-empty form]
    [do
      [report form empty form]
      type-empty]

    [let [first-form [first form]
          s-form [size form]
          n-of-args [dec s-form]]
      [assert [is-word first-form] expected a word first [identity form]]
      [ifs
        [eq-form first-form [quote tuple]]
        [let
          [res-types [mutable-list-of-size n-of-args]]
          [report-when [eq n-of-args 1] form tuple expects zero or at least two arguments]
          [push res-types [quote tuple]]
          [for i 1 s-form
            [set-array res-types [dec i] [recur local-ctx 0 [at form i]]]]
          res-types]

        [eq-form first-form [quote quote]]
        [do
          [comment todo check if integer or word or list]
          [set-node-type form type-form]
          [if [eq n-of-args 1]
            [let [f [second form]]
              [if [is-list f]
                [type-list type-any]
                type-word]]
            [type-list type-any]]]

        [eq-form first-form [quote if]]
        [do
          [when [lt-s 0 n-of-args]
            [let [c [second form]
                  ct [recur local-ctx 0 c]]
              [report-when-not [eq-form ct [quote i32]] c condition not i32]]]
          [for i 4 s-form
            [recur local-ctx 1 [at form i]]
            [report [at form i] if extra forms ignored]]
          [if [lt-s 1 n-of-args]
            [let [tt [recur local-ctx tail-pos [third form]]
                  ft [if [eq n-of-args 2] type-empty [recur local-ctx tail-pos [fourth form]]]]
              [set-node-type form
                [if [eq-form tt type-any]
                  ft
                  [if [eq-form ft type-any]
                    tt
                    [do
                      [report-when-not [eq-form tt ft] form if branches must have same type]
                      tt]]]]]]]

        [or
          [eq-form first-form [quote let]]
          [eq-form first-form [quote loop]]]
        [let
          [var-values [transient-kv-map]
           let-loop-ctx [list var-values local-ctx first-form]
           bindings [if [lt-s 1 s-form] [second form] [do [report form expects bindings] []]]
           n-of-bindings [size bindings]]
          [when [lt-s 1 s-form]
            [let
              [sec [second form]
               bindings [if [is-list sec] sec [do [report sec expects a list of bindings] []]]
               n-of-bindings [size bindings]]
              [report-when-not [is-even n-of-bindings] [last bindings] expects an even number of bindings]
              [for-pair i 0 [dec n-of-bindings]
                [let
                  [var [at bindings i]
                   value [at bindings [inc i]]
                   val-type [recur let-loop-ctx 0 value]]
                  [set var-values var val-type]]]]]
          [for i 2 [dec s-form]
            [recur let-loop-ctx 0 [at form i]]]
          [set-node-type form
            [if [lt-s 2 s-form]
              [recur let-loop-ctx [if [eq-form first-form [quote loop]] 1 tail-pos] [last form]]
              type-empty]]]

        [eq-form first-form [quote continue]]
        [do
          [loop [cur-ctx local-ctx]
            [if [eq [size cur-ctx] 1]
              [report form continue not inside loop]
              [if [eq-form [quote loop] [third cur-ctx]]
                [let [loop-vars [first cur-ctx]]
                  [report-when-not
                    [is-even n-of-args]
                    form
                    continue takes a list of pairs of bindings]
                  [for-pair i 1 n-of-args
                      [let [var [at form i]
                            value [at form [inc i]]
                            val-type [recur cur-ctx 0 value]]
                        [if-not [has loop-vars var]
                          [report var loop var not found]
                          [let [type [get loop-vars var]]
                            [report-when-not [eq-form type val-type] value type mismatch]]]]]]
                [report-when-not tail-pos form continue not at tail position of loop]
                [continue cur-ctx [second cur-ctx]]]]]
          type-any]

        [eq-form first-form [quote import]]
        [let [- [report-when-not [eq s-form 4] form import expects 3 arguments]
              module-name [at form 1]
              name [at form 2]
              t [at form 3]]
            [ifs
              [eq-word [first t] [quote func]]
              [let [rs [at t 2]]
                [add-sig name [kv-map
                                parameters [check-type-list [at t 1]]
                                results [if [is-empty rs] type-empty [check-type [first rs]]]
                                def first-form]]]

              []]]

        [eq-form first-form [quote constant]]
        [let [name [second form]
              value [third form]
              value-type [recur local-ctx 0 value]]
          [add-sig name [kv-map constant value-type
                                def first-form]]]

        [or [eq-form first-form [quote defn]]]
        [let [params
              [if [lt-s 2 s-form]
                [let [l [third form]]
                  [if [is-list l]
                    l
                    [do
                      [report l expected a list of parameters]
                      []]]]
                [do
                  [report form function expects a list of parameters]
                  []]]
              param-ctx [transient-kv-map]
              n-of-param-words [size params]
              has-rest-param [and [lt-s 1 n-of-param-words] [eq-form [at params -2] ..]]
              n-of-regular-params [if has-rest-param [sub n-of-param-words 2] n-of-param-words]
              type-annotation
              [if [lt-s 3 s-form]
                [let [anno [fourth form]]
                  [if [and [is-list anno] [eq [size anno] 3]
                        [eq-word [first anno] [quote type]]]
                    [let [anno-params [second anno]
                          anno-results [third anno]]
                      [report-when-not [eq [size anno-params] n-of-param-words] anno-params wrong number of types]
                      [for i 0 n-of-regular-params
                        [check-type [at anno-params i]]]
                      [when [and has-rest-param [lt-s 1 [size anno-params]]]
                        [let [dd [at anno-params -2]]
                          [report-when-not [eq-word dd ..] dd expected ..]
                          [check-type [last anno-params]]]]
                      [check-type anno-results]
                      [list anno-params anno-results]]
                    [list]]]
                [list]]
              anno-params [if [size type-annotation] [first type-annotation] 0]
              anno-results [if [size type-annotation] [second type-annotation] 0]
              parameter-type-list [mutable-list-of-size n-of-regular-params]
              -
              [for i 0 n-of-regular-params
                [let [p [at params i]
                      pt [if anno-params [at anno-params i] [quote i32]]]
                  [report-when [eq-form p ..] p .. must be at second last position]
                  [when-not [eq-form p -]
                    [report-when [has param-ctx p] p duplicate parameter]
                    [set-node-type p pt]
                    [set param-ctx p pt]]
                  [comment todo use a preallocated array instead we know the size in advance]
                  [set-array parameter-type-list i pt]]]
              rest-param-element-type
              [if has-rest-param
                [let [p [last params]
                      pt [if anno-params [last anno-params] type-any]]
                  [report-when-not [is-word p] p not a word]
                  [when-not [eq-form p -]
                    [report-when [has param-ctx p] p duplicate parameter]
                    [set param-ctx p [type-list pt]]]
                  pt]
                0]
              func-ctx [list param-ctx [list empty-kv-map] first-form]
              locals [growable-list]
              sig-object [transient-kv-map]]
            [freeze-mutable-list parameter-type-list]
            [setq sig-object parameters parameter-type-list]
            [setq sig-object results type-any]
            [setq sig-object def first-form]
            [when rest-param-element-type
              [setq sig-object rest-param-element-type rest-param-element-type]]
            [if [lt-s 1 s-form]
              [let [name [second form]]
                [if [is-word name]
                  [add-sig name sig-object]
                  [report name expected a word here]]]]
            [for i 3 [dec [size form]]
              [comment remember to check type is empty maybe even drop unused and warn instead]
              [recur func-ctx 0 [at form i]]]
            [let [
              result-type
              [if [lt-s 3 [size form]]
                [recur func-ctx 0 [last form]]
                type-error]]
              [setq sig-object results result-type]
                ]
[comment
            [when [size type-annotation]
              [when-not [eq-form anno-results result-type]
                [report-error [list [quote func mismatch] result-type anno-results] [last form]]]]]
            ]

        [do
          [if [not [has global-ctx first-form]]
            [do
              [if [has instructions-by-name first-form]
                [let [instruction [get instructions-by-name first-form]
                      imm-parameters [getq instruction immediate-parameters]
                      parameters [getq instruction parameters]
                      n-of-parameters [add [size imm-parameters] [size parameters]]
                      results [getq instruction results]]
                  [report-when-not [eq n-of-args n-of-parameters] form wrong number of arguments]
                  [for i 0 [size imm-parameters]
                    [let [imm-p [at imm-parameters i]
                          arg [at form [inc i]]]
                      [ifs
                        [eq-word imm-p immediate-s32]
                        [report-when-not [is-decimal arg] arg expects a decimal]

                        [eq-word imm-p immediate-u32]
                        [report-when-not [is-decimal arg] arg expects a decimal]

                        [eq-word imm-p immediate-s64]
                        [report-when-not [is-decimal arg] arg expects a decimal]

                        [eq-word imm-p imm-memarg]
                        [let []
                          [check-memargs arg]
                          ]

                        [assert 0 unknown immediate parameter type [identity imm-p]]]]]
                  [for i 0 [size parameters]
                    [let [arg [at form [inc [add i [size imm-parameters]]]]
                          arg-t [recur local-ctx 0 arg]
                          pt [at parameters i]]
                        [when-not [check-param-arg-conform pt arg-t]
                          [report-error [concat [quote parameter does not match] [list pt arg-t]] arg]]]]
                  [set-node-type form results]]
                [do
                  [log [list [quote not-found] [quote gc] global-ctx [quote v] first-form]]
                  [report form function not found]]]]
            [let [sig [get global-ctx first-form]
                  sig-def [getq sig def]
                  parameters [getq sig parameters]
                  n-of-parameters [size parameters]]
              [report-when-not [le-s n-of-parameters n-of-args] form
                missing arguments]
              [if [eq-word sig-def [quote macro]]
                []
                [do
                  [for i 1 s-form
                    [let [arg [at form i]
                          arg-t [recur local-ctx 0 arg]
                          p-index [dec i]]
                      [when [lt-s p-index n-of-parameters]
                        [let [pt [at parameters p-index]]
                          [when-not [check-param-arg-conform pt arg-t]
                            [report-error [concat [quote parameter does not match] [list pt arg-t]] arg]]]]]]
                  [when [hasq sig rest-param-element-type]
                    [for i [inc n-of-parameters] s-form
                      [report [at form i] extra arguments ignored]]
                    [let [rest-param-element-type [getq sig rest-param-element-type]]
                      [for i [inc n-of-parameters] s-form
                        [let [arg [at form i]
                              arg-t [recur local-ctx 0 arg]]
                          [report-when-not [check-param-arg-conform rest-param-element-type arg-t] arg
                            rest parameter type mismatch]]]]]
                  [set-node-type form [getq sig results]]]]]]]]]]]

[defn check-top-form [form]
  [check-form [list []] 0 form]]

[defn delete-all-keys [o]
  [for-each k [keys o]
    [delete-key o k]]]

[defn kv-map-clone [m]
  [let [res [transient-kv-map]]
    [for-each k [keys m] [set res k [get m k]]]
    [freeze-kv-map res]
    res]]

[defn check-top-forms [forms]
  [add-sig [quote wuns-active-mem-top] [kv-map constant type-i32 def [quote constant]]]
  [for-each form forms
    [check-top-form form]]
  [when-not [is-empty errors]
    [for-each err errors
      [log [list [getq err message] [getq err form] [getq [meta [getq err form]] range]]]]]
  [let [res
        [kv-map
          errors errors
          global-ctx [kv-map-clone global-ctx]
          node-types [kv-map-clone node-types]]]
      [delete-all-keys global-ctx]
    res]]

[comment
  [check-forms
    [quote
      [defn f [x y] [add x y]]
      [defn g [x y] [sub x y]]]]
  [check-forms [quote [defn f [x y] [add x y]] [defn g [x y] [sub x y]]]]

  [check-forms
    [quote
      [defn f [x y] [add x y]]
      [defn g [x y] [sub x y]]]]
]
