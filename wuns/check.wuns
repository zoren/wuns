[macro comment [.. -] []]

[func list [.. l] l]

[macro constant-ids [.. id-constants]
  [let [f [mutable-list]]
    [push f [quote let]]
    [push f []]
    [loop [i [quote 0]]
      [if [lt i [size id-constants]]
        [let [name [at id-constants i]]
          [push f [list [quote constant] name [list [quote quote] name]]]
          [cont [add i [quote 1]]]]
        f]]]]

[constant-ids -1 -2 0 1 2 3 4]

[func inc [x] [add x 1]]

[func dec [x] [sub x 1]]

[func not [c] [eqz c]]

[func is-zero [x] [eqz x]]

[func is-odd [x] [bit-and x 1]]

[func is-even [x] [not [is-odd x]]]

[func is-negative [x] [lt x 0]]

[func first [l] [at l 0]]
[func second [l] [at l 1]]
[func third [l] [at l 2]]
[func fourth [l] [at l 3]]
[func last [l] [at l -1]]

[func rest [l] [slice l 1 [size l]]]

[func push-all [mut-list list]
  [let [s-l [size list]]
    [loop [i 0]
      [if [lt i s-l]
        [let []
          [push mut-list [at list i]]
          [cont [inc i]]]
        []]]]]

[func concat-lists [lists]
  [let [res [mutable-list] s [size lists]]
    [loop [i 0]
      [if [lt i s]
        [let []
          [push-all res [at lists i]]
          [cont [inc i]]]
        [freeze res]]]]]

[func concat [.. lists] [concat-lists lists]]

[macro do [.. forms]
  [concat [quote [let []]] forms]]

[macro when [cond .. forms]
  [list
    [quote if] cond
    [concat [quote [do]] forms]
    []]]

[macro when-not [cond .. forms]
  [list
    [quote if] cond
    []
    [concat [quote [do]] forms]]]

[macro assert [cond .. lmsg]
  [list [quote when-not] cond
    [list [quote log] [list [quote quote] [concat [list [quote assert-fail]] lmsg]]]
    [quote [abort]]]]

[macro report-when [cond form .. lmsg]
  [list [quote when] cond
    [list [quote report-error] [list [quote quote] lmsg] form]]]

[macro report-when-not [cond form .. lmsg]
  [list [quote when-not] cond
    [list [quote report-error] [list [quote quote] lmsg] form]]]

[macro report [form .. lmsg]
  [list [quote report-error] [list [quote quote] lmsg] form]]

[macro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [not [is-zero s]] ifs requires an odd number of arguments]
    [if [eq s 1]
        [first clauses]
        [list [quote if] [first clauses]
          [second clauses]
          [concat [quote [ifs]] [slice clauses 2 [size clauses]]]]]]]

[macro and [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      1

      [eq s 1]
      [first clauses]

      [let [gs [gensym]]
        [list [quote let] [list gs [first clauses]]
          [list [quote if] gs
            [concat [quote [and]] [rest clauses]]
            gs]]]]]]

[macro or [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      0

      [eq s 1]
      [first clauses]

      [let [gs [gensym]]
        [list [quote let] [list gs [first clauses]]
          [list [quote if] gs
            gs
            [concat [quote [or]] [rest clauses]]]]]]]]

[func eq-word [a b]
  [and [eq [size a] [size b]]
    [loop [i 0]
      [if [lt i [size a]]
        [if [eq [at a i] [at b i]]
          [cont [inc i]]
          0]
        1]]]]

[func = [a b]
  [if
    [and [is-word a] [is-word b]]
    [eq-word a b]

    [and [is-list a] [is-list b]
      [let [s [size a]]
        [and [eq s [size b]]
          [loop [i [quote 0]]
            [or [ge i s]
              [and [= [at a i] [at b i]] [cont [inc i]]]]]]]]]]

[func test [expected actual]
  [when-not [= expected actual]
    [log [list [quote expected] expected [quote [but got]] actual]]]]

[func index-assoc-list [ctx sym]
  [let [s [size ctx]]
    [loop [i 0]
      [if [ge i s]
        -1
        [if [eq-word [at ctx i] sym]
          i
          [cont [add i 2]]]]]]]

[func assoc-list-has [ctx sym]
  [not [is-negative [index-assoc-list ctx sym]]]]

[func assoc-list-keys [ctx]
  [let [s [size ctx] ml [mutable-list]]
    [loop [j 0]
      [when [lt j s]
        [push ml [at ctx j]]
        [cont [add j 2]]]]
    [freeze ml]]]

[func assoc-list-entries [ctx]
  [let [s [size ctx] ml [mutable-list]]
    [loop [j 0]
      [when [lt j s]
        [push ml [list [at ctx j] [at ctx [inc j]]]]
        [cont [add j 2]]]]
    [freeze ml]]]

[func lookup-assoc-list [ctx sym]
  [let [index [index-assoc-list ctx sym]]
    [assert [not [is-negative index]] lookup-assoc-list key not found]
    [at ctx [inc index]]]]

[func assoc-list-set [ctx sym value]
  [let [index [index-assoc-list ctx sym]]
    [if [is-negative index]
      [do
        [push ctx sym]
        [push ctx value]]
      [set-array ctx [inc index] value]]]]

[func dec-word-to-i32 [dw]
  [let [s [sub 0 [size dw]]]
    [loop [i -1 res 0 multi 1]
      [if [le s i]
        [let [c [at dw i]]
          [when-not [and [le [quote 48] c] [le c [quote 57]]]
            [report dw not a decimal character]]
          [assert [lt res [quote 214748364]] out of bounds]
          [cont [dec i] [add res [mul [sub c [quote 48]] multi]] [mul multi [quote 10]]]]
        res]]]]

[func check-decimal [dw]
  [let [s [size dw]]
    [loop [ii 0]
      [when [lt ii s]
        [let [c [at dw ii]]
          [if [and [le [quote 48] c] [le c [quote 57]]]
            [cont [inc ii]]
            [report dw not a decimal character]]]]]]]

[func is-decimal [dw]
  [let [s [size dw]]
    [loop [i 0]
      [if [lt i s]
        [let [c [at dw i]]
          [if [and [le [quote 48] c] [le c [quote 57]]]
            [cont [inc i]]
            0]]
        1]]]]

[constant type-form [quote form]]
[constant type-list [quote list]]
[constant type-word [quote word]]
[func type-tuple [.. types] [concat [quote [tuple]] types]]
[constant type-i32 [quote i32]]
[constant type-singleton-i32 [type-tuple type-i32]]
[constant type-any [quote type-any]]
[constant type-empty [type-tuple]]
[constant type-error [quote type-error]]
[func is-tuple-type [t] [and [is-list t] [eq [first t] [quote tuple]]]]

[func check-param-arg-conform [param-type arg-t]
  [or
    [= param-type type-any]
    [= param-type arg-t]
    [and [= [size arg-t] 1] [= [first arg-t] param-type]]]]

[func check-form [global-ctx local-ctx tail-pos form]
  [ifs
    [is-word form]
    [loop [cur-ctx local-ctx]
      [if [eq [size cur-ctx] 1]
        [let [param-ctx [first cur-ctx]
              index [index-assoc-list param-ctx form]]
          [if [is-negative index]
            [do
              [report form symbol not found]
              type-error]
            [at param-ctx [inc index]]]]
        [let
          [vars [first cur-ctx]
           outer [second cur-ctx]
           index [index-assoc-list vars form]]
          [if [is-negative index]
            [cont outer]
            [at vars [inc index]]]]]]

    [= form []]
    type-empty

    [let [first-form [first form]
          s-form [size form]
          n-of-args [dec s-form]]
      [assert [is-word first-form] expected a word first]
      [ifs
        [= first-form [quote tuple]]
        [let
          [res-types [mutable-list] limit [inc n-of-args]]
          [loop [i [quote 1]]
            [when [lt i limit]
              [let [arg [at form i]
                    ts [check-form global-ctx local-ctx 0 arg]]
                [push-all res-types ts]
                [report-when-not [= [size ts] 1] arg tuple element not allow to be a tuple]
                [cont [inc i]]]]]
          [type-tuple res-types]]

        [= first-form [quote quote]]
        [do
          [comment todo check if integer or word or list]
          [if [eq n-of-args 1]
            [let [f [second form]]
              [ifs
                [is-list f]
                type-list

                [is-decimal f]
                type-i32

                type-word]]
            type-form]]

        [= first-form [quote if]]
        [do
          [when [gt n-of-args 0]
            [let [c [second form]
                  ct [check-form global-ctx local-ctx 0 c]]
              [report-when-not [= ct type-singleton-i32] c condition not i32]]]
          [loop [i 4]
            [when [lt i s-form]
              [check-form global-ctx local-ctx 1 [at form i]]
              [report [at form i] if extra forms ignored]
              [cont [inc i]]]]
          [if [gt n-of-args 1]
            [let [tt [check-form global-ctx local-ctx tail-pos [third form]]
                  ft [if [eq n-of-args 2] type-empty [check-form global-ctx local-ctx tail-pos [fourth form]]]]
              [if [= tt type-any]
                [if [= ft type-any]
                  [report form if branches both any type maybe this is infinite loop]
                  ft]
                [do
                  [report-when-not [= tt ft] form if branches must have same type]
                  tt]]]]]

        [or
          [= first-form [quote let]]
          [= first-form [quote loop]]]
        [let
          [var-values [mutable-list]
           let-loop-ctx [list var-values local-ctx first-form]
           bindings [if [gt s-form 1] [at form 1] [do [report form expects bindings] []]]
           n-of-bindings [size bindings]]
          [when [lt 1 s-form]
            [let
              [sec [second form]
               bindings [if [is-list sec] sec [do [report sec expects a list of bindings] []]]
               n-of-bindings [size bindings]]
              [report-when-not [is-even n-of-bindings] [last bindings] expects an even number of bindings]
              [loop [i 0]
                [when [lt i [dec n-of-bindings]]
                  [let
                    [var [at bindings i]
                     value [at bindings [inc i]]
                     val-type [check-form global-ctx let-loop-ctx 0 value]
                     - [report-when-not [is-tuple-type val-type] value let expects a single type]]
                    [push var-values var]
                    [push var-values val-type]
                    [cont [add i 2]]]]]]]
          [loop [i 2]
            [when [lt i [dec s-form]]
              [check-form global-ctx let-loop-ctx 0 [at form i]]
              [cont [inc i]]]]
          [when [lt 2 s-form]
            [check-form global-ctx let-loop-ctx [if [= first-form [quote loop]] 1 tail-pos] [last form]]]]

        [= first-form [quote cont]]
        [do
          [loop [cur-ctx local-ctx]
            [if [eq [size cur-ctx] 1]
              [report form cont not inside loop]
              [if [= [quote loop] [third cur-ctx]]
                [let [loop-vars [first cur-ctx]]
                  [report-when-not
                    [eq [mul n-of-args 2] [size loop-vars]]
                    form
                    cont needs same number of arguments as loop]
                  [report-when-not tail-pos form cont not at tail position of loop]]
                [cont [second cur-ctx]]]]]
          type-any]

        [or [= first-form [quote func]]
            [= first-form [quote macro]]]
        [let [params
              [if [gt s-form 2]
                [let [l [third form]]
                  [if [is-list l]
                    l
                    [do
                      [report l expected a list of parameters]
                      []]]]
                [do
                  [report form function expects a list of parameters]
                  []]]
              param-ctx [mutable-list]
              mut-parameter-type-list [mutable-list]
              n-of-param-words [size params]
              has-rest-param [and [lt 1 n-of-param-words] [= [at params -2] [quote ..]]]
              n-of-regular-params [if has-rest-param [sub n-of-param-words 2] n-of-param-words]
              -
              [loop [i 0]
                [when [lt i n-of-regular-params]
                  [let [p [at params i]
                        pt [if [= p [quote -]] [quote any] type-i32]]
                    [report-when [= p [quote ..]] p .. must be at second last position]
                    [when-not [= p [quote -]]
                      [report-when [assoc-list-has param-ctx p] p duplicate parameter]
                      [push param-ctx p]
                      [push param-ctx [list pt]]]
                    [push mut-parameter-type-list pt]
                    [cont [inc i]]]]]
              rest-param-element-type
              [if has-rest-param
                [let [p [last params]
                      pt type-any]
                  [when-not [= p [quote -]]
                    [report-when [assoc-list-has param-ctx p] p duplicate parameter]
                    [push param-ctx p]
                    [push param-ctx [list pt]]]
                  pt]
                0]
              func-ctx [list param-ctx [list []] first-form]
              parameter-type-list [freeze mut-parameter-type-list]
              locals [mutable-list]
              func-sigs [lookup-assoc-list global-ctx [quote function-signatures]]
              -
              [loop [i 3]
                [when [lt i [dec [size form]]]
                  [comment remember to check type is empty maybe even drop unused and warn instead]
                  [check-form global-ctx func-ctx 0 [at form i]]
                  [cont [inc i]]]]
              result-type
              [if [gt [size form] 3]
                [check-form global-ctx func-ctx 0 [last form]]
                type-error]]
            [if [gt s-form 1]
              [let [name [second form]]
                [if [is-word name]
                  [if rest-param-element-type
                    [assoc-list-set func-sigs name
                      [list [quote parameters] parameter-type-list
                            [quote rest-param-element-type] rest-param-element-type
                            [quote results] result-type]]
                    [assoc-list-set func-sigs name
                      [list [quote parameters] parameter-type-list
                            [quote results] result-type]]]
                  [report name expected a word here]]]

            []]]

        [let [func-sigs [lookup-assoc-list global-ctx [quote function-signatures]]
              index [index-assoc-list func-sigs first-form]]
          [if [is-negative index]
            [report first-form function not found]
            [let [sig [at func-sigs [inc index]]
                  parameters [lookup-assoc-list sig [quote parameters]]
                  n-of-parameters [size parameters]]
              [report-when-not [ge n-of-args n-of-parameters] form
                missing arguments]
              [loop [i 1]
                [when [lt i n-of-args]
                  [let [arg [at form i]
                        arg-t [check-form global-ctx local-ctx 0 arg]
                        p-index [dec i]]
                    [when [lt p-index n-of-parameters]
                      [report-when-not [check-param-arg-conform [at parameters p-index] arg-t] arg parameter type mismatch]]
                    [cont [inc i]]]]]
              [loop [i [inc n-of-parameters]]
                [when [lt i s-form]
                  [report [at form i] extra arguments ignored]
                  [cont [inc i]]]]
              [lookup-assoc-list sig [quote results]]]

            ]]]]]]

[func make-mty-ctx []
  [let [bin-insts [quote eq lt le add sub mul]
        ml [mutable-list]]
    [loop [i 0]
      [when [lt i [size bin-insts]]
        [let [name [at bin-insts i]]
          [push ml name]
          [push ml [quote parameters [i32 i32] results [i32]]]
          [cont [inc i]]]]]

    [list
      [quote function-signatures] ml]]]

[func compile-top-level-forms [forms]
  [let [ctx [make-mty-ctx]]
    [loop [i 0]
      [when [lt i [size forms]]
        [compile-top-level-form ctx [at forms i]]
        [cont [inc i]]]]
    ctx]]

[func check-forms [forms]
  [let [gctx [make-mty-ctx]]
    [loop [i 0]
      [when [lt i [size forms]]
        [check-form gctx [list []] 0 [at forms i]]
        [cont [inc i]]]]]]
