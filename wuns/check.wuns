[constant - [quote -]]
[constant .. [quote ..]]

[macro report-when [cond form .. lmsg]
  [list [quote when] cond
    [list [quote report-error] [list [quote quote] lmsg] form]]]

[macro report-when-not [cond form .. lmsg]
  [list [quote when-not] cond
    [list [quote report-error] [list [quote quote] lmsg] form]]]

[macro report [form .. lmsg]
  [list [quote report-error] [list [quote quote] lmsg] form]]

[func test [expected actual]
  [when-not [eq-form expected actual]
    [log [list [quote expected] expected [quote [but got]] actual]]]]

[func is-decimal [dw]
  [let [s [size dw]]
    [loop [i [if [eq [at-word dw 0] [quote 45]] 1 0]]
      [if [lt i s]
        [let [c [at-word dw i]]
          [if [and [le [quote 48] c] [le c [quote 57]]]
            [continue i [inc i]]
            0]]
        1]]]]

[constant type-word [quote word]]
[constant type-i32 [quote i32]]
[constant type-f64 [quote f64]]
[constant type-form [quote form]]
[constant type-any [quote any]]
[constant type-error [quote type-error]]

[func is-word-type [t] [or [eq-form t type-word] [eq-form t type-i32]]]

[func type-list [element-type] [list [quote list] element-type]]
[func type-tuple [.. types] [concat [quote [tuple]] types]]
[constant type-empty [type-tuple]]

[func is-atomic-type [t]
  [or
    [eq-form t type-form]
    [eq-form t type-word]
    [eq-form t type-i32]
    [eq-form t type-f64]
    [eq-form t type-any]
    [eq-form t type-error]]]

[func is-mutable-list-type [t] [and [is-list t] [eq [size t] 2] [eq-word [first t] [quote mutable-list]] [is-atomic-type [second t]]]]
[func is-tuple-type [t] [and [is-list t] [gt [size t] 0] [eq-form [first t] [quote tuple]]]]

[func is-type [t]
  [or
    [is-atomic-type t]
    [and [is-list t] [eq [size t] 2]
      [or [eq-word [first t] [quote list]] [eq-word [first t] [quote mutable-list]]]
      [is-type [second t]]]
    [and [is-list t] [ge [size t] 1]
      [eq-word [first t] [quote tuple]]
      [loop [i 1]
        [if [lt i [size t]]
          [if [is-type [at t i]]
            [continue i [inc i]]
            0]
          1]]]]]

[func is-list-or-mut-list-type [t]
  [and [is-list t] [eq [size t] 2]
    [or [eq-word [first t] [quote list]] [eq-word [first t] [quote mutable-list]]]
    [is-type [second t]]]]

[func is-list-type [t]
  [and [is-list t] [eq [size t] 2]
    [eq-word [first t] [quote list]]
    [is-type [second t]]]]

[func is-type-list [ts]
  [loop [i 0]
    [if [lt i [size ts]]
      [if [is-type [at ts i]]
        [continue i [inc i]]
        0]
      1]]]

[func check-type [t]
  [report-when-not [is-type t] t not a type]]

[func check-type-list [ts]
  [loop [i 0]
    [when [lt i [size ts]]
      [let [t [at ts i]]
        [check-type t]
        [continue i [inc i]]]]]
  ts]

[func check-param-arg-conform [param-type arg-t]
  [or
    [eq-form param-type type-any]
    [eq-form param-type arg-t]
    [and [eq-word param-type type-form]
      [or [is-word-type arg-t] [is-list-type arg-t]]]
    [and [is-list-type param-type] [is-list-or-mut-list-type arg-t]]
    [and [is-list-type param-type] [is-list-type arg-t]
         [eq [size param-type] [size arg-t]]
         [gt [size param-type] 0]
         [eq-word [first param-type] [first arg-t]]
         [loop [i 1]
           [if [lt i [size param-type]]
             [if [check-param-arg-conform [second param-type] [second arg-t]]
               [continue i [inc i]]
               0]
             1]]]]]

[constant global-ctx [mutable-list]]

[func add-sig [name sig-obj]
  [if [assoc-list-has global-ctx name]
    [report name function already defined]
    [assoc-list-set global-ctx name sig-obj]]]

[func try-get-global-sig [name]
  [let [index [assoc-list-index global-ctx name]]
    [if [is-negative index]
      []
      [at global-ctx [inc index]]]]]

[constant interpreter-context [make-interpreter-context [quote check]]]

[constant predicate-to-type
  [quote
    is-word word
    is-i32 i32
    is-list [list any]]]

[func is-external-func [name]
  [let [sig [try-get-global-sig name]]
    [and [gt [size sig] 0] [eq-word [assoc-list-get sig [quote def]] [quote external-func]]]]]

[func try-bind-type-predicate [local-ctx t-form]
  [if [and [is-list t-form] [eq [size t-form] 2]]
    [let [f [first t-form] a [second t-form]]
      [if [and [is-word f] [is-word a] [is-external-func f] [assoc-list-has predicate-to-type f]]
        [do
          [log [list [quote try-bind-type-predicate] t-form f a]]
          [list [list a [assoc-list-get predicate-to-type f]] local-ctx [quote type-pred]]]
        local-ctx]]
    local-ctx]]

[constant node-types [mutable-list]]

[func push-node-type [node type]
  [push node-types [assoc-list-get [meta node] [quote node-id]]]
  [push node-types type]
  type]

[func try-get-node-type [node]
  [let [node-id [assoc-list-get [meta node] [quote node-id]]
        index [assoc-list-index node-types node-id]]
    [if [is-negative index]
      type-error
      [at node-types [inc index]]]]]

[func check-form [local-ctx tail-pos form]
  [ifs
    [is-word form]
    [loop [cur-ctx local-ctx]
      [if [eq [size cur-ctx] 1]
        [let [param-ctx [first cur-ctx]
              index [assoc-list-index param-ctx form]]
          [if [is-negative index]
            [let [sig [try-get-global-sig form]]
              [if [eq [size sig] 0]
                [do
                  [report form symbol not found]
                  type-error]
                [if [eq-word [first sig] [quote constant]]
                  [second sig]
                  [do
                    [report form not a constant]
                    [log [list [quote c] form [quote not a constant]]]
                    [log global-ctx]
                    type-error]]]]
            [at param-ctx [inc index]]]]
        [let
          [vars [first cur-ctx]
           outer [second cur-ctx]
           index [assoc-list-index vars form]]
          [if [is-negative index]
            [continue cur-ctx outer]
            [push-node-type form [at vars [inc index]]]]]]]

    [eq-form [size form] 0]
    [do
      [report form empty form]
      type-empty]

    [let [first-form [first form]
          s-form [size form]
          n-of-args [dec s-form]]
      [assert [is-word first-form] expected a word first]
      [ifs
        [eq-form first-form [quote tuple]]
        [let
          [res-types [mutable-list]]
          [report-when [eq n-of-args 1] form tuple expects zero or at least two arguments]
          [push res-types [quote tuple]]
          [loop [i 1]
            [when [lt i s-form]
              [push res-types [check-form local-ctx 0 [at form i]]]
              [continue i [inc i]]]]
          res-types]

        [eq-form first-form [quote i32]]
        [do
          [if [eq n-of-args 1]
            [report-when-not [is-decimal [second form]] [second form] i32 expects a decimal]
            [report form i32 expects one argument]]
          type-i32]

        [eq-form first-form [quote quote]]
        [do
          [comment todo check if integer or word or list]
          [if [eq n-of-args 1]
            [let [f [second form]]
              [ifs
                [is-list f]
                [type-list type-any]

                [is-decimal f]
                type-i32

                type-word]]
            [type-list type-any]]]

        [eq-form first-form [quote if]]
        [do
          [when [gt n-of-args 0]
            [let [c [second form]
                  ct [check-form local-ctx 0 c]]
              [report-when-not [eq-form ct [quote i32]] c condition not i32]]]
          [loop [i 4]
            [when [lt i s-form]
              [check-form local-ctx 1 [at form i]]
              [report [at form i] if extra forms ignored]
              [continue i [inc i]]]]
          [if [gt n-of-args 1]
            [let [t-ctx [try-bind-type-predicate local-ctx [second form]]
                  tt [check-form t-ctx tail-pos [third form]]
                  ft [if [eq n-of-args 2] type-empty [check-form local-ctx tail-pos [fourth form]]]]
              [push-node-type form
                [if [eq-form tt type-any]
                  ft
                  [if [eq-form ft type-any]
                    tt
                    [do
                      [report-when-not [eq-form tt ft] form if branches must have same type]
                      tt]]]]]]]

        [or
          [eq-form first-form [quote let]]
          [eq-form first-form [quote loop]]]
        [let
          [var-values [mutable-list]
           let-loop-ctx [list var-values local-ctx first-form]
           bindings [if [gt s-form 1] [second form] [do [report form expects bindings] []]]
           n-of-bindings [size bindings]]
          [when [lt 1 s-form]
            [let
              [sec [second form]
               bindings [if [is-list sec] sec [do [report sec expects a list of bindings] []]]
               n-of-bindings [size bindings]]
              [report-when-not [is-even n-of-bindings] [last bindings] expects an even number of bindings]
              [loop [i 0]
                [when [lt i [dec n-of-bindings]]
                  [let
                    [var [at bindings i]
                     value [at bindings [inc i]]
                     val-type [check-form let-loop-ctx 0 value]]
                    [push var-values var]
                    [push var-values val-type]
                    [continue i [add i 2]]]]]]]
          [loop [i 2]
            [when [lt i [dec s-form]]
              [check-form let-loop-ctx 0 [at form i]]
              [continue i [inc i]]]]
          [push-node-type form
            [if [lt 2 s-form]
              [check-form let-loop-ctx [if [eq-form first-form [quote loop]] 1 tail-pos] [last form]]
              type-empty]]]

        [eq-form first-form [quote continue]]
        [do
          [loop [cur-ctx local-ctx]
            [if [eq [size cur-ctx] 1]
              [report form cont not inside loop]
              [if [eq-form [quote loop] [third cur-ctx]]
                [let [loop-vars [first cur-ctx]]
                  [report-when-not
                    [is-even n-of-args]
                    form
                    continue takes a list of pairs of bindings]
                  [loop [i 1]
                    [when [lt i n-of-args]
                      [let [var [at form i]
                            value [at form [inc i]]
                            val-type [check-form cur-ctx 0 value]
                            index [assoc-list-index loop-vars var]]
                        [if [is-negative index]
                          [report var loop var not found]
                          [let [type [at loop-vars [inc index]]]
                            [report-when-not [eq-form type val-type] value type mismatch]]]
                      [continue i [add i 2]]]]]]
                [report-when-not tail-pos form continue not at tail position of loop]
                [continue cur-ctx [second cur-ctx]]]]]
          type-any]

        [eq-form first-form [quote import]]
        []

        [eq-form first-form [quote export]]
        []

        [eq-form first-form [quote constant]]
        [let [name [second form]
              value [third form]
              value-type [check-form local-ctx 0 value]]
          [add-sig name [list [quote constant] value-type
                              [quote def] first-form]]]

        [eq-form first-form [quote external-func]]
        [if [gt [size form] 1]
          [let [name [second form]]
            [if [is-word name]
              [let [param-types
                    [if [gt s-form 2]
                      [check-type-list [third form]]
                      [list]]
                    result-type
                    [if [gt s-form 3]
                      [check-type [fourth form]]
                      type-error]]
                [add-sig name
                  [list [quote parameters] param-types
                        [quote results] [fourth form]
                        [quote def] first-form]]]
              [report name external-func expects a name]]]
          [report form external-func expects a name]]

        [or [eq-form first-form [quote func]]
            [eq-form first-form [quote macro]]]
        [let [params
              [if [gt s-form 2]
                [let [l [third form]]
                  [if [is-list l]
                    l
                    [do
                      [report l expected a list of parameters]
                      []]]]
                [do
                  [report form function expects a list of parameters]
                  []]]
              param-ctx [mutable-list]
              mut-parameter-type-list [mutable-list]
              n-of-param-words [size params]
              has-rest-param [and [lt 1 n-of-param-words] [eq-form [at params -2] ..]]
              n-of-regular-params [if has-rest-param [sub n-of-param-words 2] n-of-param-words]
              type-annotation
              [if [gt s-form 3]
                [let [anno [fourth form]]
                  [if [and [is-list anno] [eq [size anno] 3]
                        [eq-word [first anno] [quote type]]]
                    [let [anno-params [second anno]
                          anno-results [third anno]]
                      [report-when-not [eq [size anno-params] n-of-param-words] anno-params wrong number of types]
                      [for i 0 n-of-regular-params
                        [check-type [at anno-params i]]]
                      [when [and has-rest-param [lt 1 [size anno-params]]]
                        [let [dd [at anno-params -2]]
                          [report-when-not [eq-word dd ..] dd expected ..]
                          [check-type [last anno-params]]]]
                      [check-type anno-results]
                      [list anno-params anno-results]]
                    [list]]]
                [list]]
              anno-params [if [size type-annotation] [first type-annotation] 0]
              anno-results [if [size type-annotation] [second type-annotation] 0]
              -
              [loop [i 0]
                [when [lt i n-of-regular-params]
                  [let [p [at params i]
                        pt [if anno-params [at anno-params i] [quote any]]]
                    [report-when [eq-form p ..] p .. must be at second last position]
                    [when-not [eq-form p -]
                      [report-when [assoc-list-has param-ctx p] p duplicate parameter]
                      [push-node-type p pt]
                      [push param-ctx p]
                      [push param-ctx pt]]
                    [push mut-parameter-type-list pt]
                    [continue i [inc i]]]]]
              rest-param-element-type
              [if has-rest-param
                [let [p [last params]
                      pt [if anno-params [last anno-params] type-any]]
                  [report-when-not [is-word p] p not a word]
                  [when-not [eq-form p -]
                    [report-when [assoc-list-has param-ctx p] p duplicate parameter]
                    [push param-ctx p]
                    [push param-ctx [type-list pt]]]
                  pt]
                0]
              func-ctx [list param-ctx [list []] first-form]
              parameter-type-list [freeze mut-parameter-type-list]
              locals [mutable-list]
              -
              [loop [i 3]
                [when [lt i [dec [size form]]]
                  [comment remember to check type is empty maybe even drop unused and warn instead]
                  [check-form func-ctx 0 [at form i]]
                  [continue i [inc i]]]]
              result-type
              [if [gt [size form] 3]
                [check-form func-ctx 0 [last form]]
                type-error]]
            [when [size type-annotation]
              [when-not [eq-form anno-results result-type]
                [report-error [list [quote func mismatch] result-type anno-results] [last form]]]]
            [if [gt s-form 1]
              [let [name [second form]]
                [if [is-word name]
                  [let [ml [mutable-list]]
                    [push-all ml
                      [list [quote parameters] parameter-type-list
                            [quote results] result-type
                            [quote def] first-form]]
                    [when rest-param-element-type
                      [push-all ml
                        [list [quote rest-param-element-type] rest-param-element-type]]]
                    [add-sig name ml]]
                  [report name expected a word here]]]
              []]]

        [let [sig [try-get-global-sig first-form]
              sig-def [if [assoc-list-has sig [quote def]] [assoc-list-get sig [quote def]] 0]]
          [if [eq 0 [size sig]]
            [let [instruction [get-instruction first-form]]
              [if [ne 0 [size instruction]]
                [let [parameters [assoc-list-get instruction [quote parameters]]
                      imm-parameters [assoc-list-get instruction [quote immediate-parameters]]
                      n-of-parameters [assoc-list-get instruction [quote arity]]
                      results [assoc-list-get instruction [quote results]]]
                  [report-when-not [eq n-of-args n-of-parameters] form wrong number of arguments]
                  [loop [i 1]
                    [when [lt i s-form]
                      [let [arg [at form i]
                            arg-t [check-form local-ctx 0 arg]
                            p-index [dec i]]
                        [when [lt p-index n-of-parameters]
                          [let [pt [at parameters p-index]]
                            [when-not [check-param-arg-conform pt arg-t]
                              [report-error [concat [quote parameter does not match] [list pt arg-t]] arg]]]]
                      [continue i [inc i]]]]]
                  results]
                [report form function not found]]]
            [let [parameters [assoc-list-get sig [quote parameters]]
                  index-rest [assoc-list-index sig [quote rest-param-element-type]]
                  n-of-parameters [size parameters]]
              [report-when-not [ge n-of-args n-of-parameters] form
                missing arguments]
              [if [eq-word sig-def [quote macro]]
                [let [expanded [context-macro-expand interpreter-context form]
                      ex-type [check-form local-ctx tail-pos expanded]]
                  [log [list [quote macro-form] form]]
                  [log [list [quote expanded] expanded ]]
                  [log [list [quote type-of-expanded] ex-type]]
                  ex-type
                  ]
                [do
                  [loop [i 1]
                    [when [lt i s-form]
                      [let [arg [at form i]
                            arg-t [check-form local-ctx 0 arg]
                            p-index [dec i]]
                        [when [lt p-index n-of-parameters]
                          [let [pt [at parameters p-index]]
                            [when-not [check-param-arg-conform pt arg-t]
                              [report-error [concat [quote parameter does not match] [list pt arg-t]] arg]]]]
                        [continue i [inc i]]]]]
                  [when [is-negative index-rest]
                    [loop [i [inc n-of-parameters]]
                      [when [lt i s-form]
                        [report [at form i] extra arguments ignored]
                        [continue i [inc i]]]]
                    [let [rest-param-element-type [at sig [inc index-rest]]]
                      [loop [i [inc n-of-parameters]]
                        [when [lt i s-form]
                          [let [arg [at form i]
                                arg-t [check-form local-ctx 0 arg]]
                            [report-when-not [check-param-arg-conform rest-param-element-type arg-t] arg
                              rest parameter type mismatch]]
                          [continue i [inc i]]]]]]
                          [assoc-list-get sig [quote results]]
                          ]
                          ]
                ]

            ]]]]]]

[func check-top-form [form]
  [check-form [list []] 0 form]
  [context-eval interpreter-context form]]

[func check-forms [forms]
  [for i 0 [size forms]
    [let [f [at forms i]]
      [check-top-form f]
      ]]
  [log [list [quote node-types] node-types]]
      ]

[comment
  [check-forms
    [quote
      [func f [x y] [add x y]]
      [func g [x y] [sub x y]]]]
  [check-forms [quote [func f [x y] [add x y]] [func g [x y] [sub x y]]]]

  [check-forms
    [quote
      [func f [x y] [add x y]]
      [func g [x y] [sub x y]]]]
]
[export check-top-form check-forms try-get-node-type node-types]
