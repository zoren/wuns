[import standard-library.wuns]
[constant-ids - ..]

[external-func report-error [list form] []]

[macro report-when [cond form .. lmsg]
  [list [quote when] cond
    [list [quote report-error] [list [quote quote] lmsg] form]]]

[macro report-when-not [cond form .. lmsg]
  [list [quote when-not] cond
    [list [quote report-error] [list [quote quote] lmsg] form]]]

[macro report [form .. lmsg]
  [list [quote report-error] [list [quote quote] lmsg] form]]

[func test [expected actual]
  [when-not [= expected actual]
    [log [list [quote expected] expected [quote [but got]] actual]]]]

[macro with-type [f t] [list [quote assoc-meta] f [quote quote type] [list [quote quote] t]]]

[func is-decimal [dw]
  [let [s [size dw]]
    [loop [i 0]
      [if [lt i s]
        [let [c [at dw i]]
          [if [and [le [quote 48] c] [le c [quote 57]]]
            [continue i [inc i]]
            0]]
        1]]]]

[constant type-form [quote form]]
[constant type-list [quote list]]
[constant type-word [quote word]]
[func type-tuple [.. types] [concat [quote [tuple]] types]]
[constant type-i32 [quote i32]]
[constant type-any [quote type-any]]
[constant type-empty [type-tuple]]
[constant type-error [quote type-error]]
[constant type-mutable-list [quote mutable-list]]
[func is-tuple-type [t] [and [is-list t] [gt [size t] 0] [= [first t] [quote tuple]]]]

[func is-atomic-type [t]
  [or
    [= t type-form]
    [= t type-list]
    [= t type-word]
    [= t type-i32]
    [= t type-any]
    [= t type-empty]
    [= t type-error]
    [= t type-mutable-list]]]

[func is-type [t]
  [or [is-atomic-type t]]]

[func is-type-list [ts]
  [loop [i 0]
    [if [lt i [size ts]]
      [if [is-atomic-type [at ts i]]
        [continue i [inc i]]
        0]
      1]]]

[func check-param-arg-conform [param-type arg-t]
  [or
    [= param-type type-any]
    [= param-type arg-t]
    [and [= [size arg-t] 1] [= [first arg-t] param-type]]]]

[func check-form [global-ctx local-ctx tail-pos form]
  [ifs
    [is-word form]
    [loop [cur-ctx local-ctx]
      [if [eq [size cur-ctx] 1]
        [let [param-ctx [first cur-ctx]
              index [assoc-list-index param-ctx form]]
          [if [is-negative index]
            [do
              [report form symbol not found]
              type-error]
            [at param-ctx [inc index]]]]
        [let
          [vars [first cur-ctx]
           outer [second cur-ctx]
           index [assoc-list-index vars form]]
          [if [is-negative index]
            [continue cur-ctx outer]
            [at vars [inc index]]]]]]

    [= form []]
    type-empty

    [let [first-form [first form]
          s-form [size form]
          n-of-args [dec s-form]]
      [assert [is-word first-form] expected a word first]
      [ifs
        [= first-form [quote tuple]]
        [let
          [res-types [mutable-list] limit [inc n-of-args]]
          [loop [i [quote 1]]
            [when [lt i limit]
              [let [arg [at form i]
                    ts [check-form global-ctx local-ctx 0 arg]]
                [push-all res-types ts]
                [report-when-not [= [size ts] 1] arg tuple element not allow to be a tuple]
                [continue i [inc i]]]]]
          [type-tuple res-types]]

        [= first-form [quote quote]]
        [do
          [comment todo check if integer or word or list]
          [if [eq n-of-args 1]
            [let [f [second form]]
              [ifs
                [is-list f]
                type-list

                [is-decimal f]
                type-i32

                type-word]]
            type-form]]

        [= first-form [quote if]]
        [do
          [when [gt n-of-args 0]
            [let [c [second form]
                  ct [check-form global-ctx local-ctx 0 c]]
              [report-when-not [= ct type-i32] c condition not i32]]]
          [loop [i 4]
            [when [lt i s-form]
              [check-form global-ctx local-ctx 1 [at form i]]
              [report [at form i] if extra forms ignored]
              [continue i [inc i]]]]
          [if [gt n-of-args 1]
            [let [tt [check-form global-ctx local-ctx tail-pos [third form]]
                  ft [if [eq n-of-args 2] type-empty [check-form global-ctx local-ctx tail-pos [fourth form]]]]
              [if [= tt type-any]
                [if [= ft type-any]
                  [report form if branches both any type maybe this is infinite loop]
                  ft]
                [do
                  [report-when-not [= tt ft] form if branches must have same type]
                  tt]]]]]

        [or
          [= first-form [quote let]]
          [= first-form [quote loop]]]
        [let
          [var-values [mutable-list]
           let-loop-ctx [list var-values local-ctx first-form]
           bindings [if [gt s-form 1] [second form] [do [report form expects bindings] []]]
           n-of-bindings [size bindings]]
          [when [lt 1 s-form]
            [let
              [sec [second form]
               bindings [if [is-list sec] sec [do [report sec expects a list of bindings] []]]
               n-of-bindings [size bindings]]
              [report-when-not [is-even n-of-bindings] [last bindings] expects an even number of bindings]
              [loop [i 0]
                [when [lt i [dec n-of-bindings]]
                  [let
                    [var [at bindings i]
                     value [at bindings [inc i]]
                     val-type [check-form global-ctx let-loop-ctx 0 value]
                     ]
                    [push var-values var]
                    [push var-values val-type]
                    [continue i [add i 2]]]]]]]
          [loop [i 2]
            [when [lt i [dec s-form]]
              [check-form global-ctx let-loop-ctx 0 [at form i]]
              [continue i [inc i]]]]
          [when [lt 2 s-form]
            [check-form global-ctx let-loop-ctx [if [= first-form [quote loop]] 1 tail-pos] [last form]]]]

        [= first-form [quote continue]]
        [do
          [loop [cur-ctx local-ctx]
            [if [eq [size cur-ctx] 1]
              [report form cont not inside loop]
              [if [= [quote loop] [third cur-ctx]]
                [let [loop-vars [first cur-ctx]]
                  [report-when-not
                    [is-even n-of-args]
                    form
                    continue takes a list of pairs of bindings]
                  [loop [i 1]
                    [when [lt i n-of-args]
                      [let [var [at form i]
                            value [at form [inc i]]
                            val-type [check-form global-ctx cur-ctx 0 value]
                            index [assoc-list-index loop-vars var]]
                        [if [is-negative index]
                          [report var loop var not found]
                          [let [type [at loop-vars [inc index]]]
                            [report-when-not [= type val-type] value type mismatch]]]
                      [continue i [add i 2]]]]]]
                [report-when-not tail-pos form continue not at tail position of loop]
                [continue cur-ctx [second cur-ctx]]]]]
          type-any]

        [= first-form [quote external-func]]
        [let [func-sigs [assoc-list-get global-ctx [quote function-signatures]]]
        [if [gt [size form] 1]
          [let [name [second form]]
            [if [is-word name]
              [let [param-types
                    [if [gt s-form 2]
                      [let [ps [third form]]
                        [report-when-not [is-type-list ps] ps expected a list of types]
                        ps]
                      []]
                    result-types
                    [if [gt s-form 3]
                      [let [rs [fourth form]]
                        [report-when-not [is-type-list rs] rs expected a list of types]
                        rs]
                      []]]
                [assoc-list-set func-sigs name
                  [list [quote parameters] param-types
                        [quote results] result-types]]]
              [report name extern expects a name]]]
          [report form extern expects a name]]]

        [or [= first-form [quote func]]
            [= first-form [quote macro]]]
        [let [params
              [if [gt s-form 2]
                [let [l [third form]]
                  [if [is-list l]
                    l
                    [do
                      [report l expected a list of parameters]
                      []]]]
                [do
                  [report form function expects a list of parameters]
                  []]]
              param-ctx [mutable-list]
              mut-parameter-type-list [mutable-list]
              n-of-param-words [size params]
              has-rest-param [and [lt 1 n-of-param-words] [= [at params -2] ..]]
              n-of-regular-params [if has-rest-param [sub n-of-param-words 2] n-of-param-words]
              -
              [loop [i 0]
                [when [lt i n-of-regular-params]
                  [let [p [at params i]
                        pt [if [= p -] type-any type-form]]
                    [report-when [= p ..] p .. must be at second last position]
                    [when-not [= p -]
                      [report-when [assoc-list-has param-ctx p] p duplicate parameter]
                      [push param-ctx p]
                      [push param-ctx [list pt]]]
                    [push mut-parameter-type-list pt]
                    [continue i [inc i]]]]]
              rest-param-element-type
              [if has-rest-param
                [let [p [last params]
                      pt type-any]
                  [report-when-not [is-word p] p not a word]
                  [when-not [= p -]
                    [report-when [assoc-list-has param-ctx p] p duplicate parameter]
                    [push param-ctx p]
                    [push param-ctx [list pt]]]
                  pt]
                0]
              func-ctx [list param-ctx [list []] first-form]
              parameter-type-list [freeze mut-parameter-type-list]
              locals [mutable-list]
              func-sigs [assoc-list-get global-ctx [quote function-signatures]]
              -
              [loop [i 3]
                [when [lt i [dec [size form]]]
                  [comment remember to check type is empty maybe even drop unused and warn instead]
                  [check-form global-ctx func-ctx 0 [at form i]]
                  [continue i [inc i]]]]
              result-type
              [if [gt [size form] 3]
                [check-form global-ctx func-ctx 0 [last form]]
                type-error]]
            [if [gt s-form 1]
              [let [name [second form]]
                [if [is-word name]
                  [if rest-param-element-type
                    [assoc-list-set func-sigs name
                      [list [quote parameters] parameter-type-list
                            [quote rest-param-element-type] rest-param-element-type
                            [quote results] result-type]]
                    [assoc-list-set func-sigs name
                      [list [quote parameters] parameter-type-list
                            [quote results] result-type]]]
                  [report name expected a word here]]]
              []]]

        [let [func-sigs [assoc-list-get global-ctx [quote function-signatures]]
              index [assoc-list-index func-sigs first-form]]
          [if [is-negative index]
            [report first-form function not found]
            [let [sig [at func-sigs [inc index]]
                  parameters [assoc-list-get sig [quote parameters]]
                  index-rest [assoc-list-index sig [quote rest-param-element-type]]
                  n-of-parameters [size parameters]]
              [report-when-not [ge n-of-args n-of-parameters] form
                missing arguments]
              [loop [i 1]
                [when [lt i n-of-args]
                  [let [arg [at form i]
                        arg-t [check-form global-ctx local-ctx 0 arg]
                        p-index [dec i]]
                    [when [lt p-index n-of-parameters]
                      [let [
                        pt [at parameters p-index]]
                        [when-not [check-param-arg-conform pt arg-t]
                          [report-error [concat [quote parameter does not match] [list pt arg-t]] arg]]
                      [report-when-not [check-param-arg-conform pt arg-t] arg parameter type mismatch]]
                      ]
                    [continue i [inc i]]]]]
              [if [is-negative index-rest]
                [loop [i [inc n-of-parameters]]
                  [when [lt i s-form]
                    [report [at form i] extra arguments ignored]
                    [continue i [inc i]]]]
                [let [rest-param-element-type [at sig [inc index-rest]]]
                  [loop [i [inc n-of-parameters]]
                    [when [lt i s-form]
                      [let [arg [at form i]
                            arg-t [check-form global-ctx local-ctx 0 arg]]
                        [report-when-not [check-param-arg-conform rest-param-element-type arg-t] arg
                          rest parameter type mismatch]
                          ]
                      [continue i [inc i]]]]]]
              [assoc-list-get sig [quote results]]]

            ]]]]]]

[func make-mty-ctx []
  [let [bin-insts [quote eq lt le add sub mul]
        ml [mutable-list]]
    [loop [i 0]
      [when [lt i [size bin-insts]]
        [let [name [at bin-insts i]]
          [assoc-list-set ml name [quote parameters [i32 i32] results i32]]
          [continue i [inc i]]]]]

    [list
      [quote function-signatures] ml]]]

[func check-forms [forms]
  [let [gctx [make-mty-ctx]]
    [loop [i 0]
      [when [lt i [size forms]]
        [check-form gctx [list []] 0 [at forms i]]
        [continue i [inc i]]]]]]

[comment
  [check-forms
    [quote
      [func f [x y] [add x y]]
      [func g [x y] [sub x y]]]]
  [check-forms [quote [func f [x y] [add x y]] [func g [x y] [sub x y]]]]
]
