[import env mem [memory 0]]

[import env log-pointer [func [i32 i32] []]]
[import env log-i32 [func [i32] []]]

[constant 0 [i32.const 0]]
[constant 1 [i32.const 1]]

[defn is-negative [x] [i32.lt-s x [i32.const 0]]]

[defn tag [p] [i32.load [memarg mem 0 offset 0 align 4] p]]
[defn size [p] [i32.load [memarg mem 0 offset 4 align 4] p]]

[constant tag-word [i32.const 1]]
[constant tag-list [i32.const 3]]

[defn is-word [f] [i32.eq [tag f] tag-word]]
[defn is-list [f] [i32.eq [tag f] tag-list]]
[defn not [c] [i32.eq c [i32.const 0]]]

[defn log-word [w]
  [log-pointer [i32.add [i32.const 8] w] [size w]]]

[defn log-abort [w]
  [log-word w]
  [unreachable]]

[defn at-word [w i]
  [if [not [is-word w]] [log-abort [quote not-a-word]]]
  [if [is-negative i] [log-abort [quote negative-index]]]
  [if [i32.ge-s i [size w]] [log-abort [quote index-out-of-bounds]]]
  [i32.load8-s [memarg mem 0 offset 8 align 1] [i32.add w i]]]

[defn at-list [l i]
  [if [not [is-list l]] [log-abort [quote not-a-list]]]
  [if [is-negative i] [log-abort [quote negative-index]]]
  [if [i32.ge-s i [size l]] [log-abort [quote index-out-of-bounds]]]
  [i32.load [memarg mem 0 offset 8 align 4] [i32.add l [i32.mul i [i32.const 4]]]]]

[defn alloc-init []
  [if [i32.load [memarg mem 0 offset 0 align 4] [i32.const 0]] [log-abort [quote alloc-already-initialized]]]
  [i32.store [memarg mem 0 offset 0 align 4] [i32.const 0] wuns-active-mem-top]]

[defn main []
  [log-word [quote hello]]
  [log-word [quote world]]
  [log-i32 [quote hello]]
  [log-word [at-list [quote [xyz afg 3dsf]] [i32.const 0]]]
  [log-word [at-list [quote [xyz afg 3dsf]] [i32.const 1]]]
  [log-word [at-list [quote [xyz afg 3dsf]] [i32.const 2]]]
  ]

