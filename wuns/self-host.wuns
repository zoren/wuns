[import env mem [memory 0]]

[import env log-pointer [func [i32 i32] []]]
[import env log-i32 [func [i32] []]]

[constant 0 [i32.const 0]]
[constant 1 [i32.const 1]]
[constant 2 [i32.const 2]]
[constant 4 [i32.const 4]]

[defn inc [x] [i32.add x 1]]
[defn not [c] [if c [i32.const 0] [i32.const 1]]]
[defn is-zero [x] [i32.eq x [i32.const 0]]]
[defn is-negative [x] [i32.lt-s x [i32.const 0]]]

[defn tag [p] [i32.load [memarg mem 0 offset 0 align 4] p]]
[defn size [p] [i32.load [memarg mem 0 offset 4 align 4] p]]

[constant tag-word [i32.const 1]]
[constant tag-list [i32.const 3]]

[defn is-word [f] [i32.eq [tag f] tag-word]]
[defn is-list [f] [i32.eq [tag f] tag-list]]

[defn log-word [w]
  [log-pointer [i32.add [i32.const 8] w] [size w]]]

[defn log-abort [w]
  [log-word w]
  [unreachable]]

[defn at-word [w i]
  [if [not [is-word w]] [log-abort [quote not-a-word]]]
  [if [is-negative i] [log-abort [quote negative-index]]]
  [if [i32.ge-s i [size w]] [log-abort [quote index-out-of-bounds]]]
  [i32.load8-s [memarg mem 0 offset 8 align 1] [i32.add w i]]]

[defn at [l i]
  [if [not [is-list l]] [log-abort [quote not-a-list]]]
  [if [is-negative i] [log-abort [quote negative-index]]]
  [if [i32.ge-s i [size l]] [log-abort [quote index-out-of-bounds]]]
  [i32.load [memarg mem 0 offset 8 align 4] [i32.add l [i32.mul i [i32.const 4]]]]]

[defn alloc-init []
  [if [i32.load [memarg mem 0 offset 0 align 4] [i32.const 0]] [log-abort [quote alloc-already-initialized]]]
  [i32.store [memarg mem 0 offset 0 align 4] [i32.const 0] wuns-active-mem-top]]

[defn not-is-address-aligned [x]
  [i32.and x [i32.const 3]]]

[defn alloc [size]
  [if [is-negative size] [log-abort [quote bump-alloc-size-must-be-positive]]]
  [if [i32.gt-s size [i32.const 65536]] [log-abort [quote bump-alloc-size-too-large]]]
  [if [not-is-address-aligned size] [log-abort [quote bump-alloc-size-not-aligned]]]
  [let [current-top [i32.load [memarg mem 0 offset 0 align 4] [i32.const 0]]]
    [if [i32.eq current-top [i32.const 0]] [log-abort [quote alloc-memory-not-initialized]]]
    [if [not-is-address-aligned current-top] [log-abort [quote bump-alloc-current-top-not-aligned]]]
    [let [mem-size-bytes [i32.mul [memory.size 0] [i32.const 65536]]]
      [if [i32.gt-s current-top mem-size-bytes] [log-abort [quote bump-alloc-current-top-out-of-bounds]]]
      [let [new-top [i32.add current-top size]]
        [if [i32.gt-s new-top mem-size-bytes] [log-abort [quote bump-alloc-out-of-memory]]]
        [i32.store [memarg mem 0 offset 0 align 4] [i32.const 0] new-top]]]
    current-top]]

[constant tag-mutable-list [i32.const 7]]

[defn alloc-list [s]
  [if [is-negative s] [log-abort [quote alloc-list-size-must-be-positive]]]
  [let [p [alloc [i32.mul [i32.add s [i32.const 2]] [i32.const 4]]]]
    [i32.store [memarg mem 0 offset 0 align 4] p tag-mutable-list]
    [i32.store [memarg mem 0 offset 4 align 4] p s]
    p]]

[defn set-list [l i v]
  [if [not [i32.eq [tag l] tag-mutable-list]] [log-abort [quote set-list-not-a-mutable-list]]]
  [if [is-negative i] [log-abort [quote set-list-negative-index]]]
  [if [i32.ge-s i [size l]] [log-abort [quote set-list-index-out-of-bounds]]]
  [i32.store [memarg mem 0 offset 8 align 4] [i32.add l [i32.mul i [i32.const 4]]] v]]

[defn lock-list [l]
  [if [not [i32.eq [tag l] tag-mutable-list]] [log-abort [quote set-list-not-a-mutable-list]]]
  [i32.store [memarg mem 0 offset 0 align 4] l tag-list]]

[defn stupid-gauss [n]
  [loop [i [i32.const 0] r [i32.const 0]]
    [if [i32.le-s i n]
      [continue r [i32.add i r] i [inc i]]
      r]]]

[defn main []
  [log-word [quote hello]]
  [log-word [quote world]]
  [let [l [quote 123 abc xyz]]
    [log-word [at l [i32.const 0]]]
    [log-word [at l [i32.const 1]]]
    [log-word [at l [i32.const 2]]]]
  [alloc-init]
  [alloc [i32.const 4]]
  [let [mut-list [alloc-list 1]]
    [set-list mut-list [i32.const 0] [quote word-in-list]]
    [lock-list mut-list]
    [log-word [at mut-list [i32.const 0]]]]
  [log-i32 [stupid-gauss [i32.const 10]]]
  [log-i32 [stupid-gauss [i32.const 100]]]

  ]
