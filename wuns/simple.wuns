[load wat.wuns]
[load interpreter-externs.wuns]

[defn align [p x]
  [intrinsic i32.and
    [add x [dec p]]
    [intrinsic i32.xor [i32 -1] [dec p]]]]

[type primitive-type []
  [record
    [prefix word]
    [bytes i32]]]

[defn primitive-type/bits [pt]
  [mul 8 [primitive-type/bytes pt]]]

[defn primitive-type/name [pt]
  [concat-words [primitive-type/prefix pt] [int-to-word [primitive-type/bits pt]]]]

[def primitive-types-by-name
  [let [m [transient-kv-map]]
    [for-each prefix-bits [list
        [pair [word i] 1]
        [pair [word u] 1]

        [pair [word i] 2]
        [pair [word u] 2]

        [pair [word i] 4]
        [pair [word u] 4]

        [pair [word i] 8]

        [pair [word f] 4]
        [pair [word f] 8]

        [pair [word v] [i32 16]]]
      [let [prefix [pair/fst prefix-bits]
            bytes [pair/snd prefix-bits]
            pt [primitive-type prefix bytes]]
        [set-kv-map m [primitive-type/name pt] pt]]]
    m]]

[defn get-primitive [word]
  [get primitive-types-by-name word]]

[defn primitive-is-wasm-value-type [pt]
  [let
    [prefix [primitive-type/prefix pt] bits [primitive-type/bits pt]]
    [or
      [and [or [eq-word prefix [word i]] [eq-word prefix [word f]]] [or [eq bits [i32 32]] [eq bits [i32 64]]]]
      [eq-word [primitive-type/name pt] [word v128]]]]]

[defn primitive-type-is-integer [p]
  [let [prefix [primitive-type/prefix p]]
    [or [eq-word prefix [word u]] [eq-word prefix [word i]]]]]

[defn primitive-integer-type-min-max-range [pt]
  [switch [primitive-type/prefix pt]
    [[word i]]
    [let [bits [primitive-type/bits pt]
          pow2 [intrinsic i32.shl 1 [dec bits]]]
        [pair [sub 0 pow2] [dec pow2]]]

    [[word u]]
    [let [bits [primitive-type/bits pt]
          pow2 [intrinsic i32.shl 1 bits]]
        [pair 0 [dec pow2]]]

    [logq-abort unsupported literal type]]]

[def type-primitive-i32 [get-primitive [word i32]]]
[def type-primitive-i64 [get-primitive [word i64]]]
[def type-primitive-f32 [get-primitive [word f32]]]
[def type-primitive-f64 [get-primitive [word f64]]]

[type name []
  [record
    [word word]]]

[type let-or-loop []
  [union [let] [loop]]]

[type imm-arg []
  [union [memory name]]]

[type
  type []
  [union
    [primitive primitive-type]
    [var name]
    [wildcard name]
    [passive-ref type]
    [pointer type type]

    [array type [option type]]
    [tuple [list type]]
    [record [list [pair name type]]]

    [union [list type]]

    [exp exp]

    [func [list type] type]
    [empty]]

  exp []
  [union
    [integer primitive-type i32]
    [float primitive-type f64]
    [var name]

    [call name [list exp]]
    [intrinsic name [list imm-arg] [list exp]]
    [size-of-type type]
    [size-of-exp exp]

    [if exp exp exp]
    [let-loop let-or-loop [list [pair name exp]] [list exp]]
    [continue [list [pair name exp]]]
    [do [list exp]]

    [cast type exp]

    [ref exp]
    [deref exp]

    [index exp exp]
    [field exp name]

    [array type [list exp]]
    [tuple [list exp]]
    [record [list [pair name exp]]]

    [assign exp exp]


    [data
      ; a memory
      exp
      ; a constant exp
      exp]
    [data-passive exp]
    [memory-static-top exp]
    ]]

[defn may-side-effect [e]
  [match e
    [exp/integer - --] false
    [exp/float - --] false
    [exp/var -] false
    [exp/cast - e] [may-side-effect e]
    [exp/field t -] [may-side-effect t]
    [exp/index t i] [or [may-side-effect t] [may-side-effect i]]
    [exp/intrinsic n - args]
    [or
      [eq-word [name/word n] [word unreachable]]
      [exists args may-side-effect]]
    true]]

[def type-i32 [type/primitive type-primitive-i32]]
[def type-i64 [type/primitive type-primitive-i64]]
[def type-empty [type/empty]]
[def type-tuple-empty [type/tuple [list]]]

[defn get-pointer-args [t]
  [match t
    [type/pointer m p]
    [pair m p]

    [logq-abort get-pointer-args not a pointer [identity t]]]]

[type immediate-type []
  [union
    [memory]]]

[type intrinsic-type []
  [record
    [immediate-parameters [list immediate-type]]
    [parameters [list type]]
    [result type]]]

[defn intrinsic-type-from-name [n]
  [switch n
    [[word i32.add] [word i32.sub] [word i32.mul]
     [word i32.and] [word i32.or] [word i32.xor]
     [word i32.shl] [word i32.shr-s] [word i32.shr-u]
     [word i32.eq] [word i32.ne]
     [word i32.lt-s] [word i32.le-s]
     [word i32.gt-s] [word i32.ge-s]]
    [intrinsic-type [list] [list type-i32 type-i32] type-i32]

    [[word i64.add] [word i64.sub] [word i64.mul]
     [word i64.and] [word i64.or] [word i64.xor]]
    [intrinsic-type [list] [list type-i64 type-i64] type-i64]

    [[word i64.eq] [word i64.ne]
     [word i64.lt-s] [word i64.le-s]
     [word i64.gt-s] [word i64.ge-s]]
    [intrinsic-type [list] [list type-i64 type-i64] type-i32]

    [[word unreachable]]
    [intrinsic-type [list] [list] type-empty]

    [[word memory.size]]
    [intrinsic-type [list [immediate-type/memory]] [list] type-i32]

    [[word memory.grow]]
    [intrinsic-type [list [immediate-type/memory]] [list type-i32] type-i32]

    [logq-abort not implemented intrinsic [identity n]]]]

[defn try-get-primitive [t]
  [match t
    [type/primitive p] [option/some p]
    [option/none]]]

[defn type-substitute [type-env outer-t]
  [[func go [t]
    [match t
      [type/var tv]
      [if-let [subst-t [try-get type-env [name/word tv]]]
        subst-t
        [logq-abort type-substitute var not found [identity tv]]]

      [type/wildcard -] t
      [type/primitive -] t
      [type/exp -] t

      [type/tuple ts]
      [type/tuple [list-map a ts [go a]]]

      [type/pointer mt pt]
      [type/pointer [go mt] [go pt]]

      [type/array at opt-et]
      [type/array [go at] [option-map go opt-et]]

      [type/record fs]
      [type/record [list-map f fs [pair [pair/fst f] [go [pair/snd f]]]]]

      [type/union ts]
      [type/union [list-map a ts [go a]]]

      [logq-abort type-substitute not implemented [identity t]]]]
    outer-t]]

[type value-kind [] [union [constant] [mutable]]]

[def value-kind-constant [value-kind/constant]]
[def value-kind-mutable [value-kind/mutable]]

[type exp-function []
  [record
    [name name]
    [parameters [list [pair name type]]]
    [result type]
    [bodies [list exp]]]]

[type memory-exp []
  [record
    [type primitive-type]
    [init-size name]
    [max-size [option name]]]]

[type import-kind-decl []
  [union
    [value value-kind type]
    [memory memory-exp]
    [function [list [pair name type]] type]]]

[type
  top-decl []
  [union
    [import name [list [pair name import-kind-decl]]]
    [value value-kind name exp]
    [memory name memory-exp]
    [function exp-function]
    [export [list name]]]
    ]

[type local-context [var-info context-kind]
  [union
    [empty]
    [frame [local-context var-info context-kind] [transient-kv-map word var-info] context-kind]]]

[defn local-context-make [outer vars kind]
  [local-context/frame outer vars kind]]

[def local-context-empty [local-context/empty]]

[defn local-context-make-top [vars kind]
  [local-context/frame local-context-empty vars kind]]

[defn try-get-local [lctx name]
  [loop [cur lctx]
    [match cur
      [local-context/empty]
      [option/none]

      [local-context/frame outer names kind]
      [if-let [v [try-get names name]]
        [option/some [pair v kind]]
        [continue cur outer]]]]]

[type local-context-kind []
  [union [func] [let] [loop] [type-decl]]]

[defn try-get-enclosing-loop-context [lctx]
  [loop [cur lctx]
    [match cur
      [local-context/empty]
      [option/none]

      [local-context/frame outer names kind]
      [match kind
        [local-context-kind/loop]
        [option/some names]

        [local-context-kind/let]
        [continue cur outer]

        [local-context-kind/func]
        [option/none]]]]]

[type function-desc []
  [record
    [parameters [list [pair name type]]]
    [result type]]]

[type memory-desc []
  [record
    [type primitive-type]
    [init-size i32]
    [max-size [option i32]]]]

[defn mem-exp-to-mem-kind [mem-exp]
  [memory-desc
    [memory-exp/type mem-exp]
    [word-to-int [name/word [memory-exp/init-size mem-exp]]]
    [option-map
      [func f [max] [word-to-int [name/word max]]]
      [memory-exp/max-size mem-exp]]]]

[type top-desc-kind []
  [union
    [function function-desc]
    [memory memory-desc]
    [value value-kind type]]]

[type imported-or-here [] [union [imported] [here]]]

[type top-desc []
  [record
    [kind top-desc-kind]
    [imported imported-or-here]]]

[type desc-kind []
  [union
    [local local-context-kind]
    [top top-desc]]]

[type exp2inst-compiler []
  [record
    [exp-to-inst [func [exp] wat-inst]]
    [exps-to-inst [func [[list exp]] wat-inst]]
    [glocals [growable-list [pair word word]]]]]

[defn try-get-type-exp [t]
  [match t
    [type/exp e]
    [option/some e]
    [option/none]]]

[defn starts-with-dash [w]
  [eq [char-code-at w 0] [word-to-char-code -]]]

[defmacro error [form .. message]
  [flist [quote error-form-fn] form [quote-list message]]]

[defmacro error-exp [exp .. message]
  [flist [quote error-exp-fn] exp [quote-list message]]]

[defn prim-types-to-load-inst-name [dst src]
  [let [prefix [concat-words [primitive-type/name dst] [word .load]]]
    [if [is-identical dst src]
      prefix
      [do
        [assert [primitive-type-is-integer src] load expected integer type source]
        [concat-words prefix
          [concat-words [int-to-word [primitive-type/bits src]]
            [concat-words [word -] [if [eq-word [primitive-type/prefix src] [word u]] [word u] [word s]]]]]]]]]

[defn prim-types-to-store-inst-name [target-prim value-prim]
  [if [and [is-identical target-prim value-prim] [primitive-is-wasm-value-type target-prim]]
    [concat-words [primitive-type/name target-prim] [word .store]]
    [if-not [or [is-identical value-prim type-primitive-i32]
                [is-identical value-prim type-primitive-i64]]
      [concat-words
        [word i64.store]
        [int-to-word [primitive-type/bits target-prim]]]
      [do
        [assert [primitive-type-is-integer target-prim] store expected integer type]
        [concat-words
          [concat-words [primitive-type/name value-prim] [word .store]]
          [int-to-word [primitive-type/bits target-prim]]]]]]]

[defn try-get-int-const [e]
  [match e
    [exp/integer pt i]
    [do
      [assert [is-identical pt type-primitive-i32] try-get-int-const expected i32]
      [option/some i]]
    [option/none]]]

[defn mk-exp-i32-add [a b]
  [exp/intrinsic [name [word i32.add]] [list] [list a b]]]

[defn mk-exp-i32 [n] [exp/integer type-primitive-i32 n]]

[defn int-exp-add [a b]
  [if-let [i [try-get-int-const a]]
    [if [eq i 0]
      b
      [if-let [j [try-get-int-const b]]
        [mk-exp-i32 [add i j]]
        [mk-exp-i32-add a b]]]
    [if-let [j [try-get-int-const b]]
      [if [eq j 0]
        a
        [mk-exp-i32-add a b]]
      [mk-exp-i32-add a b]]]]

[def int-const-0 [mk-exp-i32 0]]
[def int-const-1 [mk-exp-i32 1]]

[defn try-get-i32-add-const [e]
  [match e
    [exp/intrinsic n - args]
    [let [a [first args] b [second args]]
      [if [eq-word [name/word n] [word i32.add]]
        [if-let [i [try-get-int-const a]]
          [if-let [j [try-get-int-const b]]
            [option/some [pair int-const-0 [add i j]]]
            [option/some [pair b i]]]
          [if-let [j [try-get-int-const b]]
            [option/some [pair a j]]
            [option/none]]]
        [option/none]]]
    [option/none]]]

[defn mk-exp-i32-mul [a b]
  [exp/intrinsic [name [word i32.mul]] [list] [list a b]]]

[defn int-exp-mul [a b]
  [if-let [i [try-get-int-const a]]
    [ifs
      [eq i 0] int-const-0
      [eq i 1] b
      [if-let [j [try-get-int-const b]]
        [mk-exp-i32 [mul i j]]
        [mk-exp-i32-mul a b]]]
    [if-let [j [try-get-int-const b]]
      [ifs
        [eq j 0] int-const-0
        [eq j 1] a
        [mk-exp-i32-mul a b]]
      [mk-exp-i32-mul a b]]]]


[defn make-compiler []
[let
  [gerrors [growable-list]
   name-to-desc [transient-kv-map]
   top-names [transient-kv-map]
   exp-to-form [transient-kv-map]
   active-data-map [transient-kv-map]
   active-data-map-offsets [transient-kv-map]]
[letfn [
[func error-form-fn [form message-form]
  [push gerrors [pair form message-form]]]

[func error-exp-fn [exp message-form]
  [logq-abort error-exp [identity exp] [identity message-form]]]

[func get-word [f]
  [if-let [w [try-get-word f]]
    w
    [do
      [error f expected word]
      [word --not-a-word--]]]]
[func get-list [f]
  [if-let [w [try-get-list f]]
    w
    [do
      [error f expected list]
      [list]]]]
[func form-to-name [f]
  [if-let [w [try-get-word f]]
    [name w]
    [do
      [log-location f]
      [logq-abort expected word [identity f]]]]]

[func try-lookup-bind-name [lctx name]
  [let
    [name-word [name/word name]
     opt-desc
     [if-let [ldesc [try-get-local lctx name-word]]
      [option/some [pair [pair/fst ldesc] [desc-kind/local [pair/snd ldesc]]]]
      [if-let [td [try-get top-names name-word]]
        [option/some [pair [pair/fst td] [desc-kind/top [pair/snd td]]]]
        [option/none]]]]
    [when-let [desc opt-desc]
      [set-kv-map name-to-desc name desc]]
    opt-desc]]

[func lookup-bind-name [lctx name]
  [if-let [desc [try-lookup-bind-name lctx name]]
    desc
    [logq-abort not bound [identity name]]]]

[func form-to-exp [lctx form]
  [match form
    [form/word w]
    [let [n [form-to-name form]]
      [lookup-bind-name lctx n]
      [exp/var n]]

    [form/list l]
    [let [ff [first l]
          args [rest l]]
      [if-let [fw [try-get-word ff]]
        [let [fn [form-to-name ff]]
          [if-let [desc [try-lookup-bind-name lctx fn]]
            [let
              [func-desc
                [match [pair/snd desc]
                  [desc-kind/top td]
                  [match [top-desc/kind td]
                    [top-desc-kind/function fd]
                    fd
                    [logq-abort form-to-exp not a function [identity fn]]]

                  [desc-kind/local ld]
                  [logq-abort form-to-exp call on local [identity fn]]]
               param-pairs [function-desc/parameters func-desc]
               cargs [list-map arg args [form-to-exp lctx arg]]
               type-env [transient-kv-map]]
              [assert [eq [size param-pairs] [size args]] call expected same number of arguments
                [identity fn] n-of-params n-of-args]
              [for i 0 [size param-pairs]
                [let [pp [at param-pairs i]
                      pt [pair/snd pp]
                      arg [at cargs i]
                      targ [type-of arg]]
                  [let [pt-subst [type-substitute type-env pt]]
                    [when-not [type-assignable pt-subst targ]
                      [logq param [identity pt-subst]]
                      [logq arg-- [identity targ]]
                      [logq type-env [identity type-env]]
                      [logq-abort call expected assignable type [identity fn]]]
                    ]]]
              [exp/call fn cargs]]
          [form-special-to-exp lctx fw l]]]
        [logq-abort form-to-exp not a word [identity ff]]]]]]

[func common-super-type [t1 t2]
  [ifs
    [type-equals t1 type-empty] t2
    [type-equals t2 type-empty] t1
    [type-assignable t1 t2] t1
    [type-assignable t2 t1] t2
    [if-let [p1 [try-get-primitive t1]]
      [if-let [p2 [try-get-primitive t2]]
        [if [is-identical p1 p2]
          [type/primitive p1]
          [logq-abort common-super-type exp types do not match [identity p1] [identity p2]]]
        [logq-abort common-super-type not implemented p2 [identity t1] [identity t2]]]
      [match t1
        [type/exp e1]
        [match t2
          [type/exp e2]
          [if
            [exp-equals e1 e2]
            t1

            [match e1
              [exp/integer pt1 i1]
              [match e2
                [exp/integer pt2 i2]
                [if [is-identical pt1 pt2]
                  [type/primitive pt1]
                  [logq-abort common-super-type exp types do not match [identity e1] [identity e2]]]]]]
          [logq-abort common-super-type not implemented e2 [identity t1] [identity t2]]]]]]]

[func form-to-type [lctx outer-form]
  [letfn [
  [func go [form]
    [match form
    [form/word w]
    [if [starts-with-dash w]
      [type/wildcard [form-to-name form]]
      [let [n [form-to-name form]]
        [lookup-bind-name lctx n]
        [type/var n]]]

    [form/list l]
    [let [type-name-word [form-to-word [first l]]
          n-of-args [dec [size l]]]
      [assert-not [is-empty l] form-to-type expected non-empty list]
      [switch type-name-word
        [[word tuple]]
        [type/tuple [list-map t [rest l] [go t]]]

        [[word record]]
        [type/record
          [list-map pf [rest l]
            [let [p [get-list pf]]
              [pair [form-to-name [first p]] [go [second p]]]]]]

        [[word union]]
        [type/union [list-map a [rest l] [go a]]]

        [[word pointer]]
        [do
          [assert [eq n-of-args 2] form-to-type expected 2 elements
            [identity type-name-word] [identity n-of-args]]
          [let [mt [go [second l]]
                target-type [go [third l]]]
            [type/pointer mt target-type]]]

        [[word exp]]
        [type/exp [form-to-exp lctx [second l]]]

        [[word array]]
        [ifs
          [eq [size l] 2]
          [type/array [go [second l]] [option/none]]

          [eq [size l] 3]
          [type/array [go [second l]] [option/some [go [third l]]]]

          [logq-abort array expected 2 or 3 elements]]

        [[word type]]
        [logq-abort not implemented form-to-type [identity form]]

        [if-let [p [try-get primitive-types-by-name type-name-word]]
            [do
              [assert [eq n-of-args 0] form-to-type primitive takes no arguments [identity type-name-word]]
              [type/primitive p]]
            [logq-abort not implemented form-to-type [identity form]]]]]]]]
    [go outer-form]]]

[func exp-to-bytes [e]
  [let
    [bprinter [empty-printer]
     go
     [func go [e]
      [match e
        [exp/integer pt n]
        [let [n-bytes [primitive-type/bytes pt]]
          [assert [eq [intrinsic i32.rem-s [printer-index bprinter] n-bytes] [i32 0]]
            exp-to-bytes expected natural alignment [identity pt]]
          [assert [primitive-type-is-integer pt] exp-to-bytes expected integer type [identity pt]]
          [print-int32 bprinter n-bytes n]]

        [exp/float pt f]
        [let [n-bytes [primitive-type/bytes pt]]
          [assert [eq [intrinsic i32.rem-s [printer-index bprinter] n-bytes] [i32 0]]
            exp-to-bytes expected natural alignment [identity pt]]
          [assert [eq-word [primitive-type/prefix pt] [word f]] exp-to-bytes expected float type [identity pt]]
          [loop
            [i 0
             fba [f64-to-byte-array f]]
            [when [lt-s i n-bytes]
              [print-byte bprinter [byte-array-get fba i]]
              [continue i [inc i]]]]]

        [exp/array - es]
        [for-each elem es [go elem]]

        [exp/tuple es]
        [for-each elem es [go elem]]

        [exp/record fields]
        [for-each field fields [go [pair/snd field]]]

        [logq-abort not implemented exp-to-bytes [identity e]]]]]
    [go e]
    [printer-to-byte-array bprinter]]]

[func get-current-active-address-pair [mem-name-exp]
  [let
    [mem-name-name
      [match [type-of mem-name-exp]
        [type/exp mem-name-exp2]
        [match mem-name-exp2
          [exp/var mem-name] mem-name
          [logq-abort get-memory-name-from-type not a memory [identity mem-name-exp]]]
        [logq-abort get-memory-name-from-type not a memory type]]
     mem-name-word [name/word mem-name-name]
     mem-name-type
      [match [top-desc/kind [pair/snd [get top-names mem-name-word]]]
        [top-desc-kind/memory mt] [memory-desc/type mt]
        [logq-abort get-memory-name-from-type not a memory]]
     offset-atom
     [if-let [offset-atom [try-get active-data-map-offsets mem-name-word]]
      offset-atom
      [let [oa [atom [i32 16]]]
        [set-kv-map active-data-map-offsets mem-name-word oa]
        oa]]]
    [pair mem-name-type offset-atom]]]

[func form-special-to-exp [lctx fw l]
  [switch fw
    [[word if]]
    [let [c [form-to-exp lctx [second l]]
          t [form-to-exp lctx [third l]]
          e [if [eq [size l] 4] [form-to-exp lctx [fourth l]] [exp/do [list]]]
          tt [type-of t]
          te [type-of e]]
      [when-not [type-assignable type-i32 [type-of c]] [logq-abort if condition not i32]]
      [common-super-type tt te]
      [exp/if c t e]]

    [[word cast]]
    [exp/cast [form-to-type lctx [second l]] [form-to-exp lctx [third l]]]

    [[word ref]]
    [exp/ref [form-to-exp lctx [second l]]]

    [[word deref]]
    [exp/deref [form-to-exp lctx [second l]]]

    [[word assign]]
    [let [dst [form-to-exp lctx [second l]]
          src [form-to-exp lctx [third l]]]
      [when-not [type-assignable [type-of dst] [type-of src]]
        [logq-abort typing assign failed [type-of dst] [type-of src]]]
      [exp/assign dst src]]

    [[word intrinsic]]
    [let [intrinsic-name [form-to-name [second l]]
          arg-forms [slice l 2 [size l]]
          it [intrinsic-type-from-name [name/word intrinsic-name]]
          imm-params [intrinsic-type/immediate-parameters it]
          params [intrinsic-type/parameters it]
          arity [add [size imm-params] [size params]]
          gimm-args [growable-list]
          gargs [growable-list]]
      [assert [eq arity [size arg-forms]] intrinsic
        [identity intrinsic-name] expected [identity arity] arguments but got [size arg-forms]]
      [for i 0 [size imm-params]
        [let [p [at imm-params i]
              arg-form [at arg-forms i]
              ]
          [todo assert arg is constant]
          [match p
            [immediate-type/memory]
            [let [mem-name [form-to-name arg-form]]
              [todo check is mem]
              [push gimm-args [imm-arg/memory mem-name]]]]]]
      [for i [size imm-params] arity
        [let [p [at params [add [size imm-params] i]]
              arg-form [at arg-forms i]
              arg [form-to-exp lctx arg-form]
              ta [type-of arg]]
          [assert [type-assignable p ta] intrinsic [identity intrinsic-name] expected [identity p] but got [identity ta]]
          [push gargs arg]]]
      [exp/intrinsic
        intrinsic-name
        [clone-growable-to-frozen-list gimm-args]
        [clone-growable-to-frozen-list gargs]]]

    [[word let] [word loop]]
    [let
      [vars [transient-kv-map]
       is-let [eq-word fw [word let]]
       let-loop-ctx [local-context-make lctx vars [if is-let [local-context-kind/let] [local-context-kind/loop]]]]
      [exp/let-loop
        [if is-let [let-or-loop/let] [let-or-loop/loop]]
        [list-map p [pairwise-pairs [get-list [second l]]]
          [let [pname [form-to-name [pair/fst p]]
                pexp [form-to-exp let-loop-ctx [pair/snd p]]
                pt [type-of pexp]]
            [set-kv-map vars [name/word pname] pt]
            [pair pname pexp]]]
        [list-map b [slice l 2 [size l]] [form-to-exp let-loop-ctx b]]]]

    [[word continue]]
    [if-let [loop-vars [try-get-enclosing-loop-context lctx]]
      [exp/continue
        [list-map p [pairwise-pairs [rest l]]
          [let [n [form-to-name [pair/fst p]]
                e [form-to-exp lctx [pair/snd p]]]
            [if-let [t [try-get loop-vars [name/word n]]]
              [assert [type-assignable t [type-of e]] continue expected same type [identity n]]
              [logq-abort continue not a loop var]]
            [pair n e]]]]
      [logq-abort continue not in loop]]

    [[word do]]
    [exp/do [list-map b [rest l] [form-to-exp lctx b]]]

    [[word size-of-type]]
    [exp/size-of-type [form-to-type lctx [second l]]]

    [[word size-of-exp]]
    [exp/size-of-exp [form-to-exp lctx [second l]]]

    [[word index]]
    [exp/index
      [form-to-exp lctx [second l]]
      [form-to-exp lctx [third l]]]

    [[word field]]
    [let [pexp [form-to-exp lctx [second l]]
          field-name [form-to-name [third l]]]
      [exp/field pexp field-name]]

    [[word array]]
    [let [telem [form-to-type lctx [second l]]]
      [exp/array
        telem
        [list-map ef [slice l 2 [size l]]
          [let [ee [form-to-exp lctx ef]
                t-cur-elem [type-of ee]]
            [when-not [type-assignable telem t-cur-elem]
              [logq-abort array expected assignable type
                [identity telem]
                [identity t-cur-elem]]]
            ee]]]]

    [[word tuple]]
    [exp/tuple
      [list-map e [rest l] [form-to-exp lctx e]]]

    [[word record]]
    [exp/record
      [list-map p [pairwise-pairs [rest l]]
        [pair [form-to-name [pair/fst p]] [form-to-exp lctx [pair/snd p]]]]]

    [[word data]]
    [let
      [mem-name-exp [form-to-exp lctx [second l]]
       data-exp [form-to-exp lctx [third l]]
       dexp [exp/data mem-name-exp data-exp]
       addr-pair [get-current-active-address-pair mem-name-exp]
       offset-atom [pair/snd addr-pair]
       bytes [exp-to-bytes data-exp]
       n-of-bytes [byte-array-size bytes]
       current-offset [atom-get offset-atom]]
      [atom-set offset-atom [add current-offset [align [i32 16] n-of-bytes]]]
      [set-kv-map active-data-map dexp [exp/integer [pair/fst addr-pair] current-offset]]
      dexp]

    [[word memory-static-top]]
    [let
      [mem-name [form-to-exp lctx [second l]]]
      [todo check is mem]
      [exp/memory-static-top mem-name]]

    [if-let [pt [try-get primitive-types-by-name fw]]
      [let [n [form-to-name [second l]]]
        [switch [primitive-type/prefix pt]
          [[word i] [word u]]
          [let [i [word-to-int [name/word n]]
                range [primitive-integer-type-min-max-range pt]]
            [todo there are issues with word-to-int when integer is greater than 2 to the 31 power]
            [when [lt-s i [pair/fst range]] [error [second l] literal below min]]
            [when [lt-s [pair/snd range] i] [error [second l] literal above max]]
            [exp/integer pt i]]

          [[word f]]
          [let [f [word-to-f64 [name/word n]]]
            [todo range check on f32]
            [exp/float pt f]]

          [logq-abort unsupported literal type]]]
      [logq-abort form-special-to-exp not impl [identity fw]]]]]

[func get-desc-from-name [n] [pair/snd [get name-to-desc n]]]

[func names-same-binding [n1 n2]
  [and
    [eq-word [name/word n1] [name/word n2]]
    [let
      [d1 [get-desc-from-name n1] d2 [get-desc-from-name n2]]
      [match d1
        [desc-kind/local ld1]
        [match d2
          [desc-kind/local ld2]
          [is-identical ld1 ld2]
          false]

        [desc-kind/top td1]
        [match d2
          [desc-kind/top td2]
          [is-identical td1 td2]
          false]]]]]

[func exp-equals [e1 e2]
  [todo consider const evaling the two expressions]
  [match e1
    [exp/integer pt1 i1]
    [match e2
      [exp/integer pt2 i2]
      [and [is-identical pt1 pt2] [eq i1 i2]]

      false]

    [exp/var n1]
    [match e2
      [exp/var n2]
      [names-same-binding n1 n2]
      false]
    false]]

[func types-assignable [dargs sargs]
  [and
    [eq [size dargs] [size sargs]]
    [loop [i 0 n [size dargs]]
      [if [lt-s i n]
        [if [type-assignable [at dargs i] [at sargs i]]
          [continue i [inc i]]
          false]
        true]]]]

[func get-memory-name-from-type [mt]
  [if-let [mem-exp [try-get-type-exp mt]]
    [match [type-of mem-exp]
      [type/exp mem-name-exp]
      [match mem-name-exp
        [exp/var mem-name]
        [name/word mem-name]
        [logq-abort get-memory-name-from-type not a memory [identity mem-name-exp]]]
      [logq-abort get-memory-name-from-type not a memory type [identity mt]]]
    [logq-abort get-memory-name-from-type expected memory type [identity mt]]]]

[func get-memory-pointer-type [t]
  [match [top-desc/kind [pair/snd [get top-names [get-memory-name-from-type t]]]]
    [top-desc-kind/memory mt] [memory-desc/type mt]
    [logq-abort get-memory-name-from-type not a memory]]]

[func type-assignable [tdst tsrc]
  [or [is-identical tdst tsrc]
    [match tdst
      [type/union dus]
      [or [type-equals tdst tsrc]
        [exists dus [func type-ass-union [du] [type-assignable du tsrc]]]]

      [type/wildcard -]
      true

      [type/primitive dpt]
      [match tsrc
        [type/pointer mt t]
        [is-identical dpt [get-memory-pointer-type mt]]

        [type/exp se]
        [match se
          [exp/integer spt -]
          [is-identical dpt spt]

          [type-equals tdst tsrc]]

        [type/primitive spt]
        [if [and [primitive-type-is-integer dpt] [primitive-type-is-integer spt]]
          [le-s [primitive-type/bytes spt] [primitive-type/bytes dpt]]
          [is-identical dpt spt]]

        [type-equals tdst tsrc]]

      [type/tuple dts]
      [match tsrc
        [type/tuple sts]
        [types-assignable dts sts]

        [type-equals tdst tsrc]]

      [type/record dfs]
      [match tsrc
        [type/record sfs]
        [and
          [eq [size dfs] [size sfs]]
          [loop [i 0 n [size dfs]]
            [if [lt-s i n]
              [if [let [df [at dfs i] sf [at sfs i]]
                    [and [eq-word [name/word [pair/fst df]] [name/word [pair/fst sf]]]
                         [type-assignable [pair/snd df] [pair/snd sf]]]]
                [continue i [inc i]]
                false]
              true]]]

        [type-equals tdst tsrc]]

      [type/pointer dmem dtarget]
      [match tsrc
        [type/pointer smem starget]
        [and
          [type-equals dmem smem]
          [type-assignable dtarget starget]]

        [type-equals tdst tsrc]]

      [type/array det dopts]
      [match tsrc
        [type/array set sopts]
        [and
          [type-assignable det set]
          [match dopts
            [option/none]
            true

            [option/some dopt]
            [match sopts
              [option/none]
              false

              [option/some sopt]
              [type-assignable dopt sopt]]]]

        [type-equals tdst tsrc]]

      [type-equals tdst tsrc]]]]

[func types-equal [ts1 ts2]
  [and
    [eq [size ts1] [size ts2]]
    [loop [i 0 n [size ts1]]
      [if [lt-s i n]
        [if [type-equals [at ts1 i] [at ts2 i]]
          [continue i [inc i]]
          false]
        true]]]]

[func type-equals [t1 t2]
  [or [is-identical t1 t2]
    [match t1
    [type/primitive p1]
    [match t2
      [type/primitive p2]
      [is-identical p1 p2]
      false]

    [type/tuple ts1]
    [match t2
      [type/tuple ts2]
      [types-equal ts1 ts2]
      false]

    [type/record ps1]
    [match t2
      [type/record ps2]
      [and
        [eq [size ps1] [size ps2]]
        [loop [i 0 n [size ps1]]
          [if [lt-s i n]
            [if [let [p1 [at ps1 i] p2 [at ps2 i]]
                  [and [eq-word [name/word [pair/fst p1]] [name/word [pair/fst p2]]]
                       [type-equals [pair/snd p1] [pair/snd p2]]]]
              [continue i [inc i]]
              false]
            true]]]
      false]

    [type/union ts1]
    [match t2
      [type/union ts2]
      [and
        [eq [size ts1] [size ts2]]
        [loop [i 0 n [size ts1]]
          [if [lt-s i n]
            [if [type-equals [at ts1 i] [at ts2 i]]
              [continue i [inc i]]
              false]
            true]]]
      false]

    [type/pointer m1 t1]
    [match t2
      [type/pointer m2 t2]
      [and
        [type-equals m1 m2]
        [type-equals t1 t2]]
      false]

    [type/exp e1]
    [match t2
      [type/exp e2]
      [exp-equals e1 e2]
      false]

    [type/array t1 opt-s1]
    [match t2
      [type/array t2 opt-s2]
      [and
        [type-equals t1 t2]
        [match opt-s1
          [option/none]
          [match opt-s2
            [option/none]
            true

            [option/some s2]
            false]

          [option/some s1]
          [match opt-s2
            [option/none]
            false

            [option/some s2]
            [type-equals s1 s2]]]]
      false]

    [type/var n1]
    [match t2
      [type/var n2]
      [names-same-binding n1 n2]
      false]

    [type/empty]
    [match t2
      [type/empty]
      true
      false]

    [logq-abort type-equals [identity t1] [identity t2]]]]]

[func type-ofs [bodies]
  [if [is-empty bodies]
    type-tuple-empty
    [type-of [last bodies]]]]

[func name-to-type [n]
  [if-let [desc [try-get name-to-desc n]]
    [pair/fst desc]
    [logq-abort name-to-type not found [identity n]]]]

[func type-of [exp]
  [match exp
    [exp/integer pt n]
    [type/exp exp]

    [exp/float pt f]
    [type/primitive pt]

    [exp/if c t e]
    [common-super-type [type-of t] [type-of e]]

    [exp/call fname args]
    [let
      [func-desc
        [match [get-desc-from-name fname]
          [desc-kind/top td]
          [match [top-desc/kind td]
            [top-desc-kind/function fd]
            fd
            [logq-abort not a func]]

          [desc-kind/local ld]
          [logq-abort not implemented type-of call [identity fname]]]]
      [function-desc/result func-desc]]

    [exp/cast t e]
    t

    [exp/var n]
    [name-to-type n]

    [exp/intrinsic intrinsic-name imm-args args]
    [intrinsic-type/result [intrinsic-type-from-name [name/word intrinsic-name]]]

    [exp/deref target]
    [match [type-of target]
      [type/pointer - t]
      t
      [logq-abort type-of not a pointer [identity target] [type-of target]]]

    [exp/assign dst src]
    type-tuple-empty

    [exp/let-loop ll-kind bindings bodies]
    [type-ofs bodies]

    [exp/continue bindings]
    type-empty

    [exp/do bodies]
    [type-ofs bodies]

    [exp/size-of-type -t]
    type-i32

    [exp/size-of-exp -e]
    type-i32

    [exp/index target-exp index-exp]
    [match [type-of target-exp]
      [type/array elem-type -]
      elem-type

      [type/tuple elem-types]
      [match index-exp
        [exp/integer pt i]
        [do
          [assert [is-identical pt type-primitive-i32] index expected i32]
          [at elem-types i]]

        [logq-abort indexing of tuples only allowed with constants [identity index-exp]]]
      [logq-abort indexing only allowed for array and tuple types]]

    [exp/field pexp field-name]
    [match [type-of pexp]
      [type/record field-types]
      [loop [n [size field-types]
             field-name-word [name/word field-name]
             i 0]
        [if [lt-s i n]
          [let [fp [at field-types i]]
            [if [eq-word [name/word [pair/fst fp]] field-name-word]
              [pair/snd fp]
              [continue i [inc i]]]]
          [logq-abort field not found [identity field-name-word] [identity field-types]]]]
      [logq-abort type-of not implemented [identity exp]]]

    [exp/array elem-type elems]
    [type/array
      elem-type
      [option/some [type/exp [exp/integer type-primitive-i32 [size elems]]]]]

    [exp/tuple elems]
    [if [eq [size elems] 1]
      [type-of [first elems]]
      [type/tuple [list-map e elems [type-of e]]]]

    [exp/record pairs]
    [type/record [list-map p pairs [pair [pair/fst p] [type-of [pair/snd p]]]]]

    [exp/data mem-name data-exp]
    [type/pointer [type/exp mem-name] [type-of data-exp]]

    [exp/memory-static-top mem-name]
    [do
      [todo use mem type]
      [type/primitive type-primitive-i32]]

    [logq-abort type-of not implemented [identity exp]]]]

[func form-list-to-mem-exp [l]
  [assert [or [eq [size l] 3] [eq [size l] 4]] memory expected 3 or 4 elements]
  [let
    [mt [form-to-type local-context-empty [second l]]
     init-size-name [form-to-name [third l]]
     init-size [word-to-int [name/word init-size-name]]
     - [assert [lt-s 0 init-size] memory init-size must be greater than or equal to 0]
     opt-max
     [if [eq [size l] 3]
       [option/none]
       [let [n [form-to-name [fourth l]] ms [word-to-int [name/word n]]]
        [assert [lt-s init-size ms] memory max-size must be greater than init-size]
        [option/some n]]]]
    [todo check type and size parse and are consistent]
    [match mt
      [type/primitive mpt]
      [do
        [assert [or [type-equals mt type-i32] [type-equals mt type-i64]] memory expected i32 or i64]
        [memory-exp mpt init-size-name opt-max]]
      [logq-abort not implemented memory type [identity mt]]]]]

[func form-to-import-kind [form]
  [let [l [get-list form]]
    [assert-not [is-empty l] form-to-import-kind expected non-empty list]
    [switch [form-to-word [first l]]
      [[word memory]]
      [import-kind-decl/memory [form-list-to-mem-exp l]]

      [[word func]]
      [do
        [assert [eq [size l] 3] import func expected 2 elements]
        [import-kind-decl/function
          [list-map pp [pairwise-pairs [get-list [second l]]]
            [pair [form-to-name [pair/fst pp]] [form-to-type local-context-empty [pair/snd pp]]]]
          [form-to-type local-context-empty [third l]]]]

      [logq-abort not implemented import-kind [first l]]]]]

[func bind-top [name-form type desc]
  [let [n [get-word name-form]]
    [when [has top-names n]
      [error name-form name already defined]]
    [set-kv-map top-names n [pair type desc]]]]

[func lift-literal-type [t]
  [match t
    [type/exp e]
    [match e
      [exp/integer pt -] [type/primitive pt]
      [exp/float pt -] [type/primitive pt]
      [exp/var n] [lift-literal-type [name-to-type n]]
      t]

    t]]

[func top-form-to-top-decl [form]
  [let [l [get-list form]]
    [if [is-empty l]
      [do
        [error form expected non-empty list]
        [option/none]]
      [let [f [first l]
            fw [get-word f]]
        [when [has top-names fw]
          [error f top-level calls not yet implemented]]
        [switch fw
          [[word def] [word mutable]]
          [do
            [when-not [eq [size l] 3] [error form expected def name exp-form]]
            [let
              [name-form [second l]
               be [form-to-exp local-context-empty [third l]]
               type [type-of be]
               is-mutable [eq-word fw [word mutable]]
               kind [if is-mutable value-kind-mutable value-kind-constant]
               bt [top-decl/value kind [form-to-name name-form] be]]
              [bind-top name-form [if is-mutable [lift-literal-type type] type] [top-desc [top-desc-kind/value kind type] [imported-or-here/here]]]
              [option/some bt]]]

          [[word memory]]
          [let [mem-name [form-to-name [second l]]
                mem-exp [form-list-to-mem-exp [rest l]]
                t [type/exp [exp/var mem-name]]]
            [bind-top [second l] t [top-desc [top-desc-kind/memory [mem-exp-to-mem-kind mem-exp]] [imported-or-here/here]]]
            [option/some [top-decl/memory mem-name mem-exp]]]

          [[word export]]
          [option/some
            [top-decl/export
              [list-map fe [rest l]
                [let [n [form-to-name fe]]
                  [lookup-bind-name local-context-empty n]
                  n]]]]

          [[word type]]
          [logq-abort not implemented [identity l]]

          [[word import]]
          [let
            [mod-name [form-to-name [second l]]
             import-exps
              [list-map import [slice l 2 [size l]]
                [let [
                  import-list [get-list import]
                  m [form-to-name [first import-list]]
                  ik [form-to-import-kind [second import-list]]
                  t
                  [match ik
                    [import-kind-decl/function ps rt]
                    [type/func [list-map p ps [pair/snd p]] rt]

                    [import-kind-decl/memory mem-exp]
                    [type/exp [exp/var m]]

                    [logq-abort not implemented type-of import]]
                  ikd
                  [match ik
                    [import-kind-decl/function ps rt]
                    [top-desc-kind/function [function-desc ps rt]]

                    [import-kind-decl/memory mem-exp]
                    [top-desc-kind/memory [mem-exp-to-mem-kind mem-exp]]

                    [logq-abort not implemented type-of import]]]
                  [bind-top [first import-list] t [top-desc ikd [imported-or-here/imported]]]
                  [pair m ik]]]]
            [option/some [top-decl/import mod-name import-exps]]]

          [[word defn]]
          [do
            [when [lt-s [size l] 3]
              [error form function expected name params return-type bodies]]
            [let
              [name-form [second l]
               params-list [get-list [third l]]
               return-type-form [fourth l]
               param-ctx [transient-kv-map]
               lctx [local-context-make-top param-ctx [local-context-kind/func]]
               parameters
               [list-map p [pairwise-pairs params-list]
                 [let [pname [form-to-name [pair/fst p]]
                       ptype [form-to-type lctx [pair/snd p]]]
                  [set-kv-map param-ctx [name/word pname] ptype]
                  [pair pname ptype]]]
               return-type [form-to-type lctx return-type-form]]
              [bind-top name-form
                [type/func [list-map p parameters [pair/snd p]] return-type]
                [top-desc
                  [top-desc-kind/function [function-desc parameters return-type]]
                  [imported-or-here/here]]]
              [let
                [cbodies [list-map body [slice l 4 [size l]] [form-to-exp lctx body]]
                 inferred-return-type [type-ofs cbodies]]
                [when-not [type-assignable return-type inferred-return-type]
                  [log return-type]
                  [log inferred-return-type]
                  [logq-abort return type mismatch [form-to-word name-form]]]
                [option/some
                  [top-decl/function
                    [exp-function
                      [form-to-name name-form]
                      parameters
                      return-type
                      cbodies]]]]]]
          [logq-abort not implemented [identity fw]]]]]]]

[func top-forms-to-top-decls [forms]
  [let
    [top-decls [growable-list]]
    [for-each form forms
      [when-let [top [top-form-to-top-decl form]]
        [push top-decls top]]]
    [clone-growable-to-frozen-list top-decls]]]

[func type-to-wat-type [t]
  [match t
    [type/primitive p]
    [do
      [assert [primitive-is-wasm-value-type p]]
      [primitive-type/name p]]

    [type/exp e]
    [match e
      [exp/integer pt -]
      [do
        [assert [primitive-is-wasm-value-type pt]]
        [primitive-type/name pt]]

      [logq-abort not implemented type-to-wat-type [identity e]]]

    [type/pointer mt -]
    [primitive-type/name [get-memory-pointer-type mt]]

    [logq-abort type-to-wat-type [identity t]]]]

[func type-to-wat-types [type]
  [match type
    [type/tuple types]
    [list-map t types [type-to-wat-type t]]

    [type/empty]
    [list]

    [list [type-to-wat-type type]]]]

[func try-get-primitive-exp [e]
  [match e
    [exp/integer pt -] [option/some pt]
    [exp/float pt -] [option/some pt]
    [exp/var n] [try-get-primitive [name-to-type n]]
    [option/none]]]

[func try-get-primitive [t]
  [match t
    [type/exp e] [try-get-primitive-exp e]
    [type/primitive p] [option/some p]
    [type/pointer mt -] [option/some [get-memory-pointer-type mt]]
    [option/none]]]

[func type-to-primitive [t]
  [if-let [pt [try-get-primitive t]]
    pt
    [logq-abort not a primitive type [identity t]]]]

[func type-to-size-of-exp [t]
  [match [lift-literal-type t]
    [type/primitive p]
    [exp/integer type-primitive-i32 [primitive-type/bytes p]]

    [type/exp e]
    [type-to-size-of-exp [type-of e]]

    [type/pointer mt t]
    [exp/integer type-primitive-i32 [primitive-type/bytes [get-memory-pointer-type mt]]]

    [type/array et opt-st]
    [if-let [size-type opt-st]
      [match size-type
        [type/exp size-exp]
        [int-exp-mul [type-to-size-of-exp et] size-exp]

        [logq-abort type-to-size-of-exp array size not an exp type [identity size-type]]]
      [logq-abort type-to-size-of-exp no size given [identity t]]]

    [type/tuple types]
    [loop [i 0
           n [size types]
           sum int-const-0]
      [if [lt-s i n]
        [continue
          sum [int-exp-add sum [type-to-size-of-exp [at types i]]]
          i [inc i]]
        sum]]

    [type/record fields]
    [loop [i 0
           n [size fields]
           sum int-const-0]
      [if [lt-s i n]
        [continue
          sum [int-exp-add sum [type-to-size-of-exp [pair/snd [at fields i]]]]
          i [inc i]]
        sum]]

    [logq-abort not implemented type-to-size-of-exp [identity t]]]]

[func mk-exp-to-inst-compiler []
  [let
    [glocals [growable-list]]
  [letfn [
[func mk-load-inst [target-prim mt target]
  [let
    [exp-const-pair-opt [try-get-i32-add-const target]
     texp [option-default [option-map pair/fst exp-const-pair-opt] target]
     offset-opt [option-map pair/snd exp-const-pair-opt]]
    [wat-inst/load-opt
      [wasm-name-to-wat-byte-array
        [prim-types-to-load-inst-name
          [if [primitive-is-wasm-value-type target-prim] target-prim type-primitive-i32]
          target-prim]]
      [wat-inst-memargs-opt
        [option/some [get-memory-name-from-type mt]]
        offset-opt
        [option/none]]
      [exp-to-inst texp]]]]

[func mk-store-inst [target-prim mt target src]
  [let
    [exp-const-pair-opt [try-get-i32-add-const target]
     texp [option-default [option-map pair/fst exp-const-pair-opt] target]
     offset-opt [option-map pair/snd exp-const-pair-opt]]
    [wat-inst/store-opt
      [wasm-name-to-wat-byte-array
        [prim-types-to-store-inst-name
          [type-to-primitive target-prim]
          [type-to-primitive [type-of src]]]]
      [wat-inst-memargs-opt
        [option/some [get-memory-name-from-type mt]]
        offset-opt
        [option/none]]
      [exp-to-inst texp]
      [exp-to-inst src]]]]

[func exp-to-inst [exp]
  [match exp
    [exp/integer pt n]
    [[switch [primitive-type/name pt]
      [[word i32]] wat-inst/i32.const
      [[word i64]] wat-inst/i64.const
      [logq-abort not implemented exp-to-inst integer [identity pt]]]
      [int-to-word n]]

    [exp/float pt f]
    [[switch [primitive-type/name pt]
      [[word f32]] wat-inst/f32.const
      [[word f64]] wat-inst/f64.const
      [logq-abort not implemented exp-to-inst float [identity pt]]] [f64-to-word f]]

    [exp/var n]
    [match [get-desc-from-name n]
      [desc-kind/top td]
      [match [top-desc/kind td]
        [top-desc-kind/value - --]
        [wat-inst/global.get [name/word n]]

        [top-desc-kind/function -]
        [logq-abort function as value not implemented]

        [logq-abort not implemented exp-to-inst var [identity n] [identity td]]]

      [desc-kind/local ld]
      [wat-inst/local.get [name/word n]]]

    [exp/intrinsic n imm-args args]
    [let [intrin-t [intrinsic-type-from-name [name/word n]]
          imm [intrinsic-type/immediate-parameters intrin-t]
          n-of-imm [size [intrinsic-type/immediate-parameters intrin-t]]
          wimm-args
          [list-map iarg imm-args
            [match iarg
              [imm-arg/memory mem-name]
              [wat-immediate/memory [name/word mem-name]]]]]
      [wat-inst/instruction
        [wasm-name-to-wat-byte-array [name/word n]]
        wimm-args
        [list-map arg [slice args n-of-imm [size args]]
          [exp-to-inst arg]]]]

    [exp/call fn args]
    [wat-inst/call [name/word fn] [list-map arg args [exp-to-inst arg]]]

    [exp/if c t e]
    [wat-inst/if
      [type-to-wat-types [type-of exp]]
      [exp-to-inst c] [exp-to-inst t] [exp-to-inst e]]

    [exp/do es]
    [exps-to-inst es]

    [exp/let-loop ll-kind bindings bodies]
    [let
      [bind-insts
       [list-map b bindings
        [let [n [name/word [pair/fst b]]
              e [pair/snd b]]
          [push glocals [pair n [type-to-wat-type [type-of e]]]]
          [wat-inst/local.set n [exp-to-inst e]]]]]
      [match ll-kind
        [let-or-loop/let]
        [wat-inst/instructions
          [concat bind-insts [list [exps-to-inst bodies]]]]

        [let-or-loop/loop]
        [wat-inst/instructions
          [concat bind-insts
            [list
              [wat-inst/loop
                [word loop-label]
                [type-to-wat-types [type-ofs bodies]]
                [exps-to-inst bodies]]]]]]]

    [exp/continue assignments]
    [wat-inst/instructions
      [concat
        [list-map a assignments
          [wat-inst/local.set [name/word [pair/fst a]] [exp-to-inst [pair/snd a]]]]
        [list [wat-inst/br [word loop-label]]]]]

    [exp/tuple elems]
    [wat-inst/instructions [list-map elem elems [exp-to-inst elem]]]

    [exp/deref target]
    [let
      [ttarget [type-of target]
       ppt [get-pointer-args ttarget]
       mn [get-memory-name-from-type [pair/fst ppt]]
       target-prim [type-to-primitive [pair/snd ppt]]]
      [mk-load-inst target-prim [pair/fst ppt] target]]

    [exp/index index-target-exp index-exp]
    [let
      [derefed-target
       [match index-target-exp
         [exp/deref target]
         target
         [logq-abort can only assign to derefed pointers to arrays [identity index-target-exp]]]
       pointer-type [type-of derefed-target]
       ppt [get-pointer-args pointer-type]
       elem-type-offset
       [match [type-of index-target-exp]
         [type/array elem-type -]
         [pair elem-type [int-exp-mul index-exp [type-to-size-of-exp elem-type]]]

         [type/tuple elem-types]
         [if-let [ie [try-get-int-const index-exp]]
            [let [n [size elem-types]]
              [assert [lt-s ie n] index out of bounds]
              [loop [i 0 acc int-const-0]
                [if [eq ie i]
                  [pair [at elem-types i] acc]
                  [continue
                    acc [int-exp-add acc [type-to-size-of-exp [at elem-types i]]]
                    i [inc i]]]]]
            [logq-abort indexing of tuples only allowed with constants [identity index-exp]]]

         [logq-abort not implemented exp-to-inst index [identity index-target-exp]]]
       addr-exp
       [int-exp-add
         derefed-target
         [pair/snd elem-type-offset]]
       target-prim [type-to-primitive [pair/fst elem-type-offset]]]
      [mk-load-inst target-prim [pair/fst ppt] addr-exp]]

    [exp/field field-target-exp field-name]
    [let
      [derefed-target
       [match field-target-exp
        [exp/deref target]
        target
        [logq-abort can only assign to derefed pointers to arrays [identity field-target-exp]]]
       pointer-type [type-of derefed-target]
       ppt [get-pointer-args pointer-type]
       field-name-word [name/word field-name]
       offset-p
       [match [pair/snd ppt]
        [type/record field-types]
        [loop [i 0
               res int-const-0
               n [size field-types]]
          [if [lt-s i n]
            [let [fp [at field-types i]]
              [if [eq-word [name/word [pair/fst fp]] field-name-word]
                [pair res [pair/snd fp]]
                [continue
                  res [int-exp-add res [type-to-size-of-exp [pair/snd fp]]]
                  i [inc i]]]]
            [logq-abort field not found [identity field-name-word]]]]
        [logq-abort not implemented exp-to-inst field]]
       target-prim [type-to-primitive [pair/snd offset-p]]]
      [mk-load-inst target-prim [pair/fst ppt] [int-exp-add derefed-target [pair/fst offset-p]]]]

    [exp/assign dst src]
    [match dst
      [exp/var n]
      [wat-inst/global.set [name/word n] [exp-to-inst src]]

      [exp/deref target]
      [let
        [ttarget [type-of target]
         mem-name [get-memory-name-from-type [pair/fst [get-pointer-args ttarget]]]
         ttarget-elem [pair/snd [get-pointer-args ttarget]]
         assign-pointer
         [func assign-pointer [target ttarget-elem src]
          [match src
            [exp/array tvalue-elem elems]
            [do
              [assert-not [may-side-effect target] assign target cannot have side effects when assigning arrays]
              [let
                [size-of-int-exp [type-to-size-of-exp tvalue-elem]
                 ginsts [growable-list]
                 target-array-elem-type
                 [match ttarget-elem
                  [type/array elem-type -] elem-type
                  [logq-abort not an array]]]
                [loop [i 0 n [size elems]]
                  [when [lt-s i n]
                    [let
                      [offset-target
                        [int-exp-add
                          target
                          [int-exp-mul [mk-exp-i32 i] size-of-int-exp]]]
                      [push ginsts [assign-pointer offset-target target-array-elem-type [at elems i]]]
                      [continue i [inc i]]]]]
                [wat-inst/instructions [clone-growable-to-frozen-list ginsts]]]]

            [exp/tuple elems]
            [do
              [assert-not [may-side-effect target] assign target cannot have side effects when assigning tuples]
              [let
                [ginsts [growable-list]]
                [loop [i 0 n [size elems] acc int-const-0]
                  [when [lt-s i n]
                    [let
                      [elem [at elems i]
                       telem [type-of elem]
                       offset-target [int-exp-add acc [type-to-size-of-exp telem]]]
                      [push ginsts
                        [assign-pointer [int-exp-add target acc] telem elem]]
                      [continue i [inc i] acc offset-target]]]]
                [wat-inst/instructions [clone-growable-to-frozen-list ginsts]]]]

            [exp/record fields]
            [do
              [assert-not [may-side-effect target] assign target cannot have side effects when assigning record]
              [let
                [ginsts [growable-list]]
                [loop [i 0 n [size fields] acc int-const-0]
                  [when [lt-s i n]
                    [let
                      [field [at fields i]
                       field-exp [pair/snd field]
                       telem [type-of field-exp]
                       offset-target [int-exp-add acc [type-to-size-of-exp telem]]]
                      [push ginsts
                        [assign-pointer [int-exp-add target acc] telem field-exp]]
                      [continue i [inc i] acc offset-target]]]]
                [wat-inst/instructions [clone-growable-to-frozen-list ginsts]]]]

            [mk-store-inst ttarget-elem [pair/fst [get-pointer-args ttarget]] target src]]]]
        [assign-pointer target ttarget-elem src]]

      [exp/index index-target-exp index-exp]
      [let
        [derefed-target
         [match index-target-exp
          [exp/deref target]
          target
          [logq-abort can only assign to derefed pointers to arrays [identity index-target-exp]]]
         pointer-type [type-of derefed-target]
         ppt [get-pointer-args pointer-type]
         elem-type
         [match [type-of index-target-exp]
          [type/array elem-type -]
          elem-type

          [type/tuple elem-types]
          [logq-abort not implemented exp-to-inst assign index tuple [identity index-target-exp]]

          [logq-abort not implemented exp-to-inst assign index [identity index-target-exp]]]
         addr-exp
         [int-exp-add
          derefed-target
          [int-exp-mul index-exp [type-to-size-of-exp elem-type]]]]
        [mk-store-inst elem-type [pair/fst ppt] addr-exp src]]

      [logq-abort not implemented exp-to-inst assign [identity dst]]]

    [exp/data mem-name data-exp]
    [exp-to-inst [get active-data-map exp]]

    [exp/memory-static-top mem-name]
    [let [addr-pair [get-current-active-address-pair mem-name]]
      [exp-to-inst [exp/integer [pair/fst addr-pair] [atom-get [pair/snd addr-pair]]]]]

    [exp/cast t e]
    [exp-to-inst e]

    [logq-abort exp-to-inst not implemented [identity exp]]]]

[func exps-to-inst [forms]
  [wat-inst/instructions
    [if [is-empty forms]
      [list]
      [concat
        [list-map form [slice forms 0 [dec [size forms]]]
          [loop [res [exp-to-inst form] i [size [type-to-wat-types [type-of form]]]]
              [if i
                [continue
                  res [wat-inst-word [word drop] res]
                  i [dec i]]
                res]]]
        [list [exp-to-inst [last forms]]]]]]]
  ]
  [exp2inst-compiler exp-to-inst exps-to-inst glocals]]]]

[func mem-exp-to-wat-memory [mem-exp]
  [wat-memory
    [ifs
      [is-identical [memory-exp/type mem-exp] type-primitive-i32] [memory-kind/i32]
      [is-identical [memory-exp/type mem-exp] type-primitive-i64] [memory-kind/i64]
      [logq-abort not implemented memory-kind [memory-exp/type mem-exp]]]
    [word-to-int [name/word [memory-exp/init-size mem-exp]]]
    [if-let [max [memory-exp/max-size mem-exp]]
      [option/some [word-to-int [name/word max]]]
      [option/none]]]]

[func compile [tops]
  [let
    [imports [growable-list]
     memories [growable-list]
     globals [growable-list]
     funcs [growable-list]
     exports [growable-list]
     data [growable-list]]
    [for-each top tops
      [match top
        [top-decl/memory n mem-exp]
        [push memories
          [pair
            [name/word n]
            [mem-exp-to-wat-memory mem-exp]]]

        [top-decl/import mod-name exp-imports]
        [let [mod-name-word [name/word mod-name]]
          [for-each import-pair exp-imports
            [let [n [pair/fst import-pair]
                  nw [name/word n]
                  ik [pair/snd import-pair]]
              [push
                imports
                [pair
                  [pair mod-name-word nw]
                  [match ik
                    [import-kind-decl/function ps rt]
                    [wat-import-kind/func
                      nw
                      [list-map p ps [type-to-wat-type [pair/snd p]]]
                      [type-to-wat-types rt]]

                    [import-kind-decl/memory mem-exp]
                    [wat-import-kind/memory
                      nw
                      [mem-exp-to-wat-memory mem-exp]]]]]]]]

        [top-decl/export names]
        [for-each n names
          [push exports
            [let [nw [name/word n]
                  ekind
                  [match [get-desc-from-name n]
                    [desc-kind/local -] [logq-abort unreachable export local]
                    [desc-kind/top td]
                    [match [top-desc/kind td]
                      [top-desc-kind/value - --] [export-kind/global]
                      [top-desc-kind/function -] [export-kind/func]
                      [top-desc-kind/memory -] [export-kind/memory]]]]
              [pair nw [pair ekind nw]]]]]

        [top-decl/value k def-name exp]
        [let
          [e2ic [mk-exp-to-inst-compiler]
           e2i [exp2inst-compiler/exp-to-inst e2ic]
           inst [e2i exp]]
          [assert [is-empty [clone-growable-to-frozen-list [exp2inst-compiler/glocals e2ic]]] compile expected no locals]
          [push
            globals
            [wat-global
              [name/word def-name]
              [match k
                [value-kind/mutable] [mut/var]
                [value-kind/constant] [mut/const]]
              [type-to-wat-type [type-of exp]]
              inst]]]

        [top-decl/function f]
        [let
          [e2i [mk-exp-to-inst-compiler]
           es2i [exp2inst-compiler/exps-to-inst e2i]
           inst [es2i [exp-function/bodies f]]
           locals [clone-growable-to-frozen-list [exp2inst-compiler/glocals e2i]]]
           [push
            funcs
            [wat-func
              [name/word [exp-function/name f]]
              [list-map p [exp-function/parameters f]
                [pair [name/word [pair/fst p]] [type-to-wat-type [pair/snd p]]]]
              locals
              [type-to-wat-types [exp-function/result f]]
              inst]]]

        ]]
    [wat-output
      imports
      memories
      globals
      funcs
      exports
      data]]]

]
[func f2o [forms]
  [let
    [tops [top-forms-to-top-decls forms]
      output [compile tops]
      errors [clone-growable-to-frozen-list gerrors]]
    [when-not [is-empty errors]
      [logq listing errors]
      [log errors]
      [for-each e errors
        [logq error [identity e]]]
      [logq-abort aborting because of errors]]
    [comment [for-each top-form tops [log top-form]]]
    output]]
]
]]
