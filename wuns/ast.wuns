[load std.wuns]

[type wuns-func-kind [] [union [func] [fexpr] [macro]]]

[type word-with-form []
  [record
    [word word]
    [form form]]]

[type wuns-type []
  [union
    [word word-with-form]
    [apply word-with-form [list wuns-type]]]]

[type wuns-type-decl-kind []
  [union
    [union [list [pair word-with-form [list wuns-type]]]]
    [record [list [pair word-with-form wuns-type]]]]]

[type wuns-type-decl []
  [record
    [name word-with-form]
    [type-params [list word-with-form]]
    [kind wuns-type-decl-kind]]]

[type match-pattern [] [record [ctor word-with-form] [params [list word-with-form]]]]

[type literal []
  [union
    [i32 word-with-form]
    [f64 word-with-form]
    [word word-with-form]]]

[type
  wuns-func []
  [record
    [kind wuns-func-kind]
    [name word-with-form]
    [params [list word-with-form]]
    [rest-param [option word-with-form]]
    [body wuns]]
  wuns []
  [union
    [var word-with-form]
    [literal literal]
    [intrinsic word-with-form]
    [if wuns wuns wuns]
    [switch wuns [list [pair [list literal] wuns]] [option wuns]]
    [match wuns [list [pair match-pattern wuns]] [option wuns]]
    [do [list wuns]]
    [let [list [pair word-with-form wuns]] wuns]
    [letrec [list [pair word-with-form wuns]] wuns]
    [letfn [list wuns-func] wuns]
    [def word-with-form wuns]
    [func wuns-func]
    [call wuns [list wuns]]
    [call-word word-with-form [list form]]
    [extern [list word-with-form]]
    [type [list wuns-type-decl]]
    [type-anno wuns wuns-type]
    ]]

[defn parse-param-words [param-words]
  [let [s [size param-words]]
    [if [and [lt-s 1 s] [eq-word [word-with-form/word [at param-words -2]] [word ..]]]
      [pair [slice param-words 0 [sub s 2]] [some [last param-words]]]
      [pair param-words [none]]]]]

[defn form-to-word-with [form]
  [word-with-form [form-to-word form] form]]

[defn form-to-type [form]
  [match form
    [form/word w]
    [wuns-type/word [word-with-form w form]]

    [form/list l]
    [let-do [fw [form-to-word [first l]]]
      [assert [not [is-empty l]] type form-to-type is empty]
      [assert [not [eq-word fw [word type-scheme]]] type form-to-type does not accept type-scheme]
      [wuns-type/apply
        [form-to-word-with [first l]]
        [list-map arg [rest l] [form-to-type arg]]]]]]

[defn form-to-type-decl-kind [form]
  [match form
    [form/list l]
    [do
      [assert [not [is-empty l]] type decl kind form is empty]
      [switch [form-to-word [first l]]
        [word union]
        [wuns-type-decl-kind/union
          [list-map ctor [rest l]
            [let-do [ctor-list [form-to-list ctor]]
              [assert [not [is-empty ctor-list]] type decl kind union ctor is empty]
              [pair
                [form-to-word-with [first ctor-list]]
                [list-map arg [rest ctor-list] [form-to-type arg]]]]]]

        [word record]
        [logq-abort form-to-type-decl-kind not implemented record]

        [logq-abort form-to-type-decl-kind not implemented]]]

    [logq-abort form-to-type-decl-kind not implemented]]]

[defn form-to-lit [form]
  [match form
    [form/list l]
    [do
      [assert [eq 2 [size l]] lit form-to-lit size is not 2]
      [switch [form-to-word [first l]]
        [word i32] [literal/i32 [form-to-word-with [second l]]]
        [word f64] [literal/f64 [form-to-word-with [second l]]]
        [word word] [literal/word [form-to-word-with [second l]]]
        [logq-abort form-to-lit not implemented [identity form]]]]
    [logq-abort form-to-lit not implemented word [identity form]]]]

[defn form-to-literal-list [form]
  [match form
    [form/list l]
    [if [is-empty l]
      [list]
      [match [first l]
        [form/word w] [list [form-to-lit form]]
        [list-map arg l [form-to-lit arg]]]]
    [logq-abort form-to-literal-list not implemented]]]

[type report-message []
  [record
    [message form]
    [form form]]]

[type form-to-ast-converter []
  [record
    [form-to-ast [func [form] wuns]]
    [errors [atom [linked-list report-message]]]]]

[defn mk-form-to-ast []
  [let
    [errors [atom [linked-list/nil]]
     get-word
     [func gw [form]
      [match form
        [form/word w] [word-with-form w form]
        [do
          [push errors [report-message [quote [expected word]] form]]
          [word-with-form [word 0] [form/word [word 0]]]]]]]
  [letfn [
     [func form-to-func [form]
        [let [form-list [form-to-list form]
              kind
              [switch [word-with-form/word [get-word [first form-list]]]
                [word func]  [wuns-func-kind/func]
                [word fexpr] [wuns-func-kind/fexpr]
                [word macro] [wuns-func-kind/macro]
                [do
                  [push errors [report-message [quote [expected func fexpr or macro]] form]]
                  [wuns-func-kind/func]]]
              name [get-word [second form-list]]
              parsed-params [parse-param-words [list-map p [form-to-list [third form-list]] [get-word p]]]]
          [wuns-func
            kind
            name
            [pair/fst parsed-params]
            [pair/snd parsed-params]
            [form-to-ast [fourth form-list]]]]]
     [func form-to-ast [form]
      [let [report-error [func r [msg] [push errors [report-message msg form]]]]
        [match form
        [form/word w]
        [wuns/var [get-word form]]

        [form/list l]
        [let [n-of-args [dec [size l]]
              assert-n-args [func ana [n] [when-not [eq n-of-args n] [report-error [quote [expected n-of-args arguments]]]]]
              get-arg [func get-arg [i]
                        [if [lt-s i n-of-args]
                          [at l [inc i]]
                          [quote 0]]]]
        [match [first l]
          [form/word fw]
          [switch fw
            [word i32]
            [wuns/literal [literal/i32 [get-word [get-arg 0]]]]

            [word f64]
            [wuns/literal [literal/f64 [get-word [get-arg 0]]]]

            [word word]
            [wuns/literal [literal/word [get-word [get-arg 0]]]]

            [word extern]
            [wuns/extern [list-map w [rest l] [get-word w]]]

            [word intrinsic]
            [wuns/intrinsic [get-word [get-arg 0]]]

            [[word func] [word fexpr] [word macro]]
            [wuns/func [form-to-func form]]

            [word atom]
            [logq-abort form-to-ast not implemented atom]

            [word if]
            [do
              [assert-n-args 3]
              [wuns/if [form-to-ast [get-arg 0]] [form-to-ast [get-arg 1]] [form-to-ast [get-arg 2]]]]

            [word switch]
            [wuns/switch
              [form-to-ast [get-arg 0]]
              [list-map p [pairwise [slice l 2 [dec [size l]]]]
                [pair
                  [form-to-literal-list [first p]]
                  [form-to-ast [second p]]]]
              [if [is-odd [size l]]
                [some [form-to-ast [last l]]]
                [none]]]

            [word match]
            [wuns/match
              [form-to-ast [get-arg 0]]
              [list-map p [pairwise [slice l 2 [size l]]]
                [pair
                  [let-do [pat-list [form-to-list [first p]]]
                    [assert [not [is-empty pat-list]] match pattern is empty]
                    [match-pattern
                      [get-word [first pat-list]]
                      [list-map arg [rest pat-list] [get-word arg]]]]
                  [form-to-ast [second p]]]]
              [if [is-odd [size l]]
                [some [form-to-ast [last l]]]
                [none]]]

            [word do]
            [wuns/do [list-map arg [rest l] [form-to-ast arg]]]

            [word let]
            [let-do
              [bindings [form-to-list [get-arg 0]]]
              [assert-n-args 2]
              [wuns/let
                [list-map p [pairwise bindings] [pair [get-word [first p]] [form-to-ast [second p]]]]
                [form-to-ast [get-arg 1]]]]

            [word letrec]
            [let-do
              [bindings [form-to-list [get-arg 0]]]
              [assert-n-args 2]
              [wuns/letrec
                [list-map p [pairwise bindings] [pair [get-word [first p]] [form-to-ast [second p]]]]
                [form-to-ast [get-arg 1]]]]

            [word letfn]
            [do
              [assert-n-args 2]
              [wuns/letfn
                [list-map ff [form-to-list [get-arg 0]] [form-to-func ff]]
                [form-to-ast [get-arg 1]]]]

            [word def]
            [wuns/def [get-word [get-arg 0]] [form-to-ast [third l]]]

            [word type]
            [wuns/type
              [list-map triple [triplewise [rest l]]
                [wuns-type-decl
                  [get-word [first triple]]
                  [list-map tv [form-to-list [second triple]] [get-word tv]]
                  [form-to-type-decl-kind [third triple]]]]]

            [word type-anno]
            [do
              [assert-n-args 2]
              [todo check for type-scheme]
              [wuns/type-anno
                [form-to-ast [get-arg 0]]
                [form-to-type [get-arg 1]]]]

            [wuns/call-word [get-word [first l]] [rest l]]]

          [form/list fl]
          [wuns/call [form-to-ast [first l]] [list-map arg [rest l] [form-to-ast arg]]]]]]]]]
  [form-to-ast-converter
    form-to-ast
    errors]]]]

[comment
[defn form-to-wuns-ctor-calls [form]
  [match form
    [form/word w]
    [wuns/call [wuns/var [word form/word]] [list [wuns/literal [literal/word w]]]]

    [form/list l]
    [wuns/call [wuns/var [word flist]]
      [list-map e l [form-to-wuns-ctor-calls e]]]]]
]