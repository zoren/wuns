[load ast.wuns]

[type local-descriptor []
  [union
    [internal-func-name]
    [local]
    [parameter]
    [match-parameter]]]

[type local-context []
  [union
    [top]
    [local [transient-kv-map word local-descriptor] local-context]]]

[type global-descriptor []
  [union
    [union-ctor]]]

[type bound-ast []
  [union
    [var-local word]
    [var-global word]
    [literal literal]
    [intrinsic word]
    [if bound-ast bound-ast bound-ast]
    [switch bound-ast [list [pair [list literal] bound-ast]] [option bound-ast]]
    [match bound-ast [list [pair match-pattern bound-ast]] [option bound-ast]]
    [let [list [pair word bound-ast]] bound-ast]
    [func wuns-func-kind word [list word] [option word] bound-ast]
    ]]

[type bind-ast-errors []
  [union
    [local-redefined]
    [variable-unbound]
    [not-a-union-ctor]]]

[defn try-get-local [lctx name]
  [[func loop [cur-ctx]
    [match cur-ctx
      [local-context/top]
      [option/none]

      [local-context/local map rest]
      [if-let [desc [try-get map name]]
        [option/some desc]
        [loop rest]]]]
    lctx]]

[defn mk-bind-ast []
  [let
    [errors [atom [linked-list/nil]]
     push-error [func pe [name err] [push errors [pair name err]]]
     def-ctx [transient-kv-map]
     set-local
     [func set-local [lctx name desc]
      [do
        [when [has lctx name]
          [push-error name [bind-ast-errors/local-redefined]]]
        [set-kv-map lctx name desc]]]
     bind-ast
     [func bind-ast [lctx ast]
      [match ast
        [wuns/var w]
        [if-let [desc [try-get-local lctx w]]
          [bound-ast/var-local w]
          [do
            [when-not [has def-ctx w]
              [push-error w [bind-ast-errors/variable-unbound]]]
            [bound-ast/var-global w]]]

        [wuns/literal l]
        [bound-ast/literal l]

        [wuns/intrinsic l]
        [bound-ast/intrinsic l]

        [wuns/if c t e]
        [bound-ast/if
          [bind-ast lctx c]
          [bind-ast lctx t]
          [bind-ast lctx e]]

        [wuns/switch value cases opt-default]
        [bound-ast/switch
          [bind-ast lctx value]
          [list-map c cases
            [pair [pair/fst c] [bind-ast lctx [pair/snd c]]]]
          [if-let [d opt-default]
            [option/some [bind-ast lctx d]]
            [option/none]]]

        [wuns/match value cases opt-default]
        [bound-ast/match
          [bind-ast lctx value]
          [list-map c cases
            [let-do
              [match-pattern [pair/fst c]
               ctor-name [match-pattern/ctor match-pattern]
               new-ctx-map [transient-kv-map]
               new-ctx [local-context/local new-ctx-map lctx]]
              [if-let [def-desc [try-get def-ctx ctor-name]]
                [match def-desc
                  [global-descriptor/union-ctor]
                  [do]
                  [push-error ctor-name [bind-ast-errors/not-a-union-ctor]]]
                [push-error ctor-name [bind-ast-errors/variable-unbound]]]
              [for-each p [match-pattern/params match-pattern]
                [set-local new-ctx-map p [local-descriptor/match-parameter]]]
              [pair match-pattern [bind-ast new-ctx [pair/snd c]]]]]
          [if-let [d opt-default]
            [option/some [bind-ast lctx d]]
            [option/none]]]

        [wuns/let bindings body]
        [let-do
          [new-ctx-map [transient-kv-map]
           new-ctx [local-context/local new-ctx-map lctx]]
          [bound-ast/let
            [list-map binding bindings
              [let-do [name [pair/fst binding]]
                [set-local new-ctx-map name [local-descriptor/local]]
                [pair name [bind-ast new-ctx [pair/snd binding]]]]]
            [bind-ast new-ctx body]]]

        [wuns/func kind name parameters opt-rest body]
        [let-do
          [new-ctx-map [transient-kv-map]
           new-ctx [local-context/local new-ctx-map lctx]]
          [set-local new-ctx-map name [local-descriptor/internal-func-name]]
          [for-each p parameters
            [set-local new-ctx-map p [local-descriptor/parameter]]]
          [when-let [r opt-rest]
            [set-local new-ctx-map r [local-descriptor/parameter]]]
          [bound-ast/func kind name parameters opt-rest [bind-ast new-ctx body]]]]]]
  [pair bind-ast errors]]]
