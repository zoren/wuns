[load ast-bind.wuns]

[defn forms-to-asts [forms]
  [let [converter [mk-form-to-ast]
        f2a [form-to-ast-converter/form-to-ast converter]]
    [map-result forms
      [func f [form] [f2a form]]]]]

[defn test-ok-fn [forms]
  [let [converter [mk-form-to-ast]
        f2a [form-to-ast-converter/form-to-ast converter]]
    [match [forms-to-asts forms]
      [result/error errors]
      [do
        [log forms]
        [for-each error errors
          [log-report-message error]]
        [logq-abort test-ok there were errors]]
      [result/ok bforms] bforms]]]

[defmacro test-ok [.. forms]
  [flist [quote test-ok-fn]
    [form-concat [list [quote list]] [list-map f forms [mk-quote f]]]]]

[defn test-error-fn [expected-errors-form forms]
  [let [converter [mk-form-to-ast]
        f2a [form-to-ast-converter/form-to-ast converter]]
    [match [forms-to-asts forms]
      [result/error errors]
      [let [expected-errors [form-to-list expected-errors-form]]
        [when-not [eq [size expected-errors] [size errors]]
          [log-location [first forms]]
          [logq different number of errors than expected]
          [logq expected]
          [for-each error expected-errors [log error]]
          [logq actual]
          [for-each error errors [log-report-message error]]
          ]
        [for i 0 [size expected-errors]
          [let [expected-message [at expected-errors i]
                  actual-message [report-message/message [at errors i]]]
            [when-not [eq-form expected-message actual-message]
              [log-location [first forms]]
              [logq different message than expected]
              [logq expected [identity expected-message]]
              [logq actual [identity actual-message]]]]]]

      [result/ok bform]
      [do
        [log forms]
        [logq-abort test-error there were no errors]]]]]

[defmacro test-error [expected-errors .. forms]
  [flist [quote test-error-fn]
    [mk-quote expected-errors]
    [form-concat [list [quote list]] [list-map f forms [mk-quote f]]]]]

[defn test-suite []
  [test-ok
    [type opt [] [union [none]]]
    [opt/none]]

  [test-ok
[type atom [v] [union]]

[type option [a]
  [union
    [none]
    [some a]]]

[type function-kind []
  [union
    [ctor]
    [func]
    [macro]
    [fexpr]]]

[type
  type-var-kind []
  [union
    [linked type]
    [word word]]

  type-var []
  [record
    [kind [atom type-var-kind]]
    [level [atom i32]]]

  func-type []
  [record
    [params [list type]]
    [rest-param-opt [option type]]
    [result type]
    [kind function-kind]]

  inst-type []
  [union
    [func func-type]
    [apply word [list type]]]

  type []
  [union
    [var type-var]
    [inst inst-type]]]

    ]
  [test-ok
    [load m.wuns]
    x]
  [test-ok
    [type pair [a b] [record [fst a] [snd b]]]
    [pair [i32 1] [word a]]
    [pair/snd [pair [i32 1] [word a]]]]
  [test-ok
    [type-anno [i32 2] [type-scheme [a b c] [func [[list a] [list b]] [list c]]]]]

  [test-error [[redefing type]] [type t [] [union]] [type t [] [union]]]
  [test-error [[type name is reserved]] [type i32 [] [union]]]

  [test-error [[undefined type or type param]] [type t [] [union [ctor no-such-type]]]]
  [test-error [[undefined type]] [type t [] [union [ctor [no-such-type]]]]]
  [test-error [[type is empty]] [type-anno [i32 2] []]]
  [test-error [[type is empty]] [type-anno [i32 2] [type-scheme [] []]]]
[comment    [test-error [[does not accept type-scheme]] [type-anno [i32 2] [type-scheme [] type-scheme]]] ]
  [test-error [[does not accept type-scheme]] [type-anno [i32 2] [type-scheme [] [type-scheme]]]]
  [test-error [[func expects a parameter list and a return type]] [type-anno [i32 2] [func]]]
  [test-error [[func expects a parameter list and a return type]] [type-anno [i32 2] [func []]]]
  [test-error [[wrong number of type arguments to builtin]] [type t [] [union [ctor [i32 f64]]]]]
  [test-error [[wrong number of type arguments]] [type t [] [union [ctor]]] [type t2 [] [union [ctor [t i32]]]]]

  [test-error [[undefined type]] [type t [] [union [ctor [no-such-type]]]]]
  [test-error [[duplicate type param]] [type-anno [i32 2] [type-scheme [a a] i32]]]
  [test-error [[duplicate type param]] [type t [a a] [union]]]
  [test-error [[reserved types cannot be used as type params]] [type t [i32] [union]]]

  [test-error [[not bound to def at all]]
    [type option [a] [union [none] [some a]]]
    [defn f [opt]
      [match opt
        [opt p] [i32 5]
        [i32 3]]]]

  [test-error [[not bound to a union constructor]]
    [type option [a] [union [none] [some a]]]
    [def opt-none option/none]
    [defn f [opt]
      [match opt
        [opt-none p] [i32 5]
        [i32 3]]]]

  [test-error [[mismatched union types]]
    [type option [a] [union [none] [some a]]]
    [type result [o e] [union [ok o] [error e]]]
    [match [option/none]
      [option/none] [i32 5]
      [result/ok v] [i32 6]
      [word a]]]

  [test-error [[wrong number of arguments to union ctor]]
    [type option [a] [union [none] [some a]]]
    [defn f [opt] [match opt
      [option/none p] [i32 5]
      [i32 3]]]]

  [test-ok [let [] [i32 4] [i32 5]]]
  [test-ok [letfn [] [i32 4] [i32 5]]]
  [test-ok [func f [] [i32 4] [i32 5]]]

  [test-error [[not a defined name]] [let [f [func f [x] x]] [export f]]]
  [test-ok [defn f [x] x] [export f]]

  [test-error [[let var shadows def]]
    [def x [i32 5]]
    [let [x [i32 5]] x]]

  [test-error [[let var shadows local]]
    [defn f [x] [let [x [i32 5]] x]]
    ]

  [test-error [[not in a loop context]] [continue]]
  [test-error [[not in a loop context]] [loop [] [func f [] [continue]]]]
  [test-error [[not a loop var of the current loop]] [loop [i [i32 0]] [continue j [i32 5]]]]
  [test-ok [loop [] [i32 5]]]
  [test-ok [loop [i [i32 0]] [continue i [i32 5]]]]
  [test-ok [loop [i [i32 0]] [let [j [i32 6]] [continue i [i32 5]]]]]

  [word done]
  ]

[defn test-file-ok [file-name]
  [test-ok-fn [read-file file-name]]
  [word done]]
