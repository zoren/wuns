[def tests-run-atom [atom 0]]

[defn test-infer [forms]
  [let [gctx [make-infer-global-context]
        eval-context [getq gctx eval-context]
        messages [getq gctx messages]]
  [loop [i 0]
    [let [form [at forms i]
          - [logq we are testing [identity form]]
          e-form [expand-form gctx empty-local-context form]
          expand-messages [clone-growable-to-frozen-list messages]]
      [if-not [is-empty expand-messages]
        [kv-map-id expand-messages]
        [let [ft [infer-form-type gctx 0 0 e-form]]
          [if [lt-s i [dec [size forms]]]
            [continue i [inc i]]
            [kv-mapq present-type [normalize-present-type-scheme ft] messages messages]]]]]]]]

[defn test-binding-errors-fn [expected-messages forms]
  [let [res [test-infer forms]
        messages [try-getq res expand-messages]]
    [when [is-empty messages]
      [logq-abort test-failed failed there were no errors]]
    [when-not [eq [size expected-messages] [size messages]]
      [for-each message messages
        [log message]]
      [logq-abort test-failed failed expected [size expected-messages] messages but found [size messages]]]
    [for i 0 [size messages]
      [let [expected-message [at expected-messages i]
            message [getq [at messages i] message]]
        [assert [eq-form expected-message [form-list-list message]] binding errors test failed failed expected message [identity expected-message] but found [identity message]]]]
    [inc-atom tests-run-atom]]]

[defn quote-all-list [lmsg]
  [let [s [size lmsg]
        msg [mutable-list-of-size [inc s]]]
    [set-array msg 0 [quote list]]
    [loop [i 0]
      [when [lt-s i s]
        [set-array msg [inc i] [let [e [at lmsg i]] e]]
        [continue i [inc i]]]]
    [freeze-mutable-list msg]
    [form-list-list msg]]]

[defexpr test-binding-errors [expected-messages .. forms]
  [test-binding-errors-fn [form-to-list expected-messages] forms]]

[defn test-errors-fn [expected-type expected-messages forms]
  [let [res [test-infer forms]
        expand-messages [try-getq res expand-messages]
        - [when expand-messages
            [for-each message expand-messages
              [log message]]
            [logq-abort test-errors failed there were binding errors during expansion]]
        present-type [getq res present-type]
        messages [getq res messages]]
    [when [is-empty messages]
      [logq-abort test-failed failed there were no errors]]
    [when-not [eq [size expected-messages] [size messages]]
      [for-each message messages
        [log message]]
      [logq-abort test-failed failed expected [size expected-messages] messages but found [size messages]]]
    [for i 0 [size messages]
      [let [expected-message [at expected-messages i]
            message [getq [at messages i] message]]
        [assert [eq-form expected-message message] test-failed failed expected message [identity expected-message] but found [identity message]]]]
    [assert [eq-form present-type expected-type] test-failed failed expected type [identity expected-type] but found [identity present-type]]
    [inc-atom tests-run-atom]]]

[defexpr test-errors [expected-type expected-messages .. forms]
  [test-errors-fn expected-type [form-to-list expected-messages] forms]]

[defn test-ok-fn [expected-type forms]
  [let [res [test-infer forms]]
    [if-let [expand-messages [try-getq res expand-messages]]
      [do
        [for-each message expand-messages [log message]]
        [logq-abort test-ok failed there were binding errors during expansion]]
      [let [messages [getq res messages]
            present-type [getq res present-type]]
        [when-not [is-empty messages]
          [for-each message messages
            [log message]]
          [logq-abort test-ok failed there were errors]]
        [assert [eq-form present-type expected-type] test-ok failed expected type [identity expected-type] but found [identity present-type]]
        [inc-atom tests-run-atom]]]]]
[comment
[defmacro test-ok [expected-type .. forms]
  [form-list [quote test-ok-fn] [mk-quote expected-type] [form-to-list forms]]]
]
[defexpr test-ok [expected-type .. forms]
  [test-ok-fn expected-type forms]]
[comment variables]

[comment i32]
[test-ok-fn [quote i32] [list [quote [i32 42]]]]
[test-ok i32 [i32 42]]

[comment word]
[test-ok word [word a]]

[comment quote]
[test-ok form [quote a]]
[test-ok form [quote]]
[test-ok form [quote a b]]
[test-ok form [quote []]]
[test-ok form [quote [[]]]]
[test-ok form [quote [a []]]]

[comment if]
[test-errors i32 [[not unifiable - different types]] [if [quote ok] [i32 5] [i32 5]]]
[test-errors i32 [[not unifiable - different types]] [if [i32 5] [i32 5] [quote a]]]
[test-errors form [[not unifiable - different types]] [if [i32 5] [quote a] [i32 5]]]
[test-ok-fn [quote i32] [list [quote [if [i32 5] [i32 6] [i32 7]]]]]
[test-ok i32 [if [i32 5] [i32 6] [i32 7]]]
[test-ok i32 [quote a] [if [i32 5] [i32 6] [i32 7]]]
[test-ok form [if [i32 5] [quote a] [quote b]]]
[comment todo form subtype unification
  [test-ok [list form] [if [i32 5] [quote []] [quote [b]]]]
  [test-ok form [if [i32 5] [quote a] [quote []]]]]

[comment let]
[test-binding-errors [[var not found]] [let [x y y [i32 5]] [i32 6]]]
[test-ok unit [let []]]
[test-ok form [let [] [quote a]]]
[test-ok form [let [v [quote a]] v]]
[test-ok form [let [v [quote a] u v] u]]
[comment disable as it is slightly more difficult to compile
  [test-ok i32 [let [v [quote a] v [i32 5]] v]]
  [test-ok i32 [let [id [func id [x] x]] [id [i32 5]]]]
  [test-ok word [let [id [func id [x] x]] [id [quote a]]]]
]

[test-errors
  i32
  [[not unifiable - different types]]
  [if [let []] [i32 5] [i32 6]]]

[comment loop continue]
[test-binding-errors [[var not found]] [loop [x y y [i32 5]] [i32 6]]]
[test-ok unit [loop []]]
[test-ok form [loop [] [quote a]]]
[comment disable as it is slightly more difficult to compile
  [test-ok word [loop [v [quote a]] v]]
  [test-ok word [loop [v [quote a] u v] u]]
  [test-ok i32 [loop [v [quote a] v [i32 5]] v]]]

[test-binding-errors [[continue outside loop]] [continue]]
[test-errors [type-scheme [a] a] [[not unifiable - different types]] [loop [i [i32 5]] [continue i [quote a]]]]
[test-ok [type-scheme [a] a] [loop [] [continue]]]
[test-ok [type-scheme [a] a] [loop [i [i32 5]] [continue i [i32 6]]]]
[test-ok i32
  [loop [i [i32 0]]
    [if i
      [i32 2]
      [continue i [i32 1]]]]]

[comment func]
[comment let allows polymorphic functions]
[test-ok form [let [id [func id [x] x]] [id [i32 5]] [id [quote a]]]]
[test-errors [type-scheme [a] a] [[not unifiable - different types]]
  [[i32 5] [i32 6]]]
[comment function parameters cannot be polymorphically instantiated]
[test-errors i32 [[not unifiable  - different types]]
  [[func f [i]
    [i [i32 5]]
    [i [quote a]]]
   [func id [x] x]]]
[test-ok form
  [[func f [i] [i [quote a]]] [func id [x] x]]]
[test-errors i32 [[not unifiable - different number of parameters]]
  [[func one-param [p] [i32 5]]]]
[test-errors i32 [[not unifiable - different number of parameters]]
  [[func zero-params [] [i32 5]] [quote extra-argument]]]
[test-ok [func [] unit] [func z []]]
[test-ok [type-scheme [a] [func [a] unit]] [func z [x]]]
[test-ok [type-scheme [a b] [func [a b] unit]] [func z [x y]]]
[test-ok
  [type-scheme [a] [func [.. a] [list a]]]
  [func list [.. entries] entries]]
[test-ok
  [type-scheme [a b] [func [a b] i32]]
  [func f [x y] [i32 5]]]
[test-ok
  [type-scheme [a] [func [] a]]
  [func f [] [recur]]]
[test-ok
  [func [i32] i32]
  [func f [p]
    [if p
      [i32 2]
      [recur [i32 1]]]]]
[test-ok
  [type-scheme [a] [func [.. a] i32]]
  [func f [.. p] [i32 0]]]
[test-ok
  [type-scheme [a] [list a]]
  [[func f [.. p] p]]]
[test-ok
  [list i32]
  [[func f [.. p] p] [i32 5]]]
[test-ok
  [list i32]
  [[func f [.. p] p] [i32 5] [i32 6]]]
[test-errors
  [list i32]
  [[not unifiable - different types]]
  [[func f [.. p] p] [i32 5] [quote a]]]
[test-ok
  [type-scheme [a] [func [a] a]]
  [func id [x] x]]
[test-ok
  [func [i32] i32]
  [if [i32 5]
    [func id-i32 [x] [if x x x]]
    [func id [x] x]]]
[comment todo implement merging of rest param funcs
  [test-ok
    [type-scheme [a] [func [a] i32]]
    [if [i32 5]
      [func id-rest [.. ps] [i32 6]]
      [func id-i32 [p] [i32 5]]]]]

[comment test multiple top-level forms]
[test-ok
  form
  [i32 5]
  [quote a]]
[test-ok
  unit
  [def d [quote a]]]
[test-ok
  form
  [def d [quote a]]
  d]
[test-ok
  i32
  [def f [func id [x] x]]
  [f [i32 5]]
  [f [i32 6]]]
[test-ok
  form
  [def f [func id [x] x]]
  [f [i32 5]]
  [f [quote a]]]

[test-ok [type-scheme [a] a] [extern host size]]

[test-ok
  [list i32]
  [def list [func list [.. entries] entries]]
  [def test [list [i32 1] [i32 2]]]
  test]

[test-ok
  i32
  [def-with-meta my-extern-add-i32
    [[extern host kv-map] [word type] [quote [func [i32 i32] i32]]]
    [extern instructions i32.add]]
  [my-extern-add-i32 [i32 1] [i32 2]]]

[test-binding-errors [[already defined]]
  [def d [quote a]]
  [def d [quote b]]]

[test-binding-errors [[already defined]]
  [def d [quote a]]
  [def-with-meta d [[extern host kv-map]] [quote b]]]

[test-ok
  i32
  [def-with-meta my-extern-add-i32
    [[extern host kv-map] [word type] [quote [func [i32 i32] i32]]]
    [extern instructions i32.add]]
  [my-extern-add-i32 [i32 1] [i32 2]]]
[comment
[test-ok
  i32
  [def-with-meta defmacro
    [[extern host kv-map]
      [quote function-kind] [quote macro]]
    [func defmacro [name parameters .. bodies]
      [list [quote def-with-meta] name
        [quote
          [[extern host kv-map]
            [quote function-kind] [quote macro]]]
        [[extern host concat] [list [quote func] name parameters] bodies]]]]

  [my-extern-add-i32 [i32 1] [i32 2]]]
]
[comment can we add meta to a list and then use it as a type]
[comment
[test-ok
  form
  [[extern host list-with-meta]
    [quote [let []]]
    [[extern host kv-map]]]]
]
[logq we ran [atom-get tests-run-atom] tests]
