[type form []
  [union
    [word word]
    [list [list form]]]]

[import ./runtime-lib/host.js concat [type-scheme [a] [func [[list a] [list a]] [list a]]]]

[import ./runtime-lib/host.js concat-lists [type-scheme [a] [func [[list [list a]]] [list a]]]]

[import ./runtime-lib/host.js size [type-scheme [a] [func [[list a]] i32]]]

[import ./runtime-lib/host.js at [type-scheme [a] [func [[list a] i32] a]]]

[defn form-concat [.. list-forms]
  [form/list [concat-lists list-forms]]]

[defn flist [.. elements] [form/list elements]]

[defn list [.. entries] entries]

[defexpr quote [f] f]

[defn mk-quote [form] [flist [quote quote] form]]

[defmacro comment [.. -]
  [quote [do]]]

[defmacro todo [.. -]
  [quote [do]]]

[defn def-instruction-macro [def-name inst-name]
  [flist
    [quote defmacro]
    def-name
    [quote [a b]]
    [flist [quote flist] [quote [quote intrinsic]] [mk-quote inst-name] [quote a] [quote b]]]]

[defmacro def-instruction [def-name inst-name] [def-instruction-macro def-name inst-name]]

[type string [] [union]]

[import ./runtime-lib/host.js abort [type-scheme [a] [func [[list form]] a]]]
[import ./runtime-lib/host.js abort-string [type-scheme [a] [func [string] a]]]
[import ./runtime-lib/host.js print [type-scheme [a] [func [a] string]]]

[defn form-to-word [form]
  [match form
    [form/word w] w
    [abort [list [quote [form-to-word requires a word as its argument]]]]]]

[import ./runtime-lib/host.js concat-words [func [word word] word]]

[defmacro def-bin-i32-inst [name]
  [def-instruction-macro name [form/word [concat-words [word i32.] [form-to-word name]]]]]

[def-bin-i32-inst add]
[def-bin-i32-inst sub]
[def-bin-i32-inst mul]
[comment maybe introduce booleans instead of i32s for comparisons]
[def-bin-i32-inst lt-s]
[def-bin-i32-inst le-s]
[def-bin-i32-inst eq]

[def -2 [i32 -2]]
[def -1 [i32 -1]]
[def 0  [i32 0]]
[def 1  [i32 1]]
[def 2  [i32 2]]
[def 3  [i32 3]]
[def 4  [i32 4]]
[def 5  [i32 5]]
[def 6  [i32 6]]
[def 7  [i32 7]]
[def 8  [i32 8]]
[def 9  [i32 9]]

[defn inc [x] [add x 1]]

[defn dec [x] [sub x 1]]

[defn not [c] [if c 0 1]]


[defn is-empty [form]
  [eq 0 [size form]]]

[defn is-zero [x] [eq x 0]]

[def-instruction i32.bitwise-and i32.and]
[def-instruction i32.bitwise-ior i32.or]
[def-instruction i32.bitwise-xor i32.xor]

[defn is-odd [x] [i32.bitwise-and x 1]]

[defmacro is-negative [x] [flist [quote lt-s] x [quote [i32 0]]]]

[defn min [a b] [if [lt-s a b] a b]]
[defn max [a b] [if [lt-s a b] b a]]

[defn first [l] [at l 0]]
[defn second [l] [at l 1]]
[defn third [l] [at l 2]]
[defn fourth [l] [at l 3]]
[defn last [l] [at l -1]]

[defmacro when [cond .. forms]
  [flist
    [quote if] cond
    [form-concat [list [quote do]] forms]
    [quote [do]]]]

[defmacro when-not [cond .. forms]
  [flist
    [quote if] cond
    [quote [do]]
    [form-concat [list [quote do]] forms]]]

[defmacro if-not [cond false-form true-form]
  [flist
    [quote if] cond
    true-form
    false-form]]

[type mutable-list [a]
  [union]]

[defn is-word [form] [match form [form/word x] 1 0]]

[import ./runtime-lib/host.js list-init-func [type-scheme [a] [func [i32 [func [i32] a]] [list a]]]]

[defn list-map-fn [f l]
  [list-init-func [size l] [func list-map-fn-f [i] [f [at l i]]]]]

[defn quote-list [lmsg]
  [form/list
    [concat
      [list [quote list]]
      [list-map-fn
        [func f [e]
          [match e
            [form/word w] [mk-quote e]
            [form/list l] e]]
        lmsg]]]]

[import ./runtime-lib/host.js char-code-to-word [func [i32] word]]
[import ./runtime-lib/host.js char-code-to-string [func [i32] string]]

[def string-space [char-code-to-string [i32 32]]]
[import ./runtime-lib/host.js string-join [func [string [list string]] string]]

[import ./runtime-lib/host.js word-join [func [word [list word]] word]]

[defn strings-space-join [.. l]
  [string-join string-space l]]

[defn abort-string-list [lmsg]
  [flist
    [quote abort-string]
    [form-concat
      [list [quote strings-space-join]]
      [list-map-fn
        [func f [e]
          [flist [quote print]
            [match e
              [form/word w] [mk-quote e]
              [form/list l] e]]]
        lmsg]]]]

[import ./runtime-lib/host.js slice [type-scheme [a] [func [[list a] i32 i32] [list a]]]]

[defn rest [l] [slice l 1 [size l]]]

[defmacro assert [cond .. lmsg]
  [flist [quote if] cond
    [quote [do]]
    [abort-string-list lmsg]]]

[defmacro assert-not [cond .. lmsg]
  [flist [quote if] cond
    [abort-string-list lmsg]
    [quote [do]]]]

[defmacro logq-abort [.. lmsg]
  [abort-string-list lmsg]]

[defexpr qword [f]
  [match f
    [form/word w] [do]
    [form/list l] [logq-abort qword requires a word as its argument]]
  f]

[defn identity [x] x]

[defmacro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [is-odd s] ifs requires an odd number of arguments]
    [[func go [i res]
      [if [eq i 0]
        res
        [go
          [sub i 2]
          [flist [quote if] [at clauses [sub i 2]] [at clauses [dec i]] res]]]]
      [dec s]
      [at clauses -1]]]]

[comment and relies on there only being one falsy value [i32 0]
        it will not return any other falsy value as or returns the first truthy argument]
[defmacro and [.. clauses]
  [let [s [size clauses]]
    [if [is-zero s]
      [quote [i32 1]]
      [[func go [i res]
        [if [eq i 0]
          res
          [go
            [dec i]
            [flist [quote if] [at clauses [dec i]] res [quote [i32 0]]]]]]
         [dec s]
         [at clauses -1]]]]]

[type atom [v] [union]]

[import ./runtime-lib/host.js atom [type-scheme [a] [func [a] [atom a]]]]
[import ./runtime-lib/host.js atom-get [type-scheme [a] [func [[atom a]] a]]]
[import ./runtime-lib/host.js atom-set [type-scheme [a] [func [[atom a] a] [tuple]]]]

[defn inc-atom [atom]
  [let [prev-val [atom-get atom]]
    [atom-set atom [inc prev-val]]
    prev-val]]

[def word-counter [atom 0]]

[import ./runtime-lib/host.js code-points-to-word [func [[list i32]] word]]

[def-instruction i32.rem-s i32.rem-s]
[def-instruction i32.div-s i32.div-s]

[import ./runtime-lib/host.js int-to-word [func [i32] word]]
[import ./runtime-lib/host.js word-to-int [func [word] i32]]
[import ./runtime-lib/host.js word-to-f64 [func [word] f64]]

[defn i32-to-form-word [i] [form/word [int-to-word i]]]

[defn i32-to-form [i]
  [flist [quote i32] [i32-to-form-word i]]]

[import ./runtime-lib/host.js char-code-at [func [word i32] i32]]

[defmacro word-to-char-code [w]
  [i32-to-form [char-code-at [form-to-word w] 0]]]

[defn is-between-inclusive [lower c upper]
  [and [le-s lower c] [le-s c upper]]]

[import ./runtime-lib/host.js word-byte-size [func [word] i32]]

[defn genword-prefix [prefix]
  [form/word [concat-words [concat-words [word gen] prefix] [int-to-word [inc-atom word-counter]]]]]

[defn genword []
  [form/word [concat-words [word genword] [int-to-word [inc-atom word-counter]]]]]

[defmacro or [.. clauses]
  [let [s [size clauses]]
    [if [is-zero s]
      [quote [i32 0]]
      [[func go [i res]
        [if [eq i 0]
          res
          [go
            [dec i]
            [let [w [genword]]
              [flist [quote let] [flist w [at clauses [dec i]]]
                [flist [quote if] w w res]]]]]]
       [dec s]
       [at clauses -1]]]]]

[defn form-to-list [form]
  [match form
    [form/word w] [logq-abort form-to-list requires a list as its argument]
    [form/list l] l]]

[defn is-list [form]
  [match form
    [form/list l] 1
    0]]

[type option [a]
  [union
    [none]
    [some a]]]

[defn try-get-word [form]
  [match form
    [form/word w] [option/some w]
    [form/list l] [option/none]]]

[defn try-get-list [form]
  [match form
    [form/word w] [option/none]
    [form/list l] [option/some l]]]

[todo if-let could take a pattern as argument instead of a word]

[defmacro if-let [binding-form true-form false-form]
  [match binding-form
    [form/list binding]
    [do
      [assert [eq 2 [size binding]] if-let bindings should have exactly two elements]
      [let [v [first binding] cond [second binding]]
        [assert [is-word v] if-let requires a word as the first element of the first argument]
        [flist [quote match]
          cond
          [flist [quote option/some] v] true-form
          false-form]]]
    [logq-abort if-let requires a list as the first argument]]]

[defmacro when-let [binding-form .. forms]
  [match binding-form
    [form/list binding]
    [do
      [assert [eq 2 [size binding]] when-let bindings should have exactly two elements]
      [let [v [first binding] cond [second binding]]
        [assert [is-word v] when-let requires a word as the first element of the first argument]
        [flist [quote match]
          cond
          [flist [quote option/some] v] [form-concat [list [quote do]] forms]
          [quote [do]]]]]
    [logq-abort when-let requires a list as the first argument]]]

[defn eq-word [wa wb]
  [let [sa [word-byte-size wa] sb [word-byte-size wb]]
    [and
      [eq sa sb]
      [[func go [i]
        [if [lt-s i sa]
          [if [eq [char-code-at wa i] [char-code-at wb i]]
            [go [inc i]]
            0]
          1]] 0]]]]

[todo remove this]
[defn eq-form-word [fa fb]
  [match fa
    [form/word wa]
    [match fb
      [form/word wb] [eq-word wa wb]
      0]
    0]]

[defn eq-form [a b]
  [or
    [eq-form-word a b]
    [and [is-list a] [is-list b]
      [let [la [form-to-list a]
            lb [form-to-list b]
            sa [size la]]
        [and [eq sa [size lb]]
          [[func go [i]
            [if [lt-s i sa]
              [if [eq-form [at la i] [at lb i]]
                [go [inc i]]
                0]
              1]] 0]]]]]]

[defn for-func [iteration-var start increment end forms]
  [assert [lt-s 0 increment] for-func increment must be positive]
  [let [ew [genword]]
    [flist
      [quote loop] [flist ew end
                         iteration-var start]
      [flist [quote if]
        [flist [quote lt-s] iteration-var ew]
        [form-concat
          [list [quote do]]
          forms
          [list [flist [quote continue] iteration-var [flist [quote add] iteration-var [i32-to-form increment]]]]]
        [quote [do]]]]]]

[defmacro for [iw start end .. forms]
  [for-func iw start [i32 1] end forms]]

[defmacro for-3 [iw start end .. forms]
  [for-func iw start [i32 3] end forms]]

[defmacro for-pair [iw start end .. forms]
  [for-func iw start [i32 2] end forms]]

[defmacro for-each [element-var collection .. forms]
  [let
    [iteration-var [genword-prefix [word it]]
     col-var [genword-prefix [word col]]
     col-size-var [genword-prefix [word col-size]]]
    [assert [is-word element-var] for-each requires a word as the first argument]
    [flist
      [quote let] [flist col-var collection
                        col-size-var [flist [quote size] col-var]]
      [flist
        [quote loop] [flist iteration-var [quote [i32 0]]]
        [flist [quote if]
          [flist [quote lt-s] iteration-var col-size-var]
          [form-concat
            [list [quote let]]
            [list [flist element-var [flist [quote at] col-var iteration-var]]]
            [list
              [form-concat
                [list [quote do]]
                forms
                [list [flist [quote continue] iteration-var [flist [quote add] iteration-var [quote [i32 1]]]]]]]]
          [quote [do]]]]]]]

[type growable-list [a] [union]]

[import ./runtime-lib/host.js growable-list [type-scheme [a] [func [] [growable-list a]]]]
[import ./runtime-lib/host.js push [type-scheme [a] [func [[growable-list a] a] [tuple]]]]
[import ./runtime-lib/host.js clone-growable-to-frozen-list [type-scheme [a] [func [[growable-list a]] [list a]]]]

[defmacro list-map [element-var collection form]
  [let
    [iteration-var [genword-prefix [word it]]
     col-var [genword-prefix [word col]]
     col-size-var [genword-prefix [word col-size]]
     result-var [genword-prefix [word res]]]
    [assert [is-word element-var] for-each requires a word as the first argument]
    [flist
      [quote let] [flist col-var collection
                        col-size-var [flist [quote size] col-var]
                        result-var [quote [growable-list]]]
      [flist
        [quote loop] [flist iteration-var [quote [i32 0]]]
        [flist [quote if]
          [flist [quote lt-s] iteration-var col-size-var]
          [flist
            [quote let]
            [flist element-var [flist [quote at] col-var iteration-var]]
            [flist
              [quote do]
              [flist [quote push] result-var form]
              [flist [quote continue] iteration-var [flist [quote add] iteration-var [quote [i32 1]]]]]]
          [flist [quote clone-growable-to-frozen-list] result-var]]]]]]

[defn half [x] [i32.div-s x 2]]

[type transient-kv-map [k v] [union]]

[import ./runtime-lib/host.js transient-kv-map [type-scheme [k v] [func [] [transient-kv-map k v]]]]
[import ./runtime-lib/host.js set-kv-map [type-scheme [k v] [func [[transient-kv-map k v] k v] [tuple]]]]
[import ./runtime-lib/host.js kv-map-size [type-scheme [k v] [func [[transient-kv-map k v]] i32]]]
[todo remove kv-map-values as it relies on the order of the map]
[import ./runtime-lib/host.js kv-map-values [type-scheme [k v] [func [[transient-kv-map k v]] [list v]]]]

[defn mk-word [w] [flist [quote word] w]]

[import ./runtime-lib/host.js has [type-scheme [k v] [func [[transient-kv-map k v] k] i32]]]

[defmacro hasq [m w]
  [flist [quote has] m [mk-word w]]]

[import ./runtime-lib/host.js get [type-scheme [k v] [func [[transient-kv-map k v] k] v]]]

[defmacro getq [m w]
  [flist [quote get] m [mk-word w]]]

[defn try-get [m k]
  [if [has m k]
    [option/some [get m k]]
    [option/none]]]

[defmacro try-getq [m w]
  [flist [quote try-get] m [mk-word w]]]

[defmacro setq [m w v]
  [flist [quote set-kv-map] m [flist [quote word] w] v]]

[comment
  maybe we should be able to specify in the type-scheme that a is of pointer type
  we do not want to be able to compare functions with it
  and do not want to compare i32s with it]
[import ./runtime-lib/host.js is-identical [type-scheme [a] [func [a a] i32]]]

[type syntax-node-location [] [record [row i32] [column i32]]]

[type promise [a] [union]]

[import ./runtime-lib/files.js read-file-async [func [word] [promise string]]]
[import ./runtime-lib/files.js write-file-async [func [word string] [promise [tuple]]]]
[type file-descriptor [] [union]]
[import ./runtime-lib/files.js open [func [word] file-descriptor]]
[import ./runtime-lib/files.js close [func [file-descriptor] [tuple]]]
[import ./runtime-lib/files.js read-file-memory [func [file-descriptor memory i32 i32] i32]]

[import ./runtime-lib/host.js parse-string [func [string word] [list form]]]

[type syntax-node [] [union]]
[import ./runtime-lib/host.js try-get-syntax-node [func [form] [option syntax-node]]]
[import ./runtime-lib/host.js syntax-node-content-name [func [syntax-node] string]]

[import ./runtime-lib/host.js code-point-to-string [func [i32] string]]

[defmacro def-js-extern [name type]
  [flist [quote import] [quote ./runtime-lib/js.js] name type]]

[type js-value [] [union]]

[def-js-extern console-log [func [.. string] [tuple]]]

[def-js-extern promise-resolve [type-scheme [a] [func [a] [promise a]]]]
[def-js-extern promise-bind [type-scheme [a b] [func [[promise a] [func [a] [promise b]]] [promise b]]]]
[def-js-extern promise-then [type-scheme [a b] [func [[promise a] [func [a] b]] [promise b]]]]
[def-js-extern promises-seq [type-scheme [a b] [func [[list a] [func [a] [promise b]]] [promise [list b]]]]]

[defn read-parse-file-async [file-name]
  [promise-then
    [read-file-async file-name]
    [func then [content] [parse-string content file-name]]]]

[import ./runtime-lib/host.js apply [type-scheme [a b] [func [[func [.. a] b] [list a]] b]]]

[defn log-fn [forms]
  [apply console-log [list-map f forms [print f]]]]

[defmacro log [.. forms]
  [flist [quote log-fn]
    [form/list
      [concat
        [list [quote list]]
        forms]]]]

[defmacro logq [.. lmsg]
  [let [qforms [list-map form lmsg [match form [form/word w] [mk-quote form] [form/list l] form]]]
    [flist [quote log-fn]
      [form/list
        [concat
          [list [quote list]]
          [list-map qform qforms [flist [quote print] qform]]]]]]]

[import ./runtime-lib/host.js get-syntax-node-location-as-string [func [syntax-node] string]]

[defn log-node-location [node]
  [log [get-syntax-node-location-as-string node]]]

[defn try-get-syntax-node-rec [form]
  [if-let [node [try-get-syntax-node form]]
    [option/some node]
    [match form
      [form/word w] [option/none]
      [form/list l]
      [loop [i 0]
        [if [lt-s i [size l]]
          [if-let [node [try-get-syntax-node-rec [at l i]]]
            [option/some node]
            [continue i [inc i]]]
          [option/none]]]]]]

[defn log-location [form]
  [if-let [node [try-get-syntax-node-rec form]]
    [log-node-location node]
    [do
      [log form]
      [logq log-location unable to log location no node found]]]]

[type byte-array [] [union]]
[import ./runtime-lib/host.js byte-array [func [i32] byte-array]]
[import ./runtime-lib/host.js byte-array-resizable [func [i32 i32] byte-array]]
[import ./runtime-lib/host.js byte-array-resize [func [byte-array i32] [tuple]]]
[import ./runtime-lib/host.js byte-array-size [func [byte-array] i32]]
[import ./runtime-lib/host.js byte-array-get [func [byte-array i32] i32]]
[import ./runtime-lib/host.js byte-array-set [func [byte-array i32 i32] [tuple]]]
[import ./runtime-lib/host.js byte-array-log-as-string [func [byte-array] [tuple]]]
[import ./runtime-lib/host.js word-to-byte-array [func [word] byte-array]]
[import ./runtime-lib/host.js i32-to-byte-array [func [i32] byte-array]]
[import ./runtime-lib/host.js f64-to-byte-array [func [f64] byte-array]]
[import ./runtime-lib/host.js memory-log-as-string [func [memory i32 i32] [tuple]]]

[defn byte-array-set-byte-array [ba offset src]
  [let [src-size [byte-array-size src]]
    [for i 0 src-size
      [byte-array-set ba [add offset i] [byte-array-get src i]]]]]

[import ./runtime-lib/host.js triplewise [type-scheme [a] [func [[list a]] [list [list a]]]]]

[def false [i32 0]]
[def true [i32 1]]

[defn all [l pred]
  [[func go [i]
    [if [lt-s i [size l]]
      [if [pred [at l i]]
        [go [inc i]]
        false]
      true]]
    0]]

[defn exists [l pred]
  [[func go [i]
    [if [lt-s i [size l]]
      [if [pred [at l i]]
        true
        [go [inc i]]]
      false]]
    0]]

[type pair [a b] [record [fst a] [snd b]]]

[defn pairwise-pairs [l]
  [let [gl [growable-list]]
    [for-pair i 0 [dec [size l]]
      [push gl [pair [at l i] [at l [inc i]]]]]
    [clone-growable-to-frozen-list gl]]]

[defn try-assoc-list-get [l k]
  [loop [s [size l] i 0]
    [if [lt-s i s]
      [let [p [at l i]]
        [if [eq-word [pair/fst p] k]
          [option/some [pair/snd p]]
          [continue i [inc i]]]]
      [option/none]]]]

[type set [a] [union]]

[import ./runtime-lib/host.js set [type-scheme [a] [func [] [set a]]]]
[import ./runtime-lib/host.js set-add [type-scheme [a] [func [[set a] a] [tuple]]]]
[import ./runtime-lib/host.js set-has [type-scheme [a] [func [[set a] a] i32]]]
[import ./runtime-lib/host.js set-to-list [type-scheme [a] [func [[set a]] [list a]]]]

[defn filter [l pred]
  [let [filtered [growable-list]]
    [for-each x l
      [when [pred x]
        [push filtered x]]]
    [clone-growable-to-frozen-list filtered]]]

[type result [ok-type error-type]
  [union
    [ok ok-type]
    [error error-type]]]

[defn map-result [l f]
  [let [gl [growable-list]]
    [[func go [i]
      [if [lt-s i [size l]]
        [match [f [at l i]]
          [result/error e] [result/error e]
          [result/ok v]
          [do
            [push gl v]
            [go [inc i]]]]
        [result/ok [clone-growable-to-frozen-list gl]]]]
      0]]]

[def-js-extern performance-now [func [] f64]]

[def-js-extern to-js-value [type-scheme [a] [func [a] js-value]]]

[def-js-extern is-undefined [func [js-value] i32]]

[type object [v] [union]]

[def-js-extern object-to-kv-map [type-scheme [v] [func [[object v]] [transient-kv-map word v]]]]
[def-js-extern kv-map-to-object [type-scheme [v] [func [[transient-kv-map word v]] [object v]]]]
[def-js-extern object-get [func [js-value word] js-value]]
[def-js-extern byte-array-from [func [js-value] byte-array]]
[def-js-extern js-apply [func [js-value [list js-value]] js-value]]

[import ./runtime-lib/host.js mem-dump [func [memory i32 i32] [tuple]]]
