[macro comment [.. -] []]

[external-func mutable-list [] [mutable-list]]
[external-func push [mutable-list form] []]
[external-func size [form] [i32]]
[external-func at [form i32] [form]]

[macro constant-ids [.. id-constants]
  [let [f [mutable-list]]
    [push f [quote let]]
    [push f []]
    [loop [i [quote 0]]
      [if [lt i [size id-constants]]
        [let [name [at id-constants i]]
          [push f [list [quote constant] name [list [quote quote] name]]]
          [continue i [add i [quote 1]]]]
        f]]]]

[constant-ids -2 -1 0 1 2 3 4]

[func inc [x] [add x 1]]

[func dec [x] [sub x 1]]

[func not [c] [eq c 0]]

[func is-zero [x] [eq x 0]]

[func is-odd [x] [bitwise-and x 1]]

[func is-even [x] [not [is-odd x]]]

[func is-negative [x] [lt x 0]]

[func first [l] [at l 0]]
[func second [l] [at l 1]]
[func third [l] [at l 2]]
[func fourth [l] [at l 3]]
[func last [l] [at l -1]]

[external-func slice [list i32 i32] [list]]

[func rest [l] [slice l 1 [size l]]]

[func push-all [mut-list list]
  [let [s-l [size list]]
    [loop [i 0]
      [if [lt i s-l]
        [let []
          [push mut-list [at list i]]
          [continue i [inc i]]]
        []]]]]

[external-func freeze [mutable-list] [list]]

[func concat-lists [lists]
  [let [res [mutable-list] s [size lists]]
    [loop [i 0]
      [if [lt i s]
        [let []
          [push-all res [at lists i]]
          [continue i [inc i]]]
        [freeze res]]]]]

[func concat [.. lists] [concat-lists lists]]

[macro do [.. forms]
  [concat [quote [let []]] forms]]

[macro when [cond .. forms]
  [list
    [quote if] cond
    [concat [quote [do]] forms]
    []]]

[macro when-not [cond .. forms]
  [list
    [quote if] cond
    []
    [concat [quote [do]] forms]]]

[comment has side effect]
[external-func log [form] []]
[comment never returns should maybe be unreachable on wasm]
[external-func abort [] []]
[external-func is-word [form] [i32]]
[external-func is-list [form] [i32]]

[macro assert [cond .. lmsg]
  [let [msg [mutable-list]]
    [push msg [quote list]]
    [loop [i 0]
      [when [lt i [size lmsg]]
        [let [e [at lmsg i]]
          [push msg [if [is-word e] [list [quote quote] e] e]]
          [continue i [inc i]]]]
        ]
    [list [quote when-not] cond
      [list [quote log] msg]
      [quote [abort]]]]]

[macro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [not [is-zero s]] ifs requires an odd number of arguments]
    [if [eq s 1]
        [first clauses]
        [list [quote if] [first clauses]
          [second clauses]
          [concat [quote [ifs]] [slice clauses 2 [size clauses]]]]]]]

[external-func set-array [mutable-list i32 form] []]

[external-func concat-words [list] [word]]

[macro and [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      1

      [eq s 1]
      [first clauses]

      [list [quote if] [first clauses]
        [concat [quote [and]] [rest clauses]]
        0]]]]

[macro or [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      0

      [eq s 1]
      [first clauses]

      [list [quote if] [first clauses]
        1
        [concat [quote [or]] [rest clauses]]]]]]

[constant word-counter [mutable-list]]
[push word-counter 0]

[func genword []
  [let [c [first word-counter]]
    [set-array word-counter 0 [inc c]]
    [concat-words [list [quote genword] c]]]]

[macro for [iw start end .. forms]
  [let [ew [genword]]
    [list
      [quote let] [list ew end]
      [list
        [quote loop] [list iw start]
        [list [quote if]
          [list [quote lt] iw ew]
          [concat [quote let []] forms [list [list [quote continue] iw [list [quote add] iw [quote 1]]]]]
          []]]]]]

[func eq-word [a b]
  [and [eq [size a] [size b]]
    [loop [i 0]
      [if [lt i [size a]]
        [if [eq [at a i] [at b i]]
          [continue i [inc i]]
          0]
        1]]]]

[func eq-form [a b]
  [if
    [and [is-word a] [is-word b]]
    [eq-word a b]

    [and [is-list a] [is-list b]
      [let [s [size a]]
        [and [eq s [size b]]
          [loop [i 0]
            [or [ge i s]
              [and [eq-form [at a i] [at b i]] [continue i [inc i]]]]]]]]]]

[func assoc-list-index [ctx sym]
  [let [s [size ctx]]
    [loop [i 0]
      [if [ge i s]
        -1
        [if [eq-word [at ctx i] sym]
          i
          [continue i [add i 2]]]]]]]

[func assoc-list-has [ctx sym]
  [not [is-negative [assoc-list-index ctx sym]]]]

[func assoc-list-get [ctx sym]
  [let [index [assoc-list-index ctx sym]]
    [if [is-negative index]
      [do
        [log [concat [quote assoc-list-get key not found] [list sym ctx]]]
        [abort]]
      [at ctx [inc index]]]]]

[func assoc-list-set [ctx sym value]
  [let [index [assoc-list-index ctx sym]]
    [if [is-negative index]
      [do
        [push ctx sym]
        [push ctx value]]
      [set-array ctx [inc index] value]]]]

[external-func meta [form] [form]]
[external-func with-meta [form form] [form]]

[func assoc-meta [f k v]
  [let [ml [mutable-list]]
    [push-all ml [meta f]]
    [assoc-list-set ml k v]
    [with-meta f [freeze ml]]]]

[export comment constant-ids mutable-list push size at slice freeze concat-lists concat do when when-not assert ifs set-array concat-words and or eq-word is-word is-list eq-form assoc-list-index assoc-list-has assoc-list-get assoc-list-set meta with-meta assoc-meta log
  inc dec not is-zero is-odd is-even is-negative first second third fourth last rest push-all abort]

