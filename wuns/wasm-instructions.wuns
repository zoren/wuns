[def ascii-dash [const 45]]
[def ascii-underscore [const 95]]

[comment wuns does not have underscores so we convert dashes to underscores]
[defn wasm-name-to-wat-bytes [w]
  [let [sw [word-byte-size w]
        res [mutable-list-of-size sw]]
    [for i 0 sw
      [set-array res i
        [let [c [char-code-at w i]] [if [eq c ascii-dash] ascii-underscore c]]]]
    [freeze-mutable-list res]
    res]]

[defn make-operation-obj-aliases [name opcode immediate-parameters parameters results aliases]
  [kv-map
    name name
    wat-name [wasm-name-to-wat-bytes name]
    opcode opcode
    immediate-parameters immediate-parameters
    parameters parameters
    arity [add [size immediate-parameters] [size parameters]]
    results results
    aliases aliases]]

[defn make-operation-obj [name opcode immediate-parameters parameters results]
  [make-operation-obj-aliases name opcode immediate-parameters parameters results [list]]]

[def i32 [quote i32]]
[def i64 [quote i64]]
[def i32i32 [list i32 i32]]
[def i64i64 [list i64 i64]]
[def immediate-u32 [quote immediate-u32]]
[def immediate-s32 [quote immediate-s32]]
[def immediate-s64 [quote immediate-s64]]
[def empty-tuple [quote [tuple]]]
[def imm-u32u32 [list immediate-u32 immediate-u32]]
[def imm-memarg [quote memarg]]
[def imm-memargs [list imm-memarg]]

[defmacro make-binary-i32 [name opcode .. aliases]
  [list [quote quote] [make-operation-obj-aliases name opcode [list] i32i32 i32 aliases]]]

[defmacro make-binary-i64 [name opcode]
  [list [quote quote] [make-operation-obj name opcode [list] i64i64 i64]]]

[defmacro make-comp-i64 [name opcode]
  [list [quote quote] [make-operation-obj name opcode [list] i64i64 i32]]]

[def instructions
  [list
    [make-operation-obj [quote unreachable] [quote 0x00] [list] [list] empty-tuple]
    [make-operation-obj [quote nop] [quote 0x01] [list] [list] empty-tuple]

    [make-operation-obj [quote i32.const] [quote 0x41] [list immediate-s32] [list] i32]
    [make-operation-obj [quote i64.const] [quote 0x42] [list immediate-s64] [list] i64]

    [make-binary-i32 i32.eq   0x46 eq]
    [make-binary-i32 i32.ne   0x47]
    [make-binary-i32 i32.lt-s 0x48 lt-s]
    [make-binary-i32 i32.gt-s 0x4a gt-s]
    [make-binary-i32 i32.le-s 0x4c le-s]
    [make-binary-i32 i32.ge-s 0x4e ge-s]

    [make-comp-i64 i64.eq   0x51]
    [make-comp-i64 i64.ne   0x52]
    [make-comp-i64 i64.lt-s 0x53]
    [make-comp-i64 i64.gt-s 0x55]
    [make-comp-i64 i64.le-s 0x57]
    [make-comp-i64 i64.ge-s 0x59]

    [make-binary-i32 i32.add   0x6a add]
    [make-binary-i32 i32.sub   0x6b sub]
    [make-binary-i32 i32.mul   0x6c mul]
    [make-binary-i32 i32.div-s 0x6d div-s]

    [make-binary-i32 i32.and 0x71]
    [make-binary-i32 i32.ior 0x72]
    [make-binary-i32 i32.xor 0x73]

    [make-binary-i64 i64.add   0x7c]
    [make-binary-i64 i64.sub   0x7d]
    [make-binary-i64 i64.mul   0x7e]
    [make-binary-i64 i64.div-s 0x7f]

    [make-binary-i32 bitwise-shift-left 0x74]

    [make-operation-obj [quote i32.load] [quote 0x28]
      imm-memargs [list i32] i32]
    [make-operation-obj [quote i32.load8-s] [quote 0x2c]
      imm-memargs [list i32] i32]
    [make-operation-obj [quote load8-signed] [quote 0x2c]
      imm-u32u32 [list i32] i32]
    [make-operation-obj [quote load8-unsigned] [quote 0x2d]
      imm-u32u32 [list i32] i32]

    [make-operation-obj [quote i32.store] [quote 0x36]
      imm-memargs i32i32 empty-tuple]
    [make-operation-obj [quote i32.store8] [quote 0x3a]
      imm-memargs i32i32 empty-tuple]
    [make-operation-obj [quote memory.size] [quote 0x3f]
      [list immediate-u32] [list] i32]
    [make-operation-obj [quote memory.grow] [quote 0x40]
      [list immediate-u32] [list i32] i32]
    [make-operation-obj [quote memory.init] [quote 0xfc 0x08]
      imm-u32u32 [list i32 i32 i32] empty-tuple]
    [make-operation-obj [quote memory.copy] [quote 0xfc 0x0a]
      [list immediate-u32] [list i32 i32 i32] empty-tuple]
    [make-operation-obj [quote memory.fill] [quote 0xfc 0x0b]
      imm-u32u32 [list i32 i32 i32] empty-tuple]
    ]]

[def instructions-by-name
  [let [instructions-by-name [transient-kv-map]]
    [for-each instruction-obj instructions
      [set instructions-by-name [getq instruction-obj name] instruction-obj]
      [when [hasq instruction-obj aliases]
        [for-each alias [getq instruction-obj aliases]
          [set instructions-by-name alias instruction-obj]]]]
    [freeze-kv-map instructions-by-name]
    instructions-by-name]]

[defn get-instruction [name]
  [get instructions-by-name name]]

[defn try-get-instruction [name]
  [if [has instructions-by-name name]
    [get instructions-by-name name]
    0]]
