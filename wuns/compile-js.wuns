[load ast.wuns]

[type binop []
  [union
    [add]
    [sub]
    [mul]

    [eq]
    [ne]

    [lt]
    [le]
    [gt]
    [ge]

    [binary-and]
    [binary-ior]
    ]]

[type js-exp []
  [union
    [number word]
    [string word]
    [var word]
    [array [list js-exp]]
    [subscript js-exp js-exp]
    [ternary js-exp js-exp js-exp]
    [call js-exp [list js-exp]]
    [new js-exp [list js-exp]]
    [binop binop js-exp js-exp]
    [arrow-exp [list word] js-exp]
    [arrow-stmt [list word] js-stmt]
  ]

  js-stmt []
  [union
    [break]
    [exp js-exp]
    [throw js-exp]
    [return js-exp]
    [const-decl word js-exp]
    [if js-exp js-stmt js-stmt]
    [switch js-exp [list [pair [list js-exp] js-stmt]] js-stmt]
    [block [list js-stmt]]
    [seq [list js-stmt]]
  ]
]

[type js-value [] [union]]

[def run-js-stmt
  [type-anno
    [extern js run-js-stmt]
    [func [js-stmt] [result js-value js-value]]]]

[def call-js-func
  [type-anno
    [extern js call-js-func]
    [func [js-value [list form]] form]]]

[defn block [.. stmts] [js-stmt/block stmts]]

[def js-0 [js-exp/number [word 0]]]

[defn js-bitwise-or-0 [e]
  [js-exp/binop [binop/binary-ior] js-0 e]]

[defn instruction-name-to-binop [inst-name]
  [switch [word-with-form/word inst-name]
    [word i32.add] [binop/add]
    [word i32.sub] [binop/sub]
    [word i32.mul] [binop/mul]

    [word i32.eq] [binop/eq]
    [word i32.ne] [binop/ne]

    [word i32.lt-s] [binop/lt]
    [word i32.le-s] [binop/le]
    [word i32.gt-s] [binop/gt]
    [word i32.ge-s] [binop/ge]

    [logq-abort instruction-name-to-binop not implemented]]]

[defn try-get-func-kind [ast]
  [match ast
    [wuns/func f]
    [some [wuns-func/kind f]]
    [none]]]

[defn iife [stmt]
  [js-exp/call
    [js-exp/arrow-stmt [list] stmt]
    [list]]]

[defn mk-extern [ws]
  [[func add-sub [o i]
    [if [lt-s i [size ws]]
      [add-sub
        [js-exp/subscript o [js-exp/string [at ws i]]]
        [inc i]]
      o]]
    [js-exp/var [word externs]] [i32 0]]]

[def tmp-counter [atom 0]]

[defn gen-tmp-word []
  [concat-words [word tmp] [int-to-word [inc-atom tmp-counter]]]]

[defn form-to-quoted-js [form]
  [match form
    [form/word w]
    [js-exp/call [js-exp/var [word form/word]] [list [js-exp/string [word w]]]]

    [form/list l]
    [js-exp/call [js-exp/var [word form/list]]
      [list [js-exp/array [list-map e l [form-to-quoted-js e]]]]]]]

[defn literal-to-js-exp [lit]
  [match lit
    [literal/i32 wwf]
    [js-exp/number [word-with-form/word wwf]]

    [literal/f64 wwf]
    [js-exp/number [word-with-form/word wwf]]

    [literal/word wwf]
    [js-exp/string [word-with-form/word wwf]]]]

[defn compile-top-forms [top-forms]
  [let
    [macro-funcs [transient-kv-map]
     top-decls [atom [linked-list/nil]]
     form-ast-converter [mk-form-to-ast]
     form-to-ast [form-to-ast-converter/form-to-ast form-ast-converter]
     defexprs [transient-kv-map]]
    [letfn
    [[func cexp [wexp]
        [match wexp
          [wuns/var wwf]
          [js-exp/var [word-with-form/word wwf]]

          [wuns/literal l]
          [literal-to-js-exp l]

          [wuns/if cond t f]
          [js-exp/ternary [cexp cond] [cexp t] [cexp f]]

          [wuns/def w e]
          [logq-abort cexp def not implemented in cexp defs in exps seem wrong]

          [wuns/func func]
          [let [name [word-with-form/word [wuns-func/name func]]
                params [list-map p [wuns-func/parameters func] [word-with-form/word p]]
                body [wuns-func/body func]]
            [js-exp/call
              [js-exp/arrow-stmt [list]
                [block
                  [js-stmt/const-decl name
                    [js-exp/arrow-exp
                      [if-let [rest [wuns-func/rest-param func]]
                        [concat params [list [concat-words [word ...] [word-with-form/word rest]]]]
                        params]
                      [cexp body]]]
                  [js-stmt/return [js-exp/var name]]]]
              [list]]]

          [wuns/call-word wwf form-args]
          [let [w [word-with-form/word wwf]]
            [if-let [macro-func [try-get macro-funcs w]]
              [iife [cstmt 1 [form-to-ast [call-js-func macro-func form-args]]]]
              [if [has defexprs w]
                [js-exp/call [js-exp/var w] [list-map arg form-args [form-to-quoted-js arg]]]
                [js-exp/call [js-exp/var w] [list-map arg form-args [cexp [form-to-ast arg]]]]]]]

          [wuns/extern wwfs]
          [mk-extern [list-map wwf wwfs [word-with-form/word wwf]]]

          [wuns/call f args]
          [match f
            [wuns/intrinsic w]
            [js-exp/binop
              [instruction-name-to-binop w]
              [cexp [first args]]
              [cexp [second args]]]

            [js-exp/call [cexp f] [list-map arg args [cexp arg]]]]

          [iife [cstmt 1 wexp]]]]
      [func cstmt [is-tail wexp]
        [match wexp
          [wuns/if cond t f]
          [js-stmt/if [cexp cond]
            [block [cstmt is-tail t]]
            [block [cstmt is-tail f]]]

          [wuns/do exps]
          [js-stmt/block
            [concat
              [list-map f [slice exps 0 [dec [size exps]]] [cstmt 0 f]]
              [list [cstmt is-tail [last exps]]]]]

          [wuns/switch exp cases opt-default]
          [if is-tail
            [block
              [js-stmt/switch
                [cexp exp]
                [list-map case cases
                  [pair
                    [list-map lit [pair/fst case] [literal-to-js-exp lit]]
                    [cstmt is-tail [pair/snd case]]]]
                [if-let [default-case opt-default]
                  [cstmt is-tail default-case]
                  [js-stmt/throw [js-exp/string [word unmatched-switch]]]]]]
            [logq-abort cstmt not implemented switch non-tail]]

          [wuns/match exp cases opt-default]
          [if is-tail
            [let-do [tmp [gen-tmp-word]
                     tmp-args [js-exp/subscript [js-exp/var tmp] [js-exp/string [word args]]]]
              [comment let us call a get-tag function instead]
              [block
                [js-stmt/const-decl tmp [cexp exp]]
                [js-stmt/switch
                  [js-exp/subscript [js-exp/var tmp] [js-exp/string [word tag]]]
                  [list-map case cases
                    [let-do [mp [pair/fst case]
                             ctor [word-with-form/word [match-pattern/ctor mp]]
                             params [match-pattern/params mp]
                             counter [atom 0]]
                      [pair [list [js-exp/string ctor]]
                        [js-stmt/block
                          [concat
                            [list-map p params
                              [js-stmt/const-decl [word-with-form/word p] [js-exp/subscript tmp-args [js-exp/number [int-to-word [inc-atom counter]]]]]]
                            [list [cstmt is-tail [pair/snd case]]]]]]]]
                  [if-let [default-case opt-default]
                    [cstmt is-tail default-case]
                    [js-stmt/throw [js-exp/string [word unmatched-match]]]]]]]
            [logq-abort cstmt not implemented match [if is-tail [quote tail] [quote non-tail]]]]

          [wuns/def wwf e]
          [js-stmt/const-decl [word-with-form/word wwf] [cexp e]]

          [wuns/type decls]
          [js-stmt/seq
            [concat-lists
              [list-map decl decls
                [let [type-name [word-with-form/word [wuns-type-decl/name decl]]
                      type-name-prefix [concat-words type-name [word /]]
                      kind [wuns-type-decl/kind decl]]
                  [match kind
                    [wuns-type-decl-kind/union ctors]
                    [list-map ctor ctors
                      [let [tag [concat-words type-name-prefix [word-with-form/word [pair/fst ctor]]]
                            n-atom [atom 0]
                            params [list-map t [pair/snd ctor] [concat-words [word p] [int-to-word [inc-atom n-atom]]]]]
                        [js-stmt/const-decl
                          tag
                          [js-exp/arrow-exp
                            params
                            [js-exp/call
                              [mk-extern [list [word host] [word make-tagged-value]]]
                              [concat
                                [list [js-exp/string tag]]
                                [list-map p params [js-exp/var p]]]]]]]]

                    [wuns-type-decl-kind/record fields]
                    [logq-abort cstmt not implemented record]]]]]]

          [wuns/call-word wwf form-args]
          [if-let [mac-func [try-get macro-funcs [word-with-form/word wwf]]]
            [cstmt 1 [form-to-ast [call-js-func mac-func form-args]]]
            [if is-tail
              [js-stmt/return [cexp wexp]]
              [js-stmt/exp [cexp wexp]]]]

          [if is-tail
            [js-stmt/return [cexp wexp]]
            [js-stmt/exp [cexp wexp]]]]]]
    [do
      [for-each top-form top-forms
        [let-do [ast [form-to-ast top-form]]
          [push top-decls [cstmt 1 ast]]
          [match ast
            [wuns/def wwf e]
            [let [w [word-with-form/word wwf]]
              [when-let [kind [try-get-func-kind e]]
                [match kind
                  [wuns-func-kind/macro]
                  [let-do [top-so-far [clone-growable-to-frozen-list top-decls]
                          decl-block [js-stmt/block [concat top-so-far [list [js-stmt/return [js-exp/var w]]]]]
                          mac-func-result [run-js-stmt decl-block]]
                    [match mac-func-result
                      [result/ok mac-func]
                      [set-kv-map macro-funcs w mac-func]
                      [result/error e]
                      [logq-abort compile-top-forms error compiling macro function]]]
                  [wuns-func-kind/fexpr]
                  [set-kv-map defexprs w 1]
                  [wuns-func-kind/func]
                  [do]]]]
            [do]]]]
      [let [errors [clone-growable-to-frozen-list [form-to-ast-converter/errors form-ast-converter]]]
        [if [is-empty errors]
          [result/ok [js-stmt/seq [clone-growable-to-frozen-list top-decls]]]
          [result/error errors]]]]]]]

[defn compile-run-forms [forms]
  [match [compile-top-forms forms]
    [result/error e] [result/error e]
    [result/ok top-stmt]
    [match [run-js-stmt top-stmt]
      [result/error jsval-err]
      [do
        [log jsval-err]
        [result/error [list]]]
      [result/ok v] [result/ok v]]]]
