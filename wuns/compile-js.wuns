[load ast.wuns]

[type binop []
  [union
    [add]
    [sub]
    [mul]

    [eq]
    [ne]

    [lt]
    [le]
    [gt]
    [ge]

    [binary-and]
    [binary-ior]
    ]]

[type js-exp []
  [union
    [number word]
    [string word]
    [var word]
    [array [list js-exp]]
    [subscript js-exp js-exp]
    [ternary js-exp js-exp js-exp]
    [call js-exp [list js-exp]]
    [new js-exp [list js-exp]]
    [binop binop js-exp js-exp]
    [arrow-exp [list word] js-exp]
    [arrow-stmt [list word] js-stmt]
  ]

  js-stmt []
  [union
    [break]
    [exp js-exp]
    [throw js-exp]
    [return js-exp]
    [const-decl word js-exp]
    [if js-exp js-stmt js-stmt]
    [switch js-exp [list [pair [list js-exp] js-stmt]] js-stmt]
    [block [list js-stmt]]
    [seq [list js-stmt]]
  ]
]

[type js-value [] [union]]

[def run-js-stmt
  [type-anno
    [extern js run-js-stmt]
    [func [js-stmt] [js-value]]]]

[def run-js-exp
  [type-anno
    [extern js run-js-exp]
    [func [js-exp] [js-value]]]]

[def call-js-func
  [type-anno
    [extern js call-js-func]
    [func [js-value [list form]] form]]]

[defn block [.. stmts] [js-stmt/block stmts]]

[def js-0 [js-exp/number [word 0]]]

[defn js-bitwise-or-0 [e]
  [js-exp/binop [binop/binary-ior] js-0 e]]

[defn instruction-name-to-binop [inst-name]
  [switch inst-name
    [word i32.add] [binop/add]
    [word i32.sub] [binop/sub]
    [word i32.mul] [binop/mul]

    [word i32.eq] [binop/eq]
    [word i32.ne] [binop/ne]

    [word i32.lt-s] [binop/lt]
    [word i32.le-s] [binop/le]
    [word i32.gt-s] [binop/gt]
    [word i32.ge-s] [binop/ge]

    [logq-abort instruction-name-to-binop not implemented]]]

[defn is-wuns-macro [ast]
  [match ast
    [wuns/func kind name params opt-rest body]
    [match kind [wuns-func-kind/macro] 1 0]
    0]]

[defn iife [stmt]
  [js-exp/call
    [js-exp/arrow-stmt [list] stmt]
    [list]]]

[defn mk-extern [ws]
  [[func add-sub [o i]
    [if [lt-s i [size ws]]
      [add-sub
        [js-exp/subscript o [js-exp/string [at ws i]]]
        [inc i]]
      o]]
    [js-exp/var [word externs]] [i32 0]]]

[defn compile-top-forms [top-forms]
  [letrec
    [def-ctx [transient-kv-map]
     macro-funcs [transient-kv-map]
     top-decls [atom [linked-list/nil]]
     cexp
      [func cexp [wexp]
        [match wexp
          [wuns/var w]
          [js-exp/var w]

          [wuns/i32 w]
          [js-exp/number w]

          [wuns/f64 w]
          [js-exp/number w]

          [wuns/word w]
          [js-exp/string w]

          [wuns/if cond t f]
          [js-exp/ternary [cexp cond] [cexp t] [cexp f]]

          [wuns/func kind name params opt-rest body]
          [js-exp/call
            [js-exp/arrow-stmt [list]
              [block
                [js-stmt/const-decl name
                  [js-exp/arrow-exp
                    [if-let [rest opt-rest]
                      [concat params [list [concat-words [word ...] rest]]]
                      params] [cexp body]]]
                [js-stmt/return [js-exp/var name]]]]
            [list]]


          [wuns/call-word w form-args]
          [if-let [def-val [try-get def-ctx w]]
            [if-let [macro-func [try-get macro-funcs w]]
              [cexp [form-to-ast [call-js-func macro-func form-args]]]
              [js-exp/call [js-exp/var w] [list-map arg form-args [cexp [form-to-ast arg]]]]]
            [js-exp/call [js-exp/var w] [list-map arg form-args [cexp [form-to-ast arg]]]]]

          [wuns/call f args]
          [match f
            [wuns/intrinsic w]
            [js-exp/binop
              [instruction-name-to-binop w]
              [cexp [first args]]
              [cexp [second args]]]

            [wuns/extern ws]
            [js-exp/call [mk-extern ws] [list-map arg args [cexp arg]]]

            [js-exp/call [cexp f] [list-map arg args [cexp arg]]]]

          [iife [cstmt 1 wexp]]]]
     cstmt
      [func cstmt [is-tail wexp]
        [match wexp
          [wuns/if cond t f]
          [js-stmt/if [cexp cond]
            [block [cstmt is-tail t]]
            [block [cstmt is-tail f]]]

          [wuns/do exps]
          [js-stmt/block
            [concat
              [list-map f [slice exps 0 [dec [size exps]]] [cstmt 0 f]]
              [list [cstmt is-tail [last exps]]]]]

          [wuns/switch exp cases opt-default]
          [if is-tail
            [block
              [js-stmt/switch
                [cexp exp]
                [list-map case cases
                  [pair
                    [list-map cv [pair/fst case] [cexp cv]]
                    [cstmt is-tail [pair/snd case]]]]
                [if-let [default-case opt-default]
                  [cstmt is-tail default-case]
                  [logq-abort cstmt switch without default]]]]
            [logq-abort cstmt not implemented switch non-tail]]

          [wuns/def w e]
          [do
            [set-kv-map def-ctx w e]
            [js-stmt/const-decl w [cexp e]]]

          [wuns/type decls]
          [js-stmt/seq
            [concat-lists
              [list-map decl decls
                [let [type-name [wuns-type-decl/name decl]
                      type-name-prefix [concat-words type-name [word /]]
                      type-params [wuns-type-decl/type-params decl]
                      kind [wuns-type-decl/kind decl]]
                  [match kind
                    [wuns-type-decl-kind/union ctors]
                    [list-map ctor ctors
                      [let [n-atom [atom 0]
                            params [list-map t [pair/snd ctor] [concat-words [word p] [int-to-word [inc-atom n-atom]]]]]
                        [js-stmt/const-decl
                          [concat-words type-name-prefix [pair/fst ctor]]
                          [js-exp/arrow-exp
                            params
                            [js-exp/call
                              [mk-extern [list [word host] [word make-tagged-value]]]
                              [concat
                                [list [js-exp/string [concat-words type-name-prefix [pair/fst ctor]]]]
                                [list-map p params [js-exp/var p]]]]]]]]

                    [wuns-type-decl-kind/record fields]
                    [logq-abort cstmt not implemented record]]]]]]

          [if is-tail
            [js-stmt/return [cexp wexp]]
            [js-stmt/exp [cexp wexp]]]]]]
    [do
      [for-each top-form top-forms
        [let-do [ast [form-to-ast top-form]]
          [push top-decls [cstmt 0 ast]]
          [match ast
            [wuns/def w e]
            [when [is-wuns-macro e]
              [let-do [top-so-far [clone-growable-to-frozen-list top-decls]
                    decl-block [js-stmt/block [concat top-so-far [list [js-stmt/return [js-exp/var w]]]]]
                    mac-func [run-js-stmt decl-block]]
                [log mac-func]
                [set-kv-map macro-funcs w mac-func]]]
            [do]]]]
      [js-stmt/seq [clone-growable-to-frozen-list top-decls]]]
    ]]

[defn compile-run [form]
  [run-js-stmt [compile-top-forms [list form]]]]

[type
  exports []
  [record
    [compile-run [func [form] js-value]]
    [compile-top-forms [func [[list form]] js-stmt]]]]

[exports
  compile-run
  compile-top-forms]
