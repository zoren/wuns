[load std.wuns]

[type wuns-func-kind [] [union [func] [fexpr] [macro]]]

[type wuns-exp []
  [union
    [var word]
    [i32 word]
    [f64 word]
    [word word]
    [intrinsic word]
    [if wuns-exp wuns-exp wuns-exp]
    [switch wuns-exp [list [pair wuns-exp wuns-exp]] [option wuns-exp]]
    [do [list wuns-exp]]
    [let [list [pair word wuns-exp]] wuns-exp]
    [letrec [list [pair word wuns-exp]] wuns-exp]
    [def word wuns-exp]
    [func wuns-func-kind word [list word] [option word] wuns-exp]
    [call wuns-exp [list wuns-exp]]
    ]]

[defn parse-param-words [param-words]
  [let [s [size param-words]]
    [if [and [lt-s 1 s] [eq-word [at param-words -2] [word ..]]]
      [pair [slice param-words 0 [sub s 2]] [some [last param-words]]]
      [pair param-words [none]]]]]

[defn form-to-ast [form]
  [match form
    [form/word w]
    [wuns-exp/var w]

    [form/list l]
    [match [first l]
      [form/word fw]
      [switch fw
        [word i32]
        [wuns-exp/i32 [form-to-word [second l]]]

        [word f64]
        [wuns-exp/f64 [form-to-word [second l]]]

        [word word]
        [wuns-exp/word [form-to-word [second l]]]

        [word intrinsic]
        [wuns-exp/intrinsic [form-to-word [second l]]]

        [word if]
        [wuns-exp/if [form-to-ast [second l]] [form-to-ast [third l]] [form-to-ast [fourth l]]]

        [word switch]
        [wuns-exp/switch
          [form-to-ast [second l]]
          [list-map p [pairwise [slice l 2 [dec [size l]]]] [pair [form-to-ast [first p]] [form-to-ast [second p]]]]
          [if [is-odd [size l]]
            [some [form-to-ast [last l]]]
            [none]]]

        [word do]
        [wuns-exp/do [list-map arg [slice l 1 [size l]] [form-to-ast arg]]]

        [word let]
        [wuns-exp/let
          [list-map p [pairwise [slice l 1 [dec [size l]]]] [pair [form-to-word [first p]] [form-to-ast [second p]]]]
          [form-to-ast [last l]]]

        [word letrec]
        [wuns-exp/letrec
          [list-map p [pairwise [slice l 1 [dec [size l]]]] [pair [form-to-word [first p]] [form-to-ast [second p]]]]
          [form-to-ast [last l]]]

        [word def]
        [wuns-exp/def [form-to-word [second l]] [form-to-ast [third l]]]

        [word func]
        [let [name [form-to-word [second l]]
              parsed-params [parse-param-words [list-map p [form-to-list [third l]] [form-to-word p]]]
              body-form [fourth l]]
            [wuns-exp/func
              [wuns-func-kind/func]
              name
              [pair/fst parsed-params]
              [pair/snd parsed-params]
              [form-to-ast body-form]]]

        [word fexpr]
        [logq-abort form-to-ast not implemented fexpr]

        [word macro]
        [logq-abort form-to-ast not implemented macro]

        [wuns-exp/call [form-to-ast [first l]] [list-map arg [slice l 1 [size l]] [form-to-ast arg]]]]

      [form/list fl]
      [wuns-exp/call [form-to-ast [first l]] [list-map arg [slice l 1 [size l]] [form-to-ast arg]]]]]]

[type binop []
  [union
    [eq]
    [lt]
    [add]
    [sub]
    [mul]
    [binary-and]
    [binary-ior]
    ]]

[type js-exp []
  [union
    [number word]
    [string word]
    [var word]
    [ternary js-exp js-exp js-exp]
    [call js-exp [list js-exp]]
    [new js-exp [list js-exp]]
    [binop binop js-exp js-exp]
    [arrow-exp [list word] [option word] js-exp]
    [arrow-stmt [list word] [option word] js-stmt]
  ]

  js-stmt []
  [union
    [break]
    [exp js-exp]
    [throw js-exp]
    [return js-exp]
    [const-decl word js-exp]
    [if js-exp js-stmt js-stmt]
    [switch js-exp [list [pair js-exp js-stmt]] js-stmt]
    [block [list js-stmt]]
  ]
]

[defn block [.. stmts] [js-stmt/block stmts]]

[def js-0 [js-exp/number [word 0]]]

[defn js-bitwise-or-0 [e]
  [js-exp/binop [binop/binary-ior] js-0 e]]

[defn instruction-name-to-binop [inst-name]
  [switch inst-name
    [word i32.add] [binop/add]
    [word i32.sub] [binop/sub]
    [word i32.mul] [binop/mul]
    [word i32.eq] [binop/eq]
    [word i32.lt-s] [binop/lt]
    [logq-abort instruction-name-to-binop not implemented]]]

[defn wuns-to-js [outer-wexp]
  [letrec
    [cexp
      [func cexp [wexp]
        [match wexp
          [wuns-exp/var w]
          [js-exp/var w]

          [wuns-exp/i32 w]
          [js-exp/number w]

          [wuns-exp/f64 w]
          [js-exp/number w]

          [wuns-exp/word w]
          [js-exp/string w]

          [wuns-exp/if cond t f]
          [js-exp/ternary [cexp cond] [cexp t] [cexp f]]

          [wuns-exp/func kind name params opt-rest body]
          [js-exp/call
            [js-exp/arrow-stmt [list] [none]
              [block
                [js-stmt/const-decl name
                  [js-exp/arrow-exp params opt-rest [cexp body]]]
                [js-stmt/return [js-exp/var name]]]]
            [list]]

          [wuns-exp/call f args]
          [match f
            [wuns-exp/intrinsic w]
            [js-exp/binop
              [instruction-name-to-binop w]
              [cexp [first args]]
              [cexp [second args]]]

            [js-exp/call [cexp f] [list-map arg args [cexp arg]]]]

          [logq-abort cexp not implemented]]]
     cstmt
      [func cstmt [is-tail wexp]
        [match wexp
          [wuns-exp/if cond t f]
          [js-stmt/if [cexp cond]
            [block [cstmt is-tail t]]
            [block [cstmt is-tail f]]]

          [wuns-exp/do exps]
          [js-stmt/block
            [concat
              [list-map f [slice exps 0 [dec [size exps]]] [cstmt 0 f]]
              [list [cstmt is-tail [last exps]]]]]

          [wuns-exp/switch exp cases opt-default]
          [if is-tail
            [js-stmt/switch
              [cexp exp]
              [list-map case cases
                [pair
                  [cexp [pair/fst case]]
                  [cstmt is-tail [pair/snd case]]]]
              [if-let [default-case opt-default]
                [cstmt is-tail default-case]
                [logq-abort cstmt switch without default]]]
            [logq-abort cstmt not implemented switch]]

          [wuns-exp/def w e]
          [js-stmt/const-decl w [cexp e]]

          [if is-tail
            [js-stmt/return [cexp wexp]]
            [js-stmt/exp [cexp wexp]]]]]]
    [cstmt 1 outer-wexp]]]

[defn compile-top [form]
  [wuns-to-js [form-to-ast form]]]
