[load ast-bind.wuns]

[type binop []
  [union
    [add]
    [sub]
    [mul]

    [eq]
    [ne]

    [lt]
    [le]
    [gt]
    [ge]

    [binary-and]
    [binary-ior]
    ]]

[type js-exp []
  [union
    [number word]
    [string word]
    [var word]
    [array [list js-exp]]
    [object [list [pair word js-exp]]]
    [subscript js-exp js-exp]
    [ternary js-exp js-exp js-exp]
    [call js-exp [list js-exp]]
    [new js-exp [list js-exp]]
    [binop binop js-exp js-exp]
    [arrow-exp [list word] js-exp]
    [arrow-stmt [list word] js-stmt]
  ]

  js-stmt []
  [union
    [break]
    [continue]
    [exp js-exp]
    [throw js-exp]
    [return js-exp]
    [const-decl word js-exp]
    [assign word js-exp]
    [if js-exp js-stmt js-stmt]
    [switch js-exp [list [pair [list js-exp] js-stmt]] js-stmt]
    [block [list js-stmt]]
    [seq [list js-stmt]]
    [while js-exp js-stmt]
  ]
]

[def run-js-stmt
  [type-anno
    [extern js run-js-stmt]
    [func [js-stmt] [result js-value js-value]]]]

[def call-js-func
  [type-anno
    [extern js call-js-func]
    [func [js-value [list form]] form]]]

[defn block [.. stmts] [js-stmt/block stmts]]

[def js-0 [js-exp/number [word 0]]]
[def js-1 [js-exp/number [word 1]]]

[defn js-bitwise-or-0 [e]
  [js-exp/binop [binop/binary-ior] js-0 e]]

[defn instruction-name-to-binop [inst-name]
  [switch inst-name
    [[word i32.add]] [binop/add]
    [[word i32.sub]] [binop/sub]
    [[word i32.mul]] [binop/mul]

    [[word i32.eq]] [binop/eq]
    [[word i32.ne]] [binop/ne]

    [[word i32.lt-s]] [binop/lt]
    [[word i32.le-s]] [binop/le]
    [[word i32.gt-s]] [binop/gt]
    [[word i32.ge-s]] [binop/ge]

    [logq-abort instruction-name-to-binop not implemented]]]

[defn iife [stmt]
  [js-exp/call
    [js-exp/arrow-stmt [list] stmt]
    [list]]]

[defn mk-extern [ws]
  [[func add-sub [o i]
    [if [lt-s i [size ws]]
      [add-sub
        [js-exp/subscript o [js-exp/string [at ws i]]]
        [inc i]]
      o]]
    [js-exp/var [word externs]] [i32 0]]]

[def tmp-counter [atom 0]]

[defn gen-tmp-word []
  [concat-words [word tmp] [int-to-word [inc-atom tmp-counter]]]]

[defn form-to-quoted-js [form]
  [match form
    [form/word w]
    [js-exp/call [js-exp/var [word form/word]] [list [js-exp/string [word w]]]]

    [form/list l]
    [js-exp/call [js-exp/var [word form/list]]
      [list [js-exp/array [list-map e l [form-to-quoted-js e]]]]]]]

[defn try-get-word [form]
  [match form
    [form/word w] [some w]
    [form/list l] [none]]]

[defn try-get-list [form]
  [match form
    [form/word w] [none]
    [form/list l] [some l]]]

[defn compile-top-form [node-to-ldesc top-form]
  [let
    [current-func [atom [option/none]]
     current-tail-calls [atom [option/none]]
     try-get-tail
     [func tgt []
        [if-let [ctc [atom-get current-tail-calls]]
          [match ctc
            [tail-call-result/only-tail call-to-deps]
            [some call-to-deps]

            [none]]
          [none]]]]
    [letfn
    [[func cfunc [f]
      [let-do
        [name [bfunc/name f]
         params [bfunc/parameters f]
         opt-rest-param [bfunc/rest-param f]
         body [bfunc/body f]
         js-params
         [if-let [rest-param opt-rest-param]
           [concat params [list [concat-words [word ...] rest-param]]]
           params]
         tail-analysis [tail-call-analysis node-to-ldesc f]]
        [atom-set current-func [option/some f]]
        [atom-set current-tail-calls [option/some tail-analysis]]
        [let [js-body
              [match tail-analysis
                [tail-call-result/only-tail call-to-deps]
                [do
                  [js-exp/arrow-stmt
                    js-params
                    [block
                      [js-stmt/while js-1
                        [block
                          [cstmt true body]
                          [js-stmt/break]]]]]]

                [js-exp/arrow-exp js-params [cexp body]]]]
          [iife
            [block
              [js-stmt/const-decl name js-body]
              [js-stmt/return [js-exp/var name]]]]]]]
     [func cexp [bform]
      [match bform
        [bform/var wf]
        [js-exp/var wf]

        [bform/literal l]
        [match l
          [literal/i32 wf] [js-exp/number wf]
          [literal/f64 wf] [js-exp/number wf]
          [literal/word wf] [js-exp/string wf]]

        [bform/if c t e]
        [js-exp/ternary [cexp c] [cexp t] [cexp e]]

        [bform/intrinsic i]
        [logq-abort cexp toplevel intrinsic not allowed]

        [bform/extern ws]
        [mk-extern ws]

        [bform/let lpairs e]
        [iife
          [js-stmt/block
            [concat
              [list-map decl lpairs [js-stmt/const-decl [pair/fst decl] [cexp [pair/snd decl]]]]
              [list [js-stmt/return [cexp e]]]]]]

        [bform/letfn fns e]
        [iife
          [js-stmt/block
            [concat
              [list-map fn fns
                [js-stmt/const-decl
                  [bfunc/name fn]
                  [cfunc fn]]]
              [list [js-stmt/return [cexp e]]]]]]

        [bform/func f]
        [cfunc f]

        [bform/call-fexpr fexpr arg-forms]
        [js-exp/call [cexp fexpr] [list-map arg arg-forms [form-to-quoted-js arg]]]

        [bform/call f args]
        [match f
          [bform/intrinsic i]
          [js-exp/binop
            [instruction-name-to-binop i]
            [cexp [at args 0]]
            [cexp [at args 1]]]

          [if-let [deps [try-get-tail]]
            [logq-abort cexp found a tail call not expected]
            [js-exp/call [cexp f] [list-map arg args [cexp arg]]]]]

        [bform/type-anno bf t]
        [cexp bf]

        [iife [block [cstmt true bform]]]]]

      [func cstmt [is-tail bform]
        [match bform
          [bform/if cond t f]
          [js-stmt/if [cexp cond]
            [block [cstmt is-tail t]]
            [block [cstmt is-tail f]]]

          [bform/switch exp cases default]
          [js-stmt/switch
            [cexp exp]
            [list-map case cases
              [pair
                [list-map lit [pair/fst case] [cexp lit]]
                [if is-tail
                  [cstmt is-tail [pair/snd case]]
                  [block
                    [cstmt is-tail [pair/snd case]]
                    [js-stmt/break]]]]]
            [cstmt is-tail default]]

          [bform/match exp cases opt-default]
          [let-do [tmp [gen-tmp-word]
                   tmp-args [gen-tmp-word]]
            [block
              [js-stmt/const-decl tmp [cexp exp]]
              [js-stmt/const-decl tmp-args [js-exp/subscript [js-exp/var tmp] [js-exp/string [word args]]]]
              [js-stmt/switch
                [js-exp/call
                  [mk-extern [list [word host] [word get-tag]]]
                  [list [js-exp/var tmp]]]
                [list-map case cases
                  [let-do [mp [pair/fst case]
                            ctor [match-pattern/ctor mp]
                            params [match-pattern/params mp]
                            counter [atom 0]]
                    [pair [list [js-exp/string ctor]]
                      [js-stmt/block
                        [concat
                          [list-map p params
                            [js-stmt/const-decl p [js-exp/subscript [js-exp/var tmp-args] [js-exp/number [int-to-word [inc-atom counter]]]]]]
                          [if is-tail
                            [list [cstmt is-tail [pair/snd case]]]
                            [list
                              [cstmt is-tail [pair/snd case]]
                              [js-stmt/break]]]]]]]]
                [if-let [default-case opt-default]
                  [cstmt is-tail default-case]
                  [js-stmt/throw [js-exp/string [word unmatched-match]]]]]]]

          [bform/do forms]
          [js-stmt/block
            [concat
              [list-map f [slice forms 0 [dec [size forms]]] [cstmt 0 f]]
              [list [cstmt is-tail [last forms]]]]]

          [bform/def w e]
          [js-stmt/const-decl w [cexp e]]

          [bform/defexpr fexpr-func]
          [js-stmt/const-decl [bfunc/name fexpr-func] [cfunc fexpr-func]]

          [bform/defmacro macro-func]
          [js-stmt/const-decl [bfunc/name macro-func] [cfunc macro-func]]

          [bform/type decls]
          [js-stmt/seq
            [concat-lists
              [list-map decl decls
                [let [type-name [type-decl/name decl]
                      type-params [type-decl/type-params decl]
                      kind [type-decl/kind decl]
                      type-name-prefix [concat-words type-name [word /]]]
                  [match kind
                    [type-decl-kind/union ctors]
                    [list-map ctor ctors
                      [let [ctor-name [pair/fst ctor]
                            tag [concat-words type-name-prefix ctor-name]
                            n-atom [atom 0]
                            params [list-map - [pair/snd ctor] [concat-words [word p] [int-to-word [inc-atom n-atom]]]]]
                        [js-stmt/const-decl
                          tag
                          [js-exp/arrow-exp
                            params
                            [js-exp/call
                              [mk-extern [list [word host] [word make-tagged-value]]]
                              [list
                                [js-exp/string tag]
                                [js-exp/array [list-map p params [js-exp/var p]]]]]]]]]

                    [type-decl-kind/record fields]
                    [let-do [field-names [list-map field fields [pair/fst field]]]
                      [concat
                        [list
                          [js-stmt/const-decl
                            type-name
                            [js-exp/arrow-exp
                              field-names
                              [js-exp/call
                                [mk-extern [list [word host] [word make-record-from-object]]]
                                [list
                                  [js-exp/string type-name]
                                  [js-exp/object
                                    [list-map field-name field-names
                                      [pair
                                        field-name
                                        [js-exp/var field-name]]]]]]]]]
                        [list-map field-name field-names
                          [js-stmt/const-decl
                            [concat-words type-name-prefix field-name]
                            [js-exp/arrow-exp
                              [list [word record]]
                              [js-exp/subscript
                                [js-exp/var [word record]]
                                [js-exp/string field-name]]]]]]]

                    [logq-abort cstmt unknown type kind]]]]]]

          [bform/call f args]
          [if-let [call-to-deps [try-get-tail]]
            [if-let [deps [try-get call-to-deps bform]]
              [let-do
                [params [if-let [cf [atom-get current-func]] [bfunc/parameters cf] [logq-abort cstmt]]
                 deps-set [set]]
                [for-each i deps [set-add deps-set i]]
                [assert is-tail tail call must be tail]

                [let-do [tmp-consts [growable-list]
                         assignments [growable-list]
                         subst [transient-kv-map]]
                  [for i 0 [size args]
                    [if [set-has deps-set i]
                      [let-do [tmp [concat-words [word tmp] [int-to-word i]]]
                        [push tmp-consts [js-stmt/const-decl tmp [js-exp/var [at params i]]]]
                        [push assignments [js-stmt/assign [at params i] [cexp [at args i]]]]
                        [set-kv-map subst [at params i] [bform/var tmp]]]
                      [push assignments [js-stmt/assign [at params i] [cexp [substitute [at args i] subst]]]]]]
                  [js-stmt/seq
                    [concat
                      [concat
                        [clone-growable-to-frozen-list tmp-consts]
                        [clone-growable-to-frozen-list assignments]]
                      [list [js-stmt/continue]]]]]]
                [if is-tail
                  [js-stmt/return [cexp bform]]
                  [js-stmt/exp [cexp bform]]]]
            [if is-tail
              [js-stmt/return [cexp bform]]
              [js-stmt/exp [cexp bform]]]]

          [if is-tail
            [js-stmt/return [cexp bform]]
            [js-stmt/exp [cexp bform]]]]]]
    [cstmt true top-form]]]]

[type compile-run-error []
  [union
    [form-to-ast-errors [list report-message]]
    [eval-error js-value]]]

[defn map-result [l f]
  [let [gl [growable-list]]
    [[func go [i]
      [if [lt-s i [size l]]
        [match [f [at l i]]
          [result/error e] [result/error e]
          [result/ok v]
          [do
            [push gl v]
            [go [inc i]]]]
        [result/ok [clone-growable-to-frozen-list gl]]]]
      0]]]

[defn compile-run-forms [forms]
  [assert [not [is-empty forms]] run-forms must not be empty]
  [let-do
    [converter [mk-form-to-ast]
     f2a [form-to-ast-converter/form-to-ast converter]
     node-to-ldesc [form-to-ast-converter/node-to-ldesc converter]
     comp-run
     [func comp-run [form]
      [match [f2a form]
        [result/error f2a-errors]
        [result/error [compile-run-error/form-to-ast-errors f2a-errors]]

        [result/ok bform]
        [let [stmt [compile-top-form node-to-ldesc bform]]
          [result/ok stmt]]]]]
    [match [map-result forms comp-run]
      [result/error e] [result/error e]
      [result/ok stmts]
      [match [run-js-stmt [js-stmt/seq stmts]]
        [result/error jsval-err]
        [result/error [compile-run-error/eval-error jsval-err]]

        [result/ok v]
        [result/ok v]]]]]
