[type vector-data [a s]
  [record
    [size [i32]]
    [array [array a s]]]]

[memory i32 mem 1]

[type pvector [a]
  [alias
    [pointer [memory mem] [vector-data a s]]]]

[defn size [[type pvec [pvector a]]]
  [deref [field pvec size]]]

[def top [cast [pointer [memory mem] [i32]] [i32 0]]]

[defn identity [x] x]

[defn get-top []
  [deref top]]

[defn set-top [new-top]
  [assign top new-top]]

[defn alloc-init []
  [set-top [intrinsic i32.add [get-top] [i32 16]]]]

[defn alloc-n [n-bytes]
  [let [top-val [get-top]]
    [if [intrinsic i32.eq top-val [i32 0]] [intrinsic unreachable] [do]]
    [set-top [intrinsic i32.add top-val n-bytes]]
    top-val]]

[genfn alloc [a] []
  [cast [pointer [memory mem] a] [alloc-n [size-of a]]]]

[genfn vector-make-no-init [a] [[type size [i32]]]
  [let
    [p [call alloc [[vector-data a [literal size]]] []]]
    [assign [field p size] size]
    [cast [pvector a] p]]]

[defn inc [x]
  [intrinsic i32.add x [i32 1]]]

[genfn vector-make-init [a] [[type size [i32]] [type init a]]
  [let
    [p [call vector-make-no-init [a] [size]]]
    [loop [i [i32 0]]
      [when [lt-s i size]
        [assign [index [field p array] i] init]
        [continue i [inc i]]]]
    [cast [pvector a] p]]]

[defn vector-float [size]
  [call vector-make-init [[f64]] [size [f64 0]]]]

[defn vector-int [size]
  [call vector-make-init [[i32]] [size [i32 0]]]]

[defn vector-byte [size]
  [let
    [p [call vector-make-no-init [[u8]] [size]]
     par [field p array]]
    [loop [i [i32 0]]
      [when [lt-s i size]
        [assign [index par i] [i32 0]]
        [continue i [inc i]]]]
    p]]

[genfn get [a] [[type pvec [pvector a]] [type i [i32]]]
  [if [lt-s i [i32 0]] [intrinsic unreachable] [do]]
  [if [le-s [deref [field pvec size]] i] [intrinsic unreachable] [do]]
  [deref [index [field pvec array] i]]]

[genfn set [a] [[type pvec [pvector a]] [type i [i32]] [type v a]]
  [if [lt-s i [i32 0]] [intrinsic unreachable] [do]]
  [if [le-s [deref [field pvec size]] i] [intrinsic unreachable] [do]]
  [assign [index [field pvec array] i] v]]

[defn set-float [pvec i [type v [f64]]]
  [call set [[f64]] [pvec i v]]]

[defn get-float [[type pvec [pvector [f64]]] i]
  [call get [[f64]] [pvec i]]]

[defn set-int [pvec i [type v [i32]]]
  [call set [[i32]] [pvec i v]]]

[defn get-int [[type pvec [pvector [i32]]] i]
  [call get [[i32]] [pvec i]]]

[defn set-byte [[type pvec [pvector [u8]]] i v]
  [call set [[u8]] [pvec i v]]]

[defn get-byte [[type pvec [pvector [u8]]] i]
  [call get [[u8]] [pvec i]]]

[export alloc-init get-top size
  vector-float vector-int vector-byte
  get-float set-float
  get-int set-int
  get-byte set-byte

  ]
