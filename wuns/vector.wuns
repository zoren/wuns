[type vector-data [a s]
  [record
    [size [i32]]
    [array [array a s]]]]

[memory i32 mem 1]

[type pvector [v]
  [alias
    [pointer [memory mem] [vector-data v -s]]]]

[defn size [[type pvec [pvector -a]]]
  [deref [field pvec size]]]

[def top [cast [pointer [memory mem] [i32]] [i32 0]]]

[defn identity [x] x]

[defn get-top []
  [deref top]]

[defn set-top [new-top]
  [assign top new-top]]

[defn alloc-init []
  [set-top [intrinsic i32.add [get-top] [i32 16]]]]

[defn alloc-n [n-bytes]
  [let [top-val [get-top]]
    [if [intrinsic i32.eq top-val [i32 0]] [intrinsic unreachable] [do]]
    [set-top [intrinsic i32.add top-val n-bytes]]
    top-val]]

[genfn vector-make-no-init [elem-type] [[type size [i32]]]
  [let
    [p [alloc [vector-data elem-type [literal size]]]]
    [assign [field p size] size]
    [cast [pvector elem-type] p]]]

[defn inc [x]
  [intrinsic i32.add x [i32 1]]]

[genfn vector-make-init [a] [[type size [i32]] [type init a]]
  [let
    [p [call vector-make-no-init [a] [size]]]
    [loop [i [i32 0]]
      [when [lt-s i size]
        [assign [index [field p array] i] init]
        [continue i [inc i]]]]
    p]]

[defn vector-float [size]
  [call vector-make-init [[f64]] [size [f64 0]]]]

[defn vector-int [size]
  [call vector-make-init [[i32]] [size [i32 0]]]]

[defn vector-byte [size]
  [let
    [p [call vector-make-no-init [[u8]] [size]]
     par [field p array]]
    [loop [i [i32 0]]
      [when [lt-s i size]
        [assign [index par i] [i32 0]]
        [continue i [inc i]]]]
    p]]

[genfn get [a] [[type pvec [pvector a]] [type i [i32]]]
  [if [lt-s i [i32 0]] [intrinsic unreachable] [do]]
  [if [le-s [deref [field pvec size]] i] [intrinsic unreachable] [do]]
  [deref [index [field pvec array] i]]]

[genfn set [a] [[type pvec [pvector a]] [type i [i32]] [type v a]]
  [if [lt-s i [i32 0]] [intrinsic unreachable] [do]]
  [if [le-s [deref [field pvec size]] i] [intrinsic unreachable] [do]]
  [assign [index [field pvec array] i] v]]

[defn set-float [pvec i [type v [f64]]]
  [call set [[f64]] [pvec i v]]]

[defn get-float [[type pvec [pvector [f64]]] i]
  [call get [[f64]] [pvec i]]]

[defn set-int [pvec i [type v [i32]]]
  [call set [[i32]] [pvec i v]]]

[defn get-int [[type pvec [pvector [i32]]] i]
  [call get [[i32]] [pvec i]]]

[defn set-byte [[type pvec [pvector [u8]]] i v]
  [call set [[u8]] [pvec i v]]]

[defn get-byte [[type pvec [pvector [u8]]] i]
  [call get [[u8]] [pvec i]]]

[export alloc-init get-top size
  vector-float vector-int vector-byte
  get-float set-float
  get-int set-int
  get-byte set-byte]

[type growable-vector [a]
  [record
    [size [i32]]
    [capacity [i32]]
    [parray [pointer [memory mem] [array a -s]]]]]

[genfn growable-vector-make [a] [[type init-capacity [i32]]]
  [let
    [p [alloc [growable-vector a]]
     parray [cast [pointer [memory mem] [array a -s]] [alloc [array a [literal init-capacity]]]]]
    [assign [field p size] [i32 0]]
    [assign [field p capacity] init-capacity]
    [assign [field p parray] parray]
    p]]

[genfn growable-vector-push [a] [[type pgvec [pointer [memory mem] [growable-vector a]]] [type elem a]]
  [let
    [cur-size [deref [field pgvec size]]
     cur-capacity [deref [field pgvec capacity]]
     parray [deref [field pgvec parray]]]
    [when [eq cur-size cur-capacity]
      [intrinsic unreachable]]
    [assign [index parray cur-size] elem]
    [assign [field pgvec size] [inc cur-size]]]]

[genfn growable-vector-to-vector [a] [[type pgvec [pointer [memory mem] [growable-vector a]]]]
  [let
    [size [deref [field pgvec size]]
     arr [deref [field pgvec parray]]
     pvector [call vector-make-no-init [a] [size]]]
    [for i [i32 0] size
      [call set [a] [pvector i [deref [index arr i]]]]]
    pvector]]

[defn growable-vector-make-int [init-capacity]
  [cast [pointer [memory mem] [growable-vector [i32]]] [call growable-vector-make [[i32]] [init-capacity]]]]

[defn growable-vector-push-int [[type pgvec [pointer [memory mem] [growable-vector [i32]]]] elem]
  [call growable-vector-push [[i32]] [pgvec elem]]]

[defn growable-vector-to-vector-int [[type pgvec [pointer [memory mem] [growable-vector [i32]]]]]
  [call growable-vector-to-vector [[i32]] [pgvec]]]

[export growable-vector-make-int growable-vector-push-int growable-vector-to-vector-int]

[defn is-between-inclusive [lower c upper]
  [and [le-s lower c] [le-s c upper]]]

[defn is-whitespace [c]
  [or [eq c [i32 32]] [eq c [i32 10]]]]

[defn is-word-char [c]
  [or
    [is-between-inclusive [i32 97] c [i32 122]]
    [is-between-inclusive [i32 45] c [i32 57]]]]

[type form-word []
  [record
    [tag [literal [i32 0]]]
    [word [pvector [u8]]]]]

[defn form-word-make [byte-vector]
  [let [p [alloc [form-word]]]
    [assign [field p tag] [i32 0]]
    [assign [field p word] byte-vector]
    p]]

[genfn vector-slice [s] [[type pvec [pvector [u8]]] start end]
  [let
    [sz [sub end start]
     p [call vector-make-no-init [[u8]] [sz]]]
    [for i [i32 0] sz
      [set-byte p i [get-byte pvec [add start i]]]]
    p]]

[defn dvector-slice [pvec start end]
  [call vector-slice [[u8]] [pvec start end]]]
