[def 0 [i32 0]]
[def 1 [i32 1]]

[def false [i32 0]]
[def true [i32 1]]

[memory i32 mem 1]

[def top [cast [pointer [memory mem] [i32]] [i32 0]]]

[defn identity [x] x]

[defn get-top []
  [deref top]]

[defn set-top [new-top]
  [assign top new-top]]

[defn alloc-init []
  [set-top [add [get-top] [i32 16]]]]

[defn alloc-n [n-bytes]
  [let [top-val [get-top]]
    [when [eq top-val 0] [intrinsic unreachable]]
    [set-top [add top-val n-bytes]]
    top-val]]

[defn inc [x] [add x 1]]

[defn dec [x] [sub x 1]]

[type vector-data [a s]
  [record
    [size [i32]]
    [array [array a s]]]]

[type pvector [v]
  [pointer [memory mem] [vector-data v -s]]]

[defn size [[type pvec [pvector -a]]]
  [deref [field pvec size]]]

[genfn vector-make-no-init [elem-type] [[type size [i32]]]
  [let
    [p [alloc [vector-data elem-type [literal size]]]]
    [assign [field p size] size]
    [cast [pvector elem-type] p]]]

[genfn vector-make-init [a] [[type size [i32]] [type init a]]
  [let
    [p [call vector-make-no-init [a] [size]]
     par [field p array]]
    [loop [i 0]
      [when [lt-s i size]
        [assign [index par i] init]
        [continue i [inc i]]]]
    p]]

[defn vector-float [size]
  [call vector-make-init [[f64]] [size [f64 0]]]]

[defn vector-int [size]
  [call vector-make-init [[i32]] [size 0]]]

[defn vector-byte [size]
  [let
    [p [call vector-make-no-init [[u8]] [size]]
     par [field p array]]
    [loop [i 0]
      [when [lt-s i size]
        [assign [index par i] [cast [u8] 0]]
        [continue i [inc i]]]]
    p]]

[defn vector-get [[type pvec [pvector -a]] i]
  [if [lt-s i 0] [intrinsic unreachable] [do]]
  [if [le-s [size pvec] i] [intrinsic unreachable] [do]]
  [deref [index [field pvec array] i]]]

[defn vector-set [[type pvec [pvector -a]] i v]
  [when [lt-s i 0] [intrinsic unreachable]]
  [if [le-s [size pvec] i] [intrinsic unreachable] [do]]
  [assign [index [field pvec array] i] v]]

[defn vector-eq-u8 [[type pvec1 [pvector [u8]]] [type pvec2 [pvector [u8]]]]
  [or
    [is-identical pvec1 pvec2]
    [and
      [eq [size pvec1] [size pvec2]]
      [loop [n [size pvec1] i 0 pa1 [field pvec1 array] pa2 [field pvec2 array]]
        [if [le-s n i]
          true
          [if [eq [cast [i32] [deref [index pa1 i]]] [cast [i32] [deref [index pa2 i]]]]
            [continue i [inc i]]
            false]]]]]]

[genfn vector-slice [s] [[type psrc [pvector s]] start end]
  [let
    [sz [sub end start]
     pdst [call vector-make-no-init [s] [sz]]
     pdst-ar [field pdst array]
     psrc-ar [field psrc array]]
    [for i 0 sz
      [assign
        [index pdst-ar i]
        [deref [index psrc-ar [add start i]]]]]
    pdst]]

[defn set-float [pvec i [type v [f64]]]
  [vector-set pvec i v]]

[defn get-float [[type pvec [pvector [f64]]] i]
  [vector-get pvec i]]

[defn set-int [pvec i [type v [i32]]]
  [vector-set pvec i v]]

[defn get-int [[type pvec [pvector [i32]]] i]
  [vector-get pvec i]]

[defn set-byte [[type pvec [pvector [u8]]] i [type v [i32]]]
  [when [lt-s i 0] [intrinsic unreachable]]
  [when [le-s [size pvec] i] [intrinsic unreachable]]
  [assign [index [field pvec array] i] [cast [u8] v]]]

[defn get-byte [[type pvec [pvector [u8]]] i]
  [when [lt-s i 0] [intrinsic unreachable]]
  [when [le-s [size pvec] i] [intrinsic unreachable]]
  [cast [i32] [deref [index [field pvec array] i]]]]

[defn vector-slice-byte [pvec start end]
  [call vector-slice [[u8]] [pvec start end]]]

[export alloc-init get-top size
  vector-float vector-int vector-byte
  get-float set-float
  get-int set-int
  get-byte set-byte
  vector-eq-u8]

[type growable-vector [a]
  [record
    [size [i32]]
    [capacity [i32]]
    [parray [pointer [memory mem] [array a -s]]]]]

[genfn growable-vector-make [a] [[type init-capacity [i32]]]
  [let
    [p [alloc [growable-vector a]]
     parray [cast [pointer [memory mem] [array a -s]] [alloc [array a [literal init-capacity]]]]]
    [assign [field p size] 0]
    [assign [field p capacity] init-capacity]
    [assign [field p parray] parray]
    p]]

[defn growable-vector-push [[type pgvec [pointer [memory mem] [growable-vector -a]]] elem]
  [let
    [cur-size [deref [field pgvec size]]
     cur-capacity [deref [field pgvec capacity]]
     parray [deref [field pgvec parray]]]
    [when [eq cur-size cur-capacity]
      [intrinsic unreachable]]
    [assign [index parray cur-size] elem]
    [assign [field pgvec size] [inc cur-size]]]]

[genfn growable-vector-to-vector [a] [[type pgvec [pointer [memory mem] [growable-vector a]]]]
  [let
    [size [deref [field pgvec size]]
     pgvec-arr [deref [field pgvec parray]]
     pvector [call vector-make-no-init [a] [size]]
     par [field pvector array]]
    [for i 0 size
      [assign [index par i] [deref [index pgvec-arr i]]]]
    pvector]]

[defn growable-vector-reset [[type pgvec [pointer [memory mem] [growable-vector -a]]]]
  [assign [field pgvec size] 0]]

[defn growable-vector-make-int [init-capacity]
  [call growable-vector-make [[i32]] [init-capacity]]]

[defn growable-vector-push-int [[type pgvec [pointer [memory mem] [growable-vector [i32]]]] elem]
  [growable-vector-push pgvec elem]]

[defn growable-vector-to-vector-int [[type pgvec [pointer [memory mem] [growable-vector [i32]]]]]
  [call growable-vector-to-vector [[i32]] [pgvec]]]

[export growable-vector-make-int growable-vector-push-int growable-vector-to-vector-int]

[defn is-between-inclusive [lower c upper]
  [and [le-s lower c] [le-s c upper]]]

[defn is-whitespace [c]
  [or [eq c [i32 32]] [eq c [i32 10]]]]

[defn is-word-char [c]
  [or
    [is-between-inclusive [i32 97] c [i32 122]]
    [is-between-inclusive [i32 45] c [i32 57]]]]

[type word []
  [pvector [u8]]]

[type form-word []
  [record
    [tag [literal [i32 10]]]
    [word [word]]]]

[type
  form-list []
  [record
    [tag [literal [i32 11]]]
    [forms [pvector [pointer [memory mem] [form]]]]]

  form []
  [union
    [form-word]
    [form-list]]]

[defn form-word-make [word]
  [let [p [alloc [form-word]]]
    [assign [field p tag] [i32 10]]
    [assign [field p word] word]
    [cast [pointer [memory mem] [form]] p]]]

[defn form-list-make [forms]
  [let [p [alloc [form-list]]]
    [assign [field p tag] [i32 11]]
    [assign [field p forms] forms]
    [cast [pointer [memory mem] [form]] p]]]

[type-predicate form-is-word [[type form [pointer [memory mem] [form]]]] [pointer [memory mem] [form-word]]
  [eq [deref [field form tag]] [i32 10]]]

[type-predicate form-is-list [[type form [pointer [memory mem] [form]]]] [pointer [memory mem] [form-list]]
  [eq [deref [field form tag]] [i32 11]]]

[defn form-get-word [[type form [pointer [memory mem] [form]]]]
  [if [form-is-word form]
    [deref [field form word]]
    [intrinsic unreachable]]]

[defn form-get-list [[type form [pointer [memory mem] [form]]]]
  [if [form-is-list form]
    [deref [field form forms]]
    [intrinsic unreachable]]]

[defn form-size-length [form]
  [ifs
    [form-is-word form]
    [size [deref [field form word]]]

    [form-is-list form]
    [size [deref [field form forms]]]

    [intrinsic unreachable]]]

[defn max [a b]
  [if [lt-s a b] b a]]

[defn form-depth [form]
  [ifs
    [form-is-word form]
    1

    [form-is-list form]
    [let [forms [deref [field form forms]]]
      [loop [i 0 n [size forms] r 0]
        [if [lt-s i n]
          [continue
            r [inc [max r [form-depth [vector-get forms i]]]]
            i [inc i]]
          r]]]

    [intrinsic unreachable]]]

[export form-word-make form-list-make form-get-word form-get-list form-depth form-size-length]

[type parser-stack []
  [array
    [pointer [memory mem]
      [growable-vector [pointer [memory mem] [form]]]]
    [literal [i32 16]]]]

[defn growable-vector-push-form [
    [type pgvec [pointer [memory mem] [growable-vector [pointer [memory mem] [form]]]]]
    [type elem [pointer [memory mem] [form]]]]
  [growable-vector-push pgvec elem]]

[defn make-stack [init-capacity]
  [let [parray [alloc [parser-stack]]]
    [for i 0 [i32 16]
      [assign [index parray i] [call growable-vector-make [[pointer [memory mem] [form]]] [init-capacity]]]]
    parray]]

[defn scan-word-end [[type bytes [pvector [u8]]] start]
  [loop
    [n-of-bytes [size bytes]
     i start]
    [if-not [lt-s i n-of-bytes]
      i
      [if [let [c [get-byte bytes i]] [is-word-char c]]
        [continue i [inc i]]
        i]]]]

[defn parse [[type bytes [pvector [u8]]]]
  [loop
    [stack [make-stack [i32 16]]
     n-of-bytes [size bytes]
     i 0
     stack-index [i32 -1]]
    [if-not [lt-s i n-of-bytes]
      [if [is-negative stack-index]
        [cast [pointer [memory mem] [form]] 0]
        [do
          [when-not [eq 0 stack-index] [intrinsic unreachable]]
          [form-list-make [call growable-vector-to-vector [[pointer [memory mem] [form]]] [[deref [index stack stack-index]]]]]]]
      [let [c [get-byte bytes i]]
        [ifs
          [is-word-char c]
          [let [word-end [scan-word-end bytes [inc i]]
                fw [form-word-make [vector-slice-byte bytes i word-end]]]
            [if [is-negative stack-index]
              fw
              [do
                [growable-vector-push-form [deref [index stack stack-index]] fw]
                [when-not [lt-s i word-end] [intrinsic unreachable]]
                [continue i word-end]]]]

          [is-whitespace c]
          [continue i [inc i]]

          [eq c [i32 91]]
          [do
            [when [lt-s [i32 16] stack-index] [intrinsic unreachable]]
            [continue
              i [inc i]
              stack-index [inc stack-index]]]

          [eq c [i32 93]]
          [do
            [when [is-negative stack-index] [intrinsic unreachable]]
            [let [gvec [deref [index stack stack-index]]
                  form-vector [call growable-vector-to-vector [[pointer [memory mem] [form]]] [gvec]]]
              [growable-vector-reset gvec]
              [if [eq stack-index 0]
                [form-list-make form-vector]
                [do
                  [continue
                    i [inc i]
                    stack-index [dec stack-index]]]]]]

          [intrinsic unreachable]]]]]]

[export parse]

[def fnv-prime [i32 16777619]]
[def fnv-offset-basis [i32 2166136261]]

[defn vector-u8-hash-fnv-1a-i32 [[type bytes [pvector [u8]]]]
  [loop [n [size bytes]
         ar [field bytes array]
         i 0
         hash fnv-offset-basis]
    [if [le-s n i]
      hash
      [continue
        hash
        [mul
          [intrinsic i32.xor hash [cast [i32] [deref [index ar i]]]]
          fnv-prime]
        i [inc i]]]]]

[export vector-u8-hash-fnv-1a-i32]
