
[def tests-run-atom [atom 0]]

[defn test-ok-fn [expected-type forms]
  [let [gctx [make-global-context]
        res [check-top-forms gctx forms]
        present-type [normalize-present-type-scheme res]
        messages [getq gctx messages]]
    [do
      [when-not [is-empty messages]
        [for-each message messages
          [log message [meta [getq message form]]]]
        [logq-abort test-ok failed there were errors]]
      [assert [eq-form present-type expected-type] test-ok failed expected type [identity expected-type] but found [identity present-type]]
      [inc-atom tests-run-atom]]]]

[defexpr test-ok [expected-type .. forms]
  [test-ok-fn expected-type forms]]

[defn check1 [form]
  [let [gctx [make-global-context]
        res [check-top gctx form]]
    [do
      [for-each message-obj [getq gctx messages]
        [log [getq message-obj message]]]
      [normalize-present-type-scheme res]]]]

[defn eq-list-of-forms [l1 l2]
  [and [eq [size l1] [size l2]]
    [[func eq-list-of-forms-go [i]
      [if [lt-s i [size l1]]
        [if [eq-form [at l1 i] [at l2 i]]
          [eq-list-of-forms-go [inc i]]
          0]
        1]] 0]]]

[defn test-errors-fn [expected-type expected-messages forms]
  [let-do
   [gctx [make-global-context]
    res [check-top-forms gctx forms]
    present-type [normalize-present-type-scheme res]
    messages [getq gctx messages]]
    [if [is-empty messages]
      [logq-abort test-failed failed there were no errors]
      [when-not [eq [size expected-messages] [size messages]]
        [for-each message messages [log message]]
        [logq-abort test-failed failed expected [size expected-messages] messages but found [size messages]]]]
    [for i 0 [size messages]
      [let-do [expected-message [form-to-list [at expected-messages i]]
               message [getq [at messages i] message]]
        [assert [eq-list-of-forms expected-message message] test-failed failed expected message [identity expected-message] but found [identity message]]]]
    [assert [eq-form present-type expected-type] test-ok failed expected type [identity expected-type] but found [identity present-type]]
    [inc-atom tests-run-atom]]]

[defexpr test-errors [expected-type expected-messages .. forms]
  [test-errors-fn expected-type [form-to-list expected-messages] forms]]

[comment variable]
[test-errors [type-scheme [a] a] [[not found]] [do not-found]]

[comment i32]
[test-ok i32 [i32 42]]

[comment word]
[test-ok word [word a]]

[comment quote]
[test-ok form [quote a]]
[test-ok form [quote []]]
[test-ok form [quote [[]]]]
[test-ok form [quote [a []]]]

[comment if]
[test-errors i32 [[not unifiable - different types]] [if [quote ok] [i32 5] [i32 5]]]
[test-errors i32 [[not unifiable - different types]] [if [i32 5] [i32 5] [quote a]]]
[test-errors form [[not unifiable - different types]] [if [i32 5] [quote a] [i32 5]]]
[test-ok i32 [if [i32 5] [i32 6] [i32 7]]]
[test-ok i32 [quote a] [if [i32 5] [i32 6] [i32 7]]]
[test-ok form [if [i32 5] [quote a] [quote b]]]

[comment do]
[test-ok [tuple] [do]]
[test-errors [type-scheme [a] a] [[not found]] [do v]]
[test-errors [tuple] [[not found]] [do v [do]]]
[test-errors [type-scheme [a] a] [[not found]] [do [do] v]]
[test-ok form [do [quote a]]]
[test-ok i32 [do [quote a] [i32 3]]]

[comment let]
[test-errors [tuple] [[expects two arguments]] [let []]]
[test-ok form [let [] [quote a]]]
[test-ok form [let [v [quote a]] v]]
[test-ok form [let [v [quote a] u v] u]]

[comment func]
[comment function parameters cannot be polymorphically instantiated]
[test-errors [type-scheme [a] [func [[func [i32] a]] a]] [[not unifiable  - different types]]
  [func f [i]
    [do
      [i [i32 5]]
      [i [quote a]]]]]
[test-ok [type-scheme [a] [func [[func [i32] a]] a]]
  [func f [i]
    [i [i32 5]]]]
[test-ok
  [type-scheme [a] [func [.. a] [list a]]]
  [func list [.. entries] entries]]
[test-ok
  [type-scheme [a b] [func [a b] i32]]
  [func f [x y] [i32 5]]]
[test-ok
  [type-scheme [a] [func [] a]]
  [func diverge [] [diverge]]]
[test-ok
  [func [i32] i32]
  [func f [p]
    [if p
      [i32 2]
      [f [i32 1]]]]]
[test-ok
  [type-scheme [a] [func [.. a] i32]]
  [func f [.. p] [i32 0]]]
[test-ok
  [type-scheme [a] [list a]]
  [[func f [.. p] p]]]
[test-ok
  [list i32]
  [[func f [.. p] p] [i32 5]]]
[test-ok
  [list i32]
  [[func f [.. p] p] [i32 5] [i32 6]]]
[test-errors
  [list i32]
  [[not unifiable - different types]]
  [[func f [.. p] p] [i32 5] [quote a]]]
[test-ok
  [type-scheme [a] [func [a] a]]
  [func id [x] x]]
[test-ok
  [func [i32] i32]
  [if [i32 5]
    [func id-i32 [x] [if x x x]]
    [func id [x] x]]]
[test-errors
  [func [form] i32]
  [[not unifiable - different types]]
  [macro mac-i32 [x] [i32 5]]]
[test-ok
  [func [form] form]
  [macro mac-id [x] x]]
[test-ok
  [func [form] form]
  [fexpr fexpr-id [x] x]]
[test-ok
  [func [form] i32]
  [fexpr fexpr-i32 [x] [i32 5]]]

[comment call]
[test-errors i32 [[not unifiable - different number of parameters]]
  [[func one-param [p] [i32 5]]]]
[test-errors i32 [[not unifiable - different number of parameters]]
  [[func zero-params [] [i32 5]] [quote extra-argument]]]
[test-ok form
  [[func f [i] [i [quote a]]] [func id [x] x]]]
[test-ok form [let [id [func id [x] x]] [do [id [i32 5]] [id [quote a]]]]]
[test-errors [type-scheme [a] a] [[not unifiable - different types]]
  [[i32 5] [i32 6]]]

[comment def]
[test-errors [type-scheme [a] a] [[not found]] [def a a]]
[test-errors [type-scheme [a] a] [[not found]] [def a [do a]]]
[test-errors [type-scheme [a] a] [[not found]] [def a [[func id [x] x] a]]]
[test-ok
  form
  [def d [quote a]]]
[test-ok
  form
  [def d [quote a]]
  d]
[test-ok
  i32
  [def f [func id [x] x]]
  [f [i32 5]]
  [f [i32 6]]]
[test-ok
  form
  [def f [func id [x] x]]
  [f [i32 5]]
  [f [quote a]]]
[test-ok
  [list i32]
  [def list [func list [.. entries] entries]]
  [def test [list [i32 1] [i32 2]]]
  test]
[test-ok form
  [def d [quote a]]
  [def d [quote b]]]
[test-ok [type-scheme [a] [func [.. a] [list a]]]
  [def list [func list [.. entries] entries]]]

[comment extern]
[test-ok [type-scheme [a] a] [extern host size]]

[comment macro expansion]
[test-ok i32
  [def m [macro m [] [quote [i32 5]]]]
  [m]]

[comment type annotations]
[test-ok [func [word] form]
  [def form-word
    [type-anno
      [extern host form-word]
      [func [word] form]]]]
[test-ok i32
  [type-anno
    [extern host form-word]
    i32]]

[comment match]
[test-ok i32
  [type option []
    [union
      [none]]]
  [match [option/none] [option/none] [i32 5]]]

[def read-file [extern interpreter read-file]]

[defn test-ok-fn-stop-at-error [forms]
  [let-do
    [gctx [make-global-context]]
    [for-each form forms
      [evaluate [getq gctx eval-context] form]
      [check-top gctx form]
      [let [messages [getq gctx messages]]
        [when-not [is-empty messages]
          [logq form [identity form]]
          [for-each message messages
              [log message [meta [getq message form]]]]
          [logq-abort test-ok failed there were errors [identity form] [getq gctx messages]]]]]
    [inc-atom tests-run-atom]]]

[logq checking std.wuns]

[test-ok-fn-stop-at-error
  [read-file [word std.wuns]]]

[logq tests-run [atom-get tests-run-atom]]
