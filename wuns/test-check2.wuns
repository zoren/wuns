[load check2.wuns]

[type check-test []
  [union
    [ok form [list form]]
    [error form [list form] [list form]]]]

[defn make-check-test-ok [expected-type forms]
  [assert [not [is-empty forms]] make-check-test-error forms is empty]
  [check-test/ok expected-type forms]]

[defexpr test-ok [expected-type .. forms]
  [do
    [assert [not [is-empty forms]] make-check-test-error forms is empty]
    [make-check-test-ok
      expected-type
      forms]]]

[defn make-check-test-error [expected-type expected-messages forms]
  [assert [not [is-empty expected-messages]] make-check-test-error expected-messages is empty]
  [assert [not [is-empty forms]] make-check-test-error forms is empty]
  [check-test/error expected-type expected-messages forms]]

[defexpr test-errors [expected-type expected-messages-form .. forms]
  [let [expected-messages [form-to-list expected-messages-form]]
    [assert [not [is-empty expected-messages]] make-check-test-error expected-messages is empty]
    [assert [not [is-empty forms]] make-check-test-error forms is empty]
    [check-test/error
      expected-type
      expected-messages
      forms]]]

[todo record tests]

[def tests [list

[test-ok i32
  [type form []
    [union
      [word word]
      [list [list form]]]]

  [defn flist [.. elements] [form/list elements]]
  [defexpr quote [f] f]

  [defmacro def-extern [name type]
    [flist [quote import] [quote host] name type]]

  [def-extern abort [type-scheme [a] [func [] a]]]

  [defn test-generalization [c]
    [if c
      [abort]
      [word w]]
    [if c
      [abort]
      [i32 1]]]
    [test-generalization [i32 1]]
    ]

  [test-ok i32 [i32 5]]
  [test-ok f64 [f64 1.5]]
  [test-ok word [word a]]

  [test-ok i32 [intrinsic-call i32.add [i32 1] [i32 2]]]
  [test-ok f64 [intrinsic-call f64.add [f64 1] [f64 1]]]

  [test-errors i32 [[not unifiable - different types]] [if [word ok] [i32 5] [i32 5]]]
  [test-errors i32 [[not unifiable - different types]] [if [i32 5] [i32 5] [word a]]]
  [test-errors word [[not unifiable - different types]] [if [i32 5] [word a] [i32 5]]]
  [test-ok i32 [if [i32 5] [i32 6] [i32 7]]]
  [test-ok word [if [i32 5] [word a] [word b]]]

  [test-ok [tuple] [do]]
  [test-ok word [do [word a]]]
  [test-ok i32 [do [word a] [i32 3]]]

  [test-ok word [let [] [word a]]]
  [test-ok word [let [v [word a]] [word a]]]
  [test-ok word [let [v [word a]] v]]
  [test-ok word [let [v [word a] u v] u]]

  [test-ok
    word
    [def d [word a]]
    d]
  [test-ok i32
    [def d [i32 5]]
    [def d2 d]
    d2]
  [test-ok [func [[list form]] form]
    [type form []
      [union
        [word word]
        [list [list form]]]]
    form/list
    ]
  [test-ok form
    [type form []
      [union
        [word word]
        [list [list form]]]]
    [form/word [word a]]
    ]
  [test-ok form
    [type form []
      [union
        [word word]
        [list [list form]]]]
    [form/word [word a]]
    ]
  [test-errors [type-scheme [a] a] [[not unifiable - different types]]
    [[i32 5] [i32 6]]]

  [test-ok
    i32
    [def f [func id [x] x]]
    [do
      [f [i32 5]]
      [f [i32 6]]]]
  [test-ok
    word
    [def f [func id [x] x]]
    [do
      [f [i32 5]]
      [f [word a]]]]
  [test-ok [type-scheme [a] [func [[func [i32] a]] a]]
    [func f [i]
      [i [i32 5]]]]

  [test-ok
    [type-scheme [a b] [func [a b] i32]]
    [func f [x y] [i32 5]]]
  [test-ok
    [type-scheme [a] [func [] a]]
    [func diverge [] [diverge]]]
  [test-ok
    [func [i32] i32]
    [func f [p]
      [if p
        [i32 2]
        [f [i32 1]]]]]
  [test-ok
    [type-scheme [a] [func [a] a]]
    [func id [x] x]]
  [test-ok
    [func [i32] i32]
    [if [i32 5]
      [func id-i32 [x] [if x x x]]
      [func id [x] x]]]
  [test-ok
    [type-scheme [a] [func [.. a] i32]]
    [func f [.. p] [i32 0]]]
  [test-ok
    [type-scheme [a] [list a]]
    [[func f [.. p] p]]]
  [test-ok
    [list i32]
    [[func f [.. p] p] [i32 5]]]
  [test-ok
    [list i32]
    [[func f [.. p] p] [i32 5] [i32 6]]]
  [test-errors
    [list i32]
    [[not unifiable - different types]]
    [[func f [.. p] p] [i32 5] [word a]]]

  [test-errors i32 [[not unifiable - different types]]
    [defmacro qword [m]
      [i32 0]]
    [i32 0]]

[test-errors word [[not unifiable - different types]]
  [type option [a] [union [none] [some a]]]
  [type result [o e] [union [ok o] [error e]]]
  [match [option/none]
    [result/ok v] v
    [word a]]]
[test-errors i32 [[not unifiable - different types]]
  [type option [a] [union [none] [some a]]]
  [match [option/some [i32 5]]
    [option/some v] v
    [option/some v] [word a]
    ]]

[test-errors i32 [[not unifiable - different types]]
  [type option [a] [union [none] [some a]]]
  [match [option/none]
    [option/none] [i32 5]
    [word a]]]
[test-ok i32
  [type option [a] [union [none] [some a]]]
  [match [option/none] [option/none] [i32 5]]]

[test-errors word [[not unifiable - different types]]
  [switch [i32 0]
    [[i32 0]] [word zero]
    [[word a]] [word one]
    [word not-01]]]
[test-errors word [[not unifiable - different types]]
  [switch [i32 0]
      [[i32 0] [word a]]
      [word zero-a]
    [word not-01]]]
[test-errors word [[not unifiable - different types]]
  [switch [i32 0]
    [[i32 0]] [word zero]
    [[i32 1]] [word one]
    [i32 1337]]]
[test-ok word
  [switch [i32 0]
    [[i32 0] [i32 1]] [word zero-or-one]
    [word not-01]]]
[test-ok word
  [switch [i32 0]
    [[i32 0]] [word zero]
    [[i32 1]] [word one]
    [word not-01]]]

[test-ok i32
  [letfn
    [[func bla [n] [i32 5]]
     [func m [] [bla [i32 5]] [bla [f64 5]]]]
    [i32 4]]]

]]

[defn check-top-and-exp-forms [forms]
  [assert [not [is-empty forms]] check-top-and-exp-forms expects at least one form]
  [let
    [converter [mk-form-to-ast]
     f2e [form-to-ast-converter/form-to-exp converter]
     f2t [form-to-ast-converter/form-to-top-async converter]
     gctx [make-global-context-from-syntax-info [form-to-ast-converter/syntax-info converter]]
     ch [make-checker gctx]
     check-top [checker/check-top ch]
     check-exp [checker/check-exp ch]
     btops-promise [promises-seq [slice forms 0 [dec [size forms]]] f2t]]
    [promise-then btops-promise
      [func then [btops]
        [let [last-bexp [f2e [last forms]]
              bind-errors [clone-growable-to-frozen-list [form-to-ast-converter/errors converter]]]
          [when-not [is-empty bind-errors]
            [logq unexpected bind errors]
            [for-each error bind-errors
              [log [report-message/message error]]
              [log [try-get-syntax-node [report-message/form error]]]]
            [for-each error bind-errors [log error]]
            [logq-abort bind-errors]]
          [for-each btop btops [check-top btop]]
          [pair
            [normalize-present-type-scheme [check-exp last-bexp]]
            [clone-growable-to-frozen-list [check-context/messages gctx]]]]]]]]

[defn run-tests-check2 [tests]
  [let
    [tests-run-atom [atom 0]
     run-test
     [func run-test [test]
      [match test
        [check-test/ok expected-type forms]
        [promise-then
          [check-top-and-exp-forms forms]
          [func then [res]
            [let [actual-type [pair/fst res]
                  check-errors [pair/snd res]]
              [when-not [is-empty check-errors]
                [logq test-ok there were errors]
                [for-each message check-errors
                  [log-check-message message]]
                [logq-abort test-ok failed there were errors]]
              [assert [eq-form actual-type expected-type] test-ok failed expected type [identity expected-type] but found [identity actual-type]]
              [inc-atom tests-run-atom]]]]

        [check-test/error expected-type expected-errors forms]
        [promise-then
          [check-top-and-exp-forms forms]
          [func then [res]
            [let [actual-type [pair/fst res]
              errors [pair/snd res]]
            [when-not [eq [size expected-errors] [size errors]]
              [log-location [first forms]]
              [logq different number of errors than expected]
              [logq expected]
              [for-each error expected-errors [log error]]
              [logq actual]
              [for-each error errors [log-check-message error]]
              [logq-abort test-error ]]

            [when-not [eq-form actual-type expected-type]
              [logq test-error failed]
              [log forms]
              [logq expected type]
              [log expected-type]
              [logq but found]
              [log actual-type]]
            [inc-atom tests-run-atom]]]]]]]
    [promise-then
      [promises-seq tests run-test]
      [func then [f]
        [logq tests-run [atom-get tests-run-atom]]]]]]

[defn run-test-suite []
  [run-tests-check2 tests]]
