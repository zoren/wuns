[load translate.wuns]

[defexpr qlist [.. fs] fs]

[defn make-init-evaluator-async []
  [let [evaluator [make-evaluator]]
    [promise-then
      [evaluate-top-async evaluator [quote [load llmacro.wuns]]]
      [func t [-] evaluator]]]]

[import ./runtime-lib/wabt.js wat-to-wasm-byte-array [func [byte-array] byte-array]]

[type wasm-module [] [union]]

[import ./runtime-lib/wasm.js byte-array-to-wasm-module [func [byte-array] wasm-module]]

[defn forms-to-output [forms]
  [promise-then
    [make-init-evaluator-async]
    [func then [evaluator]
      [let
        [gerrors [growable-list]
         top-names [transient-kv-map]
         binder-compiler [bind evaluator gerrors top-names]
         top-form-to-top-exp [pair/fst binder-compiler]
         compile-tops [pair/snd binder-compiler]
         top-forms [growable-list]]
        [for-each form forms
          [if-let [top [top-form-to-top-exp form]]
            [push top-forms top]
            [logq-abort no top form for [identity form]]]]
        [let [tops [clone-growable-to-frozen-list top-forms]
              output [compile-tops tops]
              errors [clone-growable-to-frozen-list gerrors]]
          [when-not [is-empty errors]
            [logq there were errors]
            [log errors]
            [for-each e errors
              [logq error [identity e]]]
            [logq-abort errors]]
          [comment [for-each top-form tops [log top-form]]]
          output]]]]]

[defn output-to-module [output]
  [let [wat-string [wat-to-wat-bytes [output-to-wat output]]]
    [byte-array-log-as-string wat-string]
    [byte-array-to-wasm-module [wat-to-wasm-byte-array wat-string]]]]

[defn test []
  [promise-then
    [read-parse-file-async [word prog1.wuns]]
    [func t [forms]
      [promise-then
        [forms-to-output forms]
        output-to-module]]]]

[type wasm-instance [] [union]]

[import ./runtime-lib/wasm.js wasm-instantiate [func [wasm-module [object js-value]] wasm-instance]]

[import ./runtime-lib/wasm.js memory [func [i32 i32 i32] js-value]]

[import ./runtime-lib/wasm.js wasm-get-export-object [func [wasm-instance] [object js-value]]]

[def empty-object [kv-map-to-object [transient-kv-map]]]

[defn get-export [wasm-inst export-name]
  [get [object-to-kv-map [wasm-get-export-object wasm-inst]] export-name]]

[defn test1 []
  [let [forms
        [qlist
          [defn f [x i32] i32 [intrinsic i32.add x [i32 1]]]

          [export f]]]
    [promise-then
      [promise-then
        [forms-to-output forms]
        output-to-module]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              f [get-export inst [word f]]
              actual [js-apply f [list [to-js-value [i32 1]]]]
              js-expected [to-js-value [i32 2]]]
          [when-not [is-identical js-expected actual]
            [logq test failed]
            [log js-expected]
            [log actual]]]]]]]

[defn test-tuple []
  [let [forms
        [qlist
          [memory mem i32 1]

          [def tup1 [data mem [tuple [f64 1.1] [i32 2]]]]
          [def tup2 [data mem [tuple [f64 9.3] [i32 -9]]]]

          [defn get-x [t [pointer mem [tuple f64 i32]]] f64
            [deref [index t [i32 0]]]]

          [defn get-y [t [pointer mem [tuple f64 i32]]] i32
            [deref [index t [i32 1]]]]

          [export tup1 tup2 get-x get-y]]]
    [promise-then
      [promise-then
        [forms-to-output forms]
        output-to-module]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              tup1 [get-export inst [word tup1]]
              tup2 [get-export inst [word tup2]]
              get-x [get-export inst [word get-x]]
              get-y [get-export inst [word get-y]]
              test-assert [func ta [expected fn arg]
                [let [actual [js-apply fn [list [to-js-value arg]]]
                      js-expected [to-js-value expected]]
                [when-not [is-identical js-expected actual]
                  [logq test failed]
                  [log js-expected]
                  [log actual]]
                ]
              ]
              ]
          [test-assert [f64 1.1] get-x tup1]
          [test-assert [i32 2] get-y tup1]

          [test-assert [f64 9.3] get-x tup2]
          [test-assert [i32 -9] get-y tup2]
          ]]]]]


[defn test-data-exp []
  [let [forms
        [qlist
          [memory mem i32 1]

          [def pptup [data mem [data mem [tuple [f64 1.1] [i32 2]]]]]

          [defn get-pointed [t [pointer mem [pointer mem [tuple f64 i32]]]] [pointer mem [tuple f64 i32]]
            [deref t]]

          [defn get-x [t [pointer mem [tuple f64 i32]]] f64
            [deref [index t [i32 0]]]]

          [defn get-y [t [pointer mem [tuple f64 i32]]] i32
            [deref [index t [i32 1]]]]

          [export pptup get-pointed get-x get-y]]]
    [promise-then
      [promise-then
        [forms-to-output forms]
        output-to-module]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              pptup [get-export inst [word pptup]]
              get-pointed [get-export inst [word get-pointed]]
              get-x [get-export inst [word get-x]]
              get-y [get-export inst [word get-y]]
              ptup [js-apply get-pointed [list [to-js-value pptup]]]
              test-assert
              [func ta [expected fn arg]
                [let [actual [js-apply fn [list [to-js-value arg]]]
                      js-expected [to-js-value expected]]
                  [when-not [is-identical js-expected actual]
                    [logq test failed]
                    [log js-expected]
                    [log actual]]]]]
          [test-assert [f64 1.1] get-x ptup]
          [test-assert [i32 2] get-y ptup]
          ]]]]]


[comment
  [bind-forms [def mem [import env mem [memory i32 1]]]]
  ]
