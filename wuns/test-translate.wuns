[load translate.wuns]

[defexpr qlist [.. fs] fs]

[defn make-init-evaluator-async []
  [let [evaluator [make-evaluator]]
    [promise-then
      [evaluate-top-async evaluator [quote [load llmacro.wuns]]]
      [func t [-] evaluator]]]]

[import ./runtime-lib/wabt.js wat-to-wasm-byte-array [func [byte-array] byte-array]]

[type wasm-module [] [union]]

[import ./runtime-lib/wasm.js byte-array-to-wasm-module [func [byte-array] wasm-module]]

[import ./runtime-lib/wasm.js memory-buffer [func [memory] array-buffer]]

[defn forms-to-output-async [forms]
  [promise-then
    [make-init-evaluator-async]
    [func then [evaluator]
      [[make-forms-to-output evaluator] forms]]]]

[defn output-to-module [output]
  [let [wat-string [wat-to-wat-bytes [output-to-wat output]]]
    [byte-array-log-as-string wat-string]
    [byte-array-to-wasm-module [wat-to-wasm-byte-array wat-string]]]]

[defn forms-to-module-async [forms]
  [promise-then
    [forms-to-output-async forms]
    output-to-module]]

[defn file-to-module-async [file-name]
  [promise-then
    [read-parse-file-async file-name]
    forms-to-module-async]]

[defn test-prog1 []
  [promise-then
    [file-to-module-async [word prog1.wuns]]
    [func t [module] [do]]]]

[type wasm-instance [] [union]]

[import ./runtime-lib/wasm.js wasm-instantiate [func [wasm-module [object js-value]] wasm-instance]]

[import ./runtime-lib/wasm.js memory [func [i32 i32 i32] js-value]]

[import ./runtime-lib/wasm.js wasm-get-export-object [func [wasm-instance] [object js-value]]]

[def empty-object [kv-map-to-object [transient-kv-map]]]

[defn get-export [wasm-inst export-name]
  [get [object-to-kv-map [wasm-get-export-object wasm-inst]] export-name]]

[defmacro js-app [fn .. args]
  [flist [quote js-apply] fn
    [form-concat
      [list [quote list]]
      [list-map arg args [flist [quote to-js-value] arg]]]]]

[defn test1 []
  [let [forms
        [qlist
          [defn f [x [i32]] [i32] [intrinsic i32.add x [i32 1]]]

          [export f]]]
    [promise-then
      [forms-to-module-async forms]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              f [get-export inst [word f]]
              actual [js-app f [i32 1]]
              js-expected [to-js-value [i32 2]]]
          [when-not [is-identical js-expected actual]
            [logq test failed]
            [log js-expected]
            [log actual]]]]]]]

[defn test-tuple []
  [let [forms
        [qlist
          [memory mem [i32] 1]

          [def tup1 [data mem [tuple [f64 1.1] [i32 2]]]]
          [def tup2 [data mem [tuple [f64 9.3] [i32 -9]]]]

          [defn get-x [t [pointer [exp mem] [tuple [f64] [i32]]]] [f64]
            [deref [index t [i32 0]]]]

          [defn get-y [t [pointer [exp mem] [tuple [f64] [i32]]]] [i32]
            [deref [index t [i32 1]]]]

          [export tup1 tup2 get-x get-y]]]
    [promise-then
      [forms-to-module-async forms]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              tup1 [get-export inst [word tup1]]
              tup2 [get-export inst [word tup2]]
              get-x [get-export inst [word get-x]]
              get-y [get-export inst [word get-y]]
              test-assert [func ta [expected fn arg]
                [let [actual [js-app fn arg]
                      js-expected [to-js-value expected]]
                [when-not [is-identical js-expected actual]
                  [logq test failed]
                  [log js-expected]
                  [log actual]]
                ]
              ]
              ]
          [test-assert [f64 1.1] get-x tup1]
          [test-assert [i32 2] get-y tup1]

          [test-assert [f64 9.3] get-x tup2]
          [test-assert [i32 -9] get-y tup2]
          ]]]]]

[defn test-assert-eq [js-expected actual]
  [when-not [is-identical [to-js-value js-expected] [to-js-value actual]]
    [logq test-assert-eq failed]
    [logq expected [identity js-expected]]
    [logq but got- [identity actual]]]]

[defn test-assert-not-eq [js-expected actual]
  [when [is-identical [to-js-value js-expected] [to-js-value actual]]
    [logq test-assert-not-eq failed]
    [logq expected different from [identity js-expected]]
    [logq but got- [identity actual]]]]

[defn test-tuple-return []
  [let [forms
        [qlist
          [defn get-empty-tuple [] [tuple] [tuple]]
          [defn get-2tuple [] [tuple [f64] [i32]] [tuple [f64 1.1] [i32 2]]]
          [export get-empty-tuple get-2tuple]]]
    [promise-then
      [forms-to-module-async forms]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              get-empty-tuple [get-export inst [word get-empty-tuple]]
              get-2tuple [get-export inst [word get-2tuple]]]
          [test-assert-eq true [is-undefined [js-app get-empty-tuple]]]
          [let [tup [js-app get-2tuple]
                ar [js-value-to-array tup]]
            [test-assert-eq 2 [size ar]]
            [test-assert-eq [f64 1.1] [at ar [i32 0]]]
            [test-assert-eq [i32 2] [at ar [i32 1]]]]]]]]]

[defn test-data-exp []
  [let [forms
        [qlist
          [memory mem [i32] 1]

          [def pptup [data mem [data mem [tuple [f64 1.1] [i32 2]]]]]

          [defn get-pointed [t [pointer [exp mem] [pointer [exp mem] [tuple [f64] [i32]]]]] [pointer [exp mem] [tuple [f64] [i32]]]
            [deref t]]

          [defn get-x [t [pointer [exp mem] [tuple [f64] [i32]]]] [f64]
            [deref [index t [i32 0]]]]

          [defn get-y [t [pointer [exp mem] [tuple [f64] [i32]]]] [i32]
            [deref [index t [i32 1]]]]

          [export pptup get-pointed get-x get-y]]]
    [promise-then
      [forms-to-module-async forms]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              pptup [get-export inst [word pptup]]
              get-pointed [get-export inst [word get-pointed]]
              get-x [get-export inst [word get-x]]
              get-y [get-export inst [word get-y]]
              ptup [js-app get-pointed pptup]
              test-assert
              [func ta [expected fn arg]
                [let [actual [js-app fn arg]
                      js-expected [to-js-value expected]]
                  [when-not [is-identical js-expected actual]
                    [logq test failed]
                    [log js-expected]
                    [log actual]]]]]
          [test-assert [f64 1.1] get-x ptup]
          [test-assert [i32 2] get-y ptup]
          ]]]]]

[defn test-mutable []
  [let [forms
        [qlist
          [mutable x [i32 1336]]

          [defn get-x [] [i32]
            x]

          [defn set-x [v [i32]] [tuple]
            [assign-mutable x v]]

          [export get-x]]]
    [promise-then
      [forms-to-module-async forms]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              get-x [get-export inst [word get-x]]
              test-assert
              [func ta [expected fn arg]
                [let [actual [js-app fn arg]
                      js-expected [to-js-value expected]]
                  [when-not [is-identical js-expected actual]
                    [logq test failed]
                    [log js-expected]
                    [log actual]]]]]
          [test-assert [i32 1336] get-x 0]
          ]]]]]

[defn test-record []
  [let [forms
        [qlist
          [memory mem [i32] 1]

          [def tup1 [data mem [record f [f64 1.1] i [i32 2]]]]
          [def tup2 [data mem [record f [f64 9.3] i [i32 -9]]]]

          [defn get-f [t [pointer [exp mem] [record [f [f64]] [i [i32]]]]] [f64]
            [deref [field t f]]]

          [defn get-i [t [pointer [exp mem] [record [f [f64]] [i [i32]]]]] [i32]
            [deref [field t i]]]

          [export tup1 tup2 get-f get-i]]]
    [promise-then
      [forms-to-module-async forms]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              tup1 [get-export inst [word tup1]]
              tup2 [get-export inst [word tup2]]
              get-f [get-export inst [word get-f]]
              get-i [get-export inst [word get-i]]
              test-assert [func ta [expected fn arg]
                [let [actual [js-app fn arg]
                      js-expected [to-js-value expected]]
                [when-not [is-identical js-expected actual]
                  [logq test failed]
                  [log js-expected]
                  [log actual]]]]]
          [test-assert [f64 1.1] get-f tup1]
          [test-assert [i32 2] get-i tup1]

          [test-assert [f64 9.3] get-f tup2]
          [test-assert [i32 -9] get-i tup2]
          ]]]]]

[defn test-record-vector []
  [let [forms
        [qlist
          [memory mem [i32] 1]

          [def parray [data mem [record size [i32 3] array [array [i32] [i32 2] [i32 3] [i32 5]]]]]

          [defn size [pvec [pointer [exp mem] [record [size [i32]] [array [array [i32]]]]]] [i32]
            [deref [field pvec size]]]

          [defn get-array-i32 [pvec [pointer [exp mem] [record [size [i32]] [array [array [i32]]]]] i [i32]] [i32]
            [when [lt-s i [i32 0]] [intrinsic unreachable]]
            [when-not [lt-s i [size pvec]] [intrinsic unreachable]]
            [deref [index [field pvec array] i]]]

          [defn set-array-i32 [pvec [pointer [exp mem] [record [size [i32]] [array [array [i32]]]]] i [i32] v [i32]] [tuple]
            [assign [index [field pvec array] i] v]]

          [export parray size get-array-i32 set-array-i32]]]
    [promise-then
      [forms-to-module-async forms]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              parray [get-export inst [word parray]]
              wsize [get-export inst [word size]]
              get-array-i32 [get-export inst [word get-array-i32]]
              set-array-i32 [get-export inst [word set-array-i32]]
              ]

          [test-assert-eq [i32 2] [js-app get-array-i32 parray 0]]
          [test-assert-eq [i32 3] [js-app get-array-i32 parray 1]]
          [test-assert-eq [i32 5] [js-app get-array-i32 parray 2]]

          [test-assert-eq [i32 3] [js-app wsize parray]]

          [test-assert-eq [word unreachable]
            [object-get [js-apply-error get-array-i32 [list [to-js-value parray] [to-js-value [i32 -1]]]] [word message]]]
          [test-assert-eq [word unreachable]
            [object-get [js-apply-error get-array-i32 [list [to-js-value parray] [to-js-value 3]]] [word message]]]
          ]]]]]

[defn test-custom-type []
  [let [forms
        [qlist
[memory mem [i32] 1]

[type vector-data [a datatype size [exp [i32]]]
  [record
    [size [i32]]
    [array [array a size]]]]

[type pvector [v datatype]
  [pointer [exp mem] [vector-data v -size]]]

[type growable-vector [a datatype]
  [record
    [size [i32]]
    [capacity [i32]]
    [parray [pointer [exp mem] [array a]]]]]

          ]]
    [promise-then
      [forms-to-module-async forms]
      [func then [module]
        [let [inst [wasm-instantiate module empty-object]
              ]

          ]]]]]

[defn test-all []
  [let [tests
    [list
      test1
      test-tuple
      test-tuple-return
      test-data-exp
      test-mutable
      test-record
      test-record-vector
      test-prog1
]]
    [[func go [i]
      [if [lt-s i [size tests]]
        [promise-bind
          [[at tests i]]
          [func t [x]
            [go [inc i]]]]
          [promise-resolve [i32 99]]]] [i32 0]]]]

[defn test-parse []
  [promise-then
    [file-to-module-async [word llparse.wuns]]
    [func t [module]
      [let [inst [wasm-instantiate module empty-object]
            mem [get-export inst [word mem]]
            mem-buf [memory-buffer mem]
            parse [get-export inst [word parse]]
            vector-size [get-export inst [word vector-size]]
            vector-data [get-export inst [word vector-data]]
            byte-array-alloc [get-export inst [word byte-array-alloc]]
            form-tag [get-export inst [word form-tag]]
            form-word-is [get-export inst [word form-word-is]]
            form-word-get [get-export inst [word form-word-get]]
            form-list-is [get-export inst [word form-list-is]]
            form-list-get [get-export inst [word form-list-get]]
            get-byte [get-export inst [word get-byte]]]
        [let [empty-vec [js-app byte-array-alloc [i32 0]]]
          [test-assert-eq [i32 16] empty-vec]
          [test-assert-eq [i32 0] [js-app vector-size empty-vec]]
          [test-assert-eq [i32 0] [js-app parse empty-vec]]]
        [let [a-vec [js-app byte-array-alloc [i32 1]]
              asize [js-app vector-size a-vec]
              adata [js-app vector-data a-vec]
              ar-buf [byte-array-from-array-buffer mem-buf adata asize]]
          [byte-array-set ar-buf [i32 0] [i32 97]]
          [test-assert-eq [i32 97] [js-app get-byte a-vec [i32 0]]]
          [let [form [js-app parse a-vec]
                tag [js-app form-tag form]]
            [test-assert-not-eq [i32 0] form]
            [test-assert-eq [i32 10] tag]
            [test-assert-eq [i32 1] [js-app form-word-is form]]
            [test-assert-eq [i32 0] [js-app form-list-is form]]
            [let [fw [js-app form-word-get form]]
              [test-assert-eq [i32 1] [js-app vector-size fw]]
              [test-assert-eq [i32 97] [js-app get-byte fw [i32 0]]]]]]]]]]
