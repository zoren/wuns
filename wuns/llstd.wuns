[load std.wuns]

[def lltype-params [transient-kv-map]]

[type literal-type []
  [union
    [i32 form]]]

[type lltype []
  [union
    [var word]
    [inst word [list lltype]]
    [literal literal-type]
    [func [list lltype] [option lltype] lltype]]]

[defn instantiate-lltype [type-var-env type-form]
  [match type-form
    [lltype/var v]
    [get type-var-env v]

    [lltype/inst name args]
    [lltype/inst name [list-map arg args [instantiate-lltype type-var-env arg]]]

    [lltype/literal t v]
    type-form

    [lltype/func params opt-rest-param ret]
    [lltype/func
      [list-map p params [instantiate-lltype type-var-env p]]
      [match opt-rest-param
        [option/none] opt-rest-param
        [option/some p] [option/some [instantiate-lltype type-var-env p]]]
      [instantiate-lltype type-var-env ret]]]]

[type lltype-parameters []
  [record
    [parameter-set [set word]]
    [parameter-list [list word]]]]

[defn validate-lltype [type-var-env type-form]
  [match type-form
    [form/word w]
    [if [set-has type-var-env w]
      [lltype/var w]
      [validate-lltype type-var-env [flist type-form]]]

    [form/list l]
    [do
      [assert [size l] not empty]
      [let [type-name [form-to-word [first l]]
            type-args [slice l 1 [size l]]]
        [switch type-name
          [[word i8] [word i16] [word i32] [word f64] [word any]]
          [do
            [when-not [is-empty type-args]
              [log type-args]
              [logq-abort invalid number of arguments]]
            [assert [eq [size type-args] 0] validate-lltype invalid number of arguments]
            [lltype/inst type-name [list]]]

          [[word pointer]]
          [do
            [assert [eq [size type-args] 1] validate-lltype invalid number of arguments pointer]
            [lltype/inst type-name [list [validate-lltype type-var-env [first type-args]]]]]

          [[word literal]]
          [do
            [assert [eq [size type-args] 2] validate-lltype invalid number of arguments literal]
            [lltype/literal
              [switch [form-to-word [first type-args]]
                [[word i32]] [literal-type/i32 [second type-args]]
                [logq-abort invalid literal type]]]]

          [[word array]]
          [let [element-type-form [first type-args]
                size-form [second type-args]
                size-type [validate-lltype type-var-env size-form]]
            [match size-type
              [lltype/var tv] [do]
              [lltype/literal lt]
              [match lt
                [literal-type/i32 i] [assert [not [is-negative i]] validate-lltype invalid array size]]
              [lltype/inst type-name args]
              [assert [eq type-name [word i32]] validate-lltype invalid array size type]
              [logq-abort invalid size type]]
            [lltype/inst type-name
              [list
                [validate-lltype type-var-env element-type-form]
                size-type]]]

          [let [type-var-env [get lltype-params type-name]
                type-params [lltype-parameters/parameter-set type-var-env]]
            [assert [eq [size [lltype-parameters/parameter-list type-var-env]] [size type-args]] ll invalid number of arguments4]
            [lltype/inst type-name
              [list-map targ type-args [validate-lltype type-params targ]]]]]]]]]

[type lltype-decl-kind []
  [union
    [record [list [pair word lltype]]]
    [tagged-union [list [pair word [list lltype]]]]
    [untagged-union [list [list lltype]]]]]

[def lltypes [transient-kv-map]]

[defexpr lltypexpr [.. t]
  [assert [eq [i32.rem-s [size t] 3] 0] lltype invalid number of arguments not multiple of 3]
  [for-3 i 0 [size t]
    [let
      [type-name [form-to-word [at t i]]
       type-params [list-map p [form-to-list [at t [inc i]]] [form-to-word p]]
       type-var-env [set]]
      [when [has lltype-params type-name]
        [log type-name]
        [log lltype-params]
        [logq-abort ll type already defined]]
      [assert [not [has lltype-params type-name]] ll type already defined]
      [for-each p type-params
        [assert [not [set-has type-var-env p]] ll duplicate type parameter]
        [set-add type-var-env p]]
      [set-kv-map lltype-params type-name [lltype-parameters type-var-env type-params]]]]
  [for-3 i 0 [size t]
    [let
      [type-name [form-to-word [at t i]]
       type-var-env [lltype-parameters/parameter-set [get lltype-params type-name]]
       type-body [form-to-list [at t [add i 2]]]
       type-kind [form-to-word [first type-body]]
       type-kind-args [rest type-body]]
      [assert [size type-body] body empty]
      [set-kv-map lltypes type-name
        [switch type-kind
          [[word record]]
          [let [field-name-set [set]]
            [lltype-decl-kind/record
              [list-map field-form type-kind-args
                [let [field [form-to-list field-form]]
                  [assert [eq [size field] 2] ll invalid field]
                  [let [field-name [form-to-word [at field 0]]
                        field-type-form [at field 1]]
                    [assert [not [set-has field-name-set field-name]] ll field name already defined]
                    [set-add field-name-set field-name]
                    [pair field-name [validate-lltype type-var-env field-type-form]]]]]]]

          [[word tagged-union]]
          [let [ctor-name-set [set]]
            [lltype-decl-kind/tagged-union
              [list-map ctor-form type-kind-args
                [let [ctor-list [form-to-list ctor-form]]
                  [assert [not [is-empty ctor-list]] ll invalid ctor-list]
                  [let [ctor-name [form-to-word [first ctor-list]]]
                    [assert [not [set-has ctor-name-set ctor-name]] ll ctor-list name already defined]
                    [set-add ctor-name-set ctor-name]
                    [pair ctor-name
                      [list-map tp [rest ctor-list]
                        [validate-lltype type-var-env tp]]]]]]]]

          [[word untagged-union]]
          [lltype-decl-kind/untagged-union
            [list-map tp type-kind-args [validate-lltype type-var-env tp]]]

          [logq-abort unknown lltype kind]]]]]]

[defn llsize-of [t]
  [match t
    [lltype/var -] [logq-abort llsize-of var]
    [lltype/inst name args]
    [switch name
      [[word i8] [word u8]] 1
      [[word i16] [word u16]] 2
      [[word i32] [word u32]] 4
      [[word i64] [word f64]] 8
      [[word pointer]] 4

      [[word array]]
      [let [element-type [first args]
            size-type [second args]]
        [match size-type
          [lltype/literal lt]
          [match lt
            [literal-type/i32 e] [mul [llsize-of element-type] e]
            [logq-abort llsize-of invalid array size type]]

          [do
            [log size-type]
            [logq-abort llsize-of invalid array size]]]]

      [let
        [type-params [get lltype-params name]
         type-params-list [lltype-parameters/parameter-list type-params]
         new-tv-env [transient-kv-map]]
        [for i 0 [size args]
          [set-kv-map new-tv-env [at type-params-list i] [at args i]]]
        [match [get lltypes name]
          [lltype-decl-kind/record fields]
          [loop [i 0 csize 0]
            [if-not [lt-s i [size fields]]
              csize
              [continue
                csize [add csize [llsize-of [instantiate-lltype new-tv-env [pair/snd [at fields i]]]]]
                i [inc i]]]]

          [lltype-decl-kind/tagged-union ctors]
          [loop [j 0 max-size 0]
            [if-not [lt-s j [size ctors]]
              max-size
              [let
                [ctor [at ctors j]
                params [pair/snd ctor]
                total-size
                  [loop [i 0 acc-size 0]
                    [if-not [lt-s i [size params]]
                      acc-size
                      [continue
                        acc-size [add acc-size [llsize-of [instantiate-lltype new-tv-env [at params i]]]]
                        i [inc i]]]]]
                [continue
                  j [inc j]
                  max-size [max max-size total-size]]]]]

          [lltype-decl-kind/untagged-union types]
          [loop [i 0 max-size 0]
            [if-not [lt-s i [size types]]
              max-size
              [let
                [type [at types i]
                 tsize [llsize-of [instantiate-lltype new-tv-env type]]]
                [continue
                  i [inc i]
                  max-size [max max-size tsize]]]]]]]]
    [lltype/literal lt]
    [match lt
      [literal-type/i32 i] 4
      [logq-abort llsize-of invalid literal type]]
    [lltype/func params opt-rest-param ret] [logq-abort llsize-of func]]]

[defn lltype-to-size-of-form [t]
  [match t
    [lltype/var -] [logq-abort llsize-of var]
    [lltype/inst name args]
    [switch name
      [[word i8] [word u8]] [quote [i32 1]]
      [[word i16] [word u16]] [quote [i32 2]]
      [[word i32] [word u32]] [quote [i32 4]]
      [[word i64] [word f64]] [quote [i32 8]]
      [[word pointer]] [quote [i32 4]]

      [[word array]]
      [let [element-type [first args]
            size-type [second args]]
        [match size-type
          [lltype/literal lt]
          [match lt
            [literal-type/i32 f] [flist [quote intrinsic] [quote i32.mul] [lltype-to-size-of-form element-type] f]
            [logq-abort llsize-of invalid array size type]]

          [do
            [log size-type]
            [logq-abort llsize-of invalid array size]]]]

      [let
        [type-params [get lltype-params name]
         type-params-list [lltype-parameters/parameter-list type-params]
         new-tv-env [transient-kv-map]]
        [for i 0 [size args]
          [set-kv-map new-tv-env [at type-params-list i] [at args i]]]
        [match [get lltypes name]
          [lltype-decl-kind/record fields]
          [loop [i 0 csize [quote [i32 0]]]
            [if-not [lt-s i [size fields]]
              csize
              [continue
                csize [flist [quote intrinsic] [quote i32.add]
                        csize
                        [lltype-to-size-of-form [instantiate-lltype new-tv-env [pair/snd [at fields i]]]]]
                i [inc i]]]]

          [lltype-decl-kind/tagged-union ctors]
          [logq-abort llsize-of tagged-union]

          [lltype-decl-kind/untagged-union types]
          [loop [i 0 max-size [quote [i32 0]]]
            [if-not [lt-s i [size types]]
              max-size
              [let
                [type [at types i]
                 tsize [lltype-to-size-of-form [instantiate-lltype new-tv-env type]]]
                [continue
                  i [inc i]
                  max-size [flist [quote max] max-size tsize]]]]]]]]

    [lltype/literal lt]
    [match lt
      [literal-type/i32 f] [quote [i32 4]]
      [logq-abort llsize-of invalid literal type]]
    [lltype/func params opt-rest-param ret] [logq-abort llsize-of func]]]

[defn lloffset-fn [record-type-form field-name]
  [let [t [validate-lltype [set] record-type-form]]
    [match t
      [lltype/inst record-type-name args]
      [match [get lltypes record-type-name]
        [lltype-decl-kind/record fields]
        [loop [i 0
              offset 0]
          [assert [lt-s i [size fields]] lloffset-fn invalid field name]
          [let [p [at fields i]
                type [pair/snd p]]
            [if [eq-word field-name [pair/fst p]]
              [pair offset type]
              [let [type-params [get lltype-params record-type-name]
                    type-params-list [lltype-parameters/parameter-list type-params]
                    new-tv-env [transient-kv-map]]
                [for i 0 [size args]
                  [set-kv-map new-tv-env [at type-params-list i] [at args i]]]
                [continue
                  i [inc i]
                  offset [add offset [llsize-of [instantiate-lltype new-tv-env type]]]]]]]]]]]]

[defexpr lloffset [record-type-form field-form]
  [lloffset-fn record-type-form [form-to-word field-form]]]

[lltypexpr llvector [a size]
  [record
    [size i32]
    [elements [array a size]]]]

[lltypexpr
  word-or-list []
  [tagged-union
    [word [pointer [llvector i8 i32]]]
    [list [pointer [llvector [pointer tform] i32]]]]

  tform []
  [record
    [tag i32]
    [data word-or-list]]]

[lltypexpr
  form-word []
  [record
    [tag [literal i32 10]]
    [data [pointer [llvector i8 i32]]]]

  form-list []
  [record
    [tag [literal i32 11]]
    [data [pointer [llvector [pointer uform] i32]]]]

  uform []
  [untagged-union
    form-word
    form-list]]

[defn type-to-load-inst-name [type-name]
  [switch type-name
    [[word i32]] [word i32.load]
    [[word i64]] [word i64.load]
    [[word f32]] [word f32.load]
    [[word f64]] [word f64.load]
    [[word i8]] [word i32.load8-s]
    [[word u8]] [word i32.load8-u]
    [[word i16]] [word i32.load16-s]
    [[word u16]] [word i32.load16-u]

    [logq-abort unknown type-to-load-inst-name]]]

[defn type-to-store-inst-name [type-name]
  [switch type-name
    [[word i32]] [word i32.store]
    [[word i64]] [word i64.store]
    [[word f32]] [word f32.store]
    [[word f64]] [word f64.store]
    [[word i8] [word u8]] [word i32.store8]
    [[word i16] [word u16]] [word i32.store16]

    [logq-abort unknown type-to-store-inst-name]]]

[defn type-to-lltype [type]
  [match type
    [lltype/var -] [logq-abort type-to-lltype var]
    [lltype/func - --] [logq-abort type-to-lltype func]
    [lltype/literal lt]
      [match lt
        [literal-type/i32 i] [word i32]
        [logq-abort type-to-lltype literal]]
    [lltype/inst name args]
      [switch name
        [[word i8] [word i16] [word i32] [word f64]]
        [do
          [assert [is-empty args] type-to-lltype invalid number of arguments]
          name]

        [[word pointer]]
        [do
          [assert [eq [size args] 1] type-to-lltype invalid number of arguments]
          [word i32]]

        [logq-abort type-to-lltype unknown]]]]

[defmacro load-record-field [mem pexp record-type-name-form field-form]
  [let [p [lloffset-fn record-type-name-form [form-to-word field-form]]]
    [flist
      [quote intrinsic]
      [form/word [type-to-load-inst-name [type-to-lltype [pair/snd p]]]]
      mem
      [form/word [int-to-word [pair/fst p]]]
      [quote 0]
      pexp]]]

[defn store-record-field-fn [mem pexp record-type-form field-form value]
  [let [p [lloffset-fn record-type-form [form-to-word field-form]]]
    [flist
      [quote intrinsic]
      [form/word [type-to-store-inst-name [type-to-lltype [pair/snd p]]]]
      mem
      [form/word [int-to-word [pair/fst p]]]
      [quote 0]
      pexp
      value]]]

[defmacro store-record-field [mem pexp record-type-form field-form value]
  [store-record-field-fn mem pexp record-type-form field-form value]]

[defexpr size-ofexpr [type-form]
  [llsize-of [validate-lltype [set] type-form]]]

[defn size-of [type-form]
  [lltype-to-size-of-form [validate-lltype [set] type-form]]]

[defmacro msize-of [t]
  [lltype-to-size-of-form [validate-lltype [set] t]]]

[defn load-array-fn [mem pexp array-type-element-form start-offset-form index-form]
  [let [t [validate-lltype [set] array-type-element-form]
        element-size [llsize-of t]]
    [flist
      [quote intrinsic]
      [form/word [type-to-load-inst-name [type-to-lltype t]]]
      mem
      start-offset-form
      [quote 0]
      [flist
        [quote intrinsic]
        [quote i32.add]
        pexp
        [flist
          [quote intrinsic]
          [quote i32.mul]
          index-form
          [i32-to-form element-size]]]]]]

[defmacro load-array [mem pexp array-type-element-form start-offset-form index-form]
  [load-array-fn mem pexp array-type-element-form start-offset-form index-form]]

[defn store-array-fn [mem pexp array-type-element-form start-offset-form index-form value]
  [let [t [validate-lltype [set] array-type-element-form]
        element-size [llsize-of t]]
    [flist
      [quote intrinsic]
      [form/word [type-to-store-inst-name [type-to-lltype t]]]
      mem
      start-offset-form
      [quote 0]
      [flist
        [quote intrinsic]
        [quote i32.add]
        pexp
        [flist
          [quote intrinsic]
          [quote i32.mul]
          index-form
          [i32-to-form element-size]]]
      value]]]

[defmacro store-array [mem pexp array-type-element-form start-offset-form index-form value]
  [store-array-fn mem pexp array-type-element-form start-offset-form index-form value]]

[memory mem 1]

[defn is-address-aligned [x]
  [eq [i32 0] [intrinsic i32.and x [i32 3]]]]

[defn get-top []
  [let [top [intrinsic i32.load mem 0 4 [i32 0]]]
    [assert-not [is-zero top] get-top memory allocator not initialized]
    [assert [is-address-aligned top] get-top invalid address]
    top]]

[defn set-top [new-top]
  [intrinsic i32.store mem 0 4 [i32 0] new-top]]

[def alloc-base [i32 16]]

[defn alloc-init []
  [assert [is-zero [intrinsic i32.load mem 0 4 [i32 0]]] alloc-init memory allocator already initialized]
  [set-top alloc-base]]

[defn align-address [x]
  [intrinsic i32.and
    [add x 3]
    [intrinsic i32.xor [i32 -1] [i32 3]]]]

[defn alloc-n [n-bytes]
  [assert [is-address-aligned n-bytes] alloc-n invalid number of bytes not aligned]
  [let [top [get-top]]
    [set-top [add top n-bytes]]
    top]]

[defn fill-mem-dead-beef [p n-bytes]
  [assert [is-address-aligned p] fill-mem-dead-beef invalid address not aligned]
  [assert [is-address-aligned n-bytes] fill-mem-dead-beef invalid number of bytes not aligned]
  [loop [i p
         end [add p n-bytes]]
    [when [lt-s i end]
      [intrinsic i32.store mem 0 4 i [i32 0xefbeadde]]
      [continue i [add i 4]]]]]

[defn free [p n-bytes]
  [assert [is-address-aligned p] free invalid address not aligned]
  [assert [is-address-aligned n-bytes] free invalid number of bytes not aligned]
  [let [top [get-top]]
    [assert [eq [add p n-bytes] top] free invalid address]
    [fill-mem-dead-beef p n-bytes]
    [set-top p]]]

[defn memory-copy [mem dest src n-bytes]
  [loop [i 0]
    [when [lt-s i n-bytes]
      [intrinsic i32.store8 mem 0 1 [add dest i] [intrinsic i32.load8-u mem 0 1 [add src i]]]
      [continue i [inc i]]]]]

[defn realloc [p old-n-bytes new-n-bytes]
  [assert [is-address-aligned p] realloc invalid address not aligned]
  [assert [is-address-aligned old-n-bytes] realloc invalid old number of bytes not aligned]
  [assert [is-address-aligned new-n-bytes] realloc invalid new number of bytes not aligned]
  [let [top [get-top]
        old-top [sub top old-n-bytes]]
    [if [eq p old-top]
      [do
        [set-top [add old-top new-n-bytes]]
        p]
      [let [new-p [alloc-n new-n-bytes]]
        [memory-copy mem new-p p old-n-bytes]
        [free p old-n-bytes]
        new-p]]]]

[def llvector-array-offset [i32-to-form-word [pair/fst [lloffset [llvector any i32] elements]]]]

[defn vector-size [vp]
  [load-record-field mem vp [llvector any i32] size]]

[defmacro load-vector [mem p element-type-form index-form]
  [let [index-tmp [genword-prefix [word index]]]
    [flist [quote let] [flist index-tmp index-form]
      [flist [quote assert] [flist [quote le-s] [quote [i32 0]] index-tmp] [quote load-vector] [quote negative-index]]
      [flist [quote assert] [flist [quote lt-s] index-tmp [flist [quote vector-size] p]] [quote load-vector] [quote out-of-bounds]]
      [load-array-fn mem p element-type-form llvector-array-offset index-tmp]]]]

[defmacro store-vector [mem p element-type-form index-form value]
  [let [index-tmp [genword-prefix [word index]]]
    [flist [quote let] [flist index-tmp index-form]
      [flist [quote assert] [flist [quote le-s] [quote [i32 0]] index-tmp] [quote store-vector] [quote negative-index]]
      [flist [quote assert] [flist [quote lt-s] index-tmp [flist [quote vector-size] p]] [quote store-vector] [quote out-of-bounds]]
      [store-array-fn mem p element-type-form llvector-array-offset index-tmp value]]]]

[defmacro vector-base [p]
  [flist [quote intrinsic] [quote i32.add] p llvector-array-offset]]

[defn make-abc-word []
  [let
    [p [alloc-n [size-ofexpr [llvector i8 [literal i32 3]]]]]
    [store-record-field mem p [llvector any i32] size [i32 3]]
    [store-vector mem p i8 [i32 0] [word-to-char-code a]]
    [store-vector mem p i8 [i32 1] [word-to-char-code b]]
    [store-vector mem p i8 [i32 2] [word-to-char-code c]]
  p]]

[defmacro store-record-field-type [mem pexp record-type-form field-form value]
  [store-record-field-fn mem pexp record-type-form field-form value]]

[defn vector-alloc-i8 [n]
  [let
    [p [alloc-n [align-address [msize-of [llvector i8 [literal i32 n]]]]]]
    [store-record-field mem p [llvector i8 i32] size n]
  p]]

[defn vector-alloc-i32 [n]
  [let
    [p [alloc-n [msize-of [llvector i32 [literal i32 n]]]]]
    [store-record-field mem p [llvector i32 i32] size n]
  p]]

[defn make-alphabet-word [n]
  [let
    [p [vector-alloc-i8 n]]
    [for i 0 n
      [store-vector mem p i8 i [add [word-to-char-code a] i]]]
  p]]

[defn log-word-characters [wp]
  [let [vs [vector-size wp]]
    [when [is-negative vs]
      [log [word is-negative] vs]]
    [when-not [lt-s vs [i32 100]]
      [log [word not-less-100] vs]]
    [assert [not [is-negative vs]] log-word-characters invalid vector size negative]
    [assert [lt-s vs [i32 100]] log-word-characters invalid vector size]
    [for i 0 vs
      [log [load-vector mem wp i8 i]]]]]

[defn form-word-alloc [wp]
  [let
    [p [alloc-n [size-ofexpr [form-word]]]]
    [store-record-field mem p form-word tag [i32 10]]
    [store-record-field mem p form-word data wp]
  p]]

[defn form-list-alloc [lp]
  [let
    [p [alloc-n [size-ofexpr [form-list]]]]
    [store-record-field mem p form-list tag [i32 11]]
    [store-record-field mem p form-list data lp]
  p]]

[defn make-form []
  [let
    [pfw [form-word-alloc [make-abc-word]]
     lp [vector-alloc-i32 2]]
    [store-vector mem lp [pointer uform] [i32 0] pfw]
    [store-vector mem lp [pointer uform] [i32 1] pfw]
    [form-list-alloc lp]]]

[defn make-form-1 []
  [let
    [pfw [form-word-alloc [make-abc-word]]
     lp [vector-alloc-i32 1]]
    [store-vector mem lp [pointer uform] [i32 0] pfw]
    [form-list-alloc lp]]]

[defn uform-tag [puf]
  [load-record-field mem puf form-word tag]]

[defn log-form [puf]
  [switch [uform-tag puf]
    [[i32 10]]
    [log-word-characters [load-record-field mem puf form-word data]]

    [[i32 11]]
    [let [vector [load-record-field mem puf form-list data]]
      [for i 0 [vector-size vector]
        [log-form [load-vector mem vector [pointer uform] i]]]]

    [do
      [log [uform-tag puf]]
      [logq-abort log-form unknown tag]]]]

[defn is-whitespace [c]
  [or [eq c [i32 32]] [eq c [i32 10]]]]

[defn is-word-char [c]
  [or
    [is-between-inclusive [i32 97] c [i32 122]]
    [is-between-inclusive [i32 45] c [i32 57]]]]

[defn scan-word [bytes start]
  [loop [s [vector-size bytes]
         i start]
    [if [and [lt-s i s] [is-word-char [load-vector mem bytes i8 i]]]
      [continue i [inc i]]
      i]]]

[defn size-of-array [element-form n]
  [size-of
    [flist [quote array]
      element-form
      [flist [quote literal] [quote i32] [i32-to-form-word n]]]]]

[lltypexpr llbuffer [a]
  [record
    [size i32]
    [elements [pointer [llvector a i32]]]]]

[defn buffer/size [pbuf]
  [load-record-field mem pbuf [llbuffer any] size]]

[defn buffer/vector [pbuf]
  [load-record-field mem pbuf [llbuffer [pointer uform]] elements]]

[defn buffer/capacity [pbuf] [vector-size [buffer/vector pbuf]]]

[defn buffer-alloc [element-type init-capacity]
  [assert [not [is-negative init-capacity]] buffer-alloc invalid capacity negative]
  [assert-not [is-zero init-capacity] buffer-alloc invalid capacity zero]
  [let
    [pbuf [alloc-n [size-ofexpr [llbuffer [pointer uform]]]]
     pvec [alloc-n [msize-of [llvector [pointer uform] [literal i32 init-capacity]]]]]
    [store-record-field mem pbuf [llbuffer [pointer uform]] size 0]
    [store-record-field mem pbuf [llbuffer [pointer uform]] elements pvec]
    pbuf]]

[defn buffer-append [pbuf element]
  [let
    [s [buffer/size pbuf]
     elements [buffer/vector pbuf]
     capacity [vector-size elements]]
    [if [lt-s s capacity]
      [do
        [store-record-field mem pbuf [llbuffer [pointer uform]] size [inc s]]
        [store-array mem elements [pointer uform] 0 size element]]
      [let
        [new-cap [mul 2 capacity]
         new-vec [alloc-n [msize-of [llvector [pointer uform] [literal i32 new-cap]]]]]
        ]]]
        ]

[defn buffer-to-vector [pbuf]
  [let
    [s [buffer/size pbuf]
     capacity [buffer/capacity pbuf]
     elements [load-record-field mem pbuf [llbuffer [pointer uform]] elements]]
    [if [lt-s s capacity]
      [do
        [store-record-field mem pbuf [llbuffer [pointer uform]] size [inc s]]
        ]
      [if [eq elements 0]
        [let [new-size [mul 2 s]]

          ]
        [logq-abort buffer-append buffer full]]]]]


[def max-stack-size [i32 16]]

[defn alloc-stack []
  [alloc-n
    [size-of
      [flist [quote array]
        [quote [llbuffer [pointer uform]]]
        [flist [quote literal] [quote i32] [i32-to-form-word max-stack-size]]]]]]

[comment store-array [mem pexp array-type-element-form start-offset-form index-form value]]

[defn log-buffer [pvec]
  [let [s [vector-size pvec]]
    [memory-log-as-string mem [vector-base pvec] s]]]

[defn parse [bytes]
  [loop [stack [alloc-stack]
         depth -1
         s [vector-size bytes]
         i 0]
    [if [lt-s i s]
      [let [c [load-vector mem bytes i8 i]]
        [ifs
          [is-word-char c]
          [let
            [end-word
              [loop [j [inc i]]
                [if [and [lt-s j s] [is-word-char [load-vector mem bytes i8 j]]]
                  [continue j [inc j]]
                  j]]
             n [sub end-word i]
             w [vector-alloc-i8 n]]
            [for j 0 n
              [store-vector mem w i8 j [load-vector mem bytes i8 [add i j]]]]
            [if [eq depth [i32 -1]]
              [form-word-alloc w]
              [intrinsic unreachable]]]

          [is-whitespace c]
          [continue i [inc i]]

          [eq c [i32 91]]
          [do]

          [eq c [i32 93]]
          [do]

          -1]]
      -2]]
      ]

[defn byte-array-concat [ba1 ba2]
  [let
    [n1 [byte-array-size ba1]
     n2 [byte-array-size ba2]
     a [byte-array [add n1 n2]]]
    [for i 0 n1
      [byte-array-set a i [byte-array-get ba1 i]]]
    [for i 0 n2
      [byte-array-set a [add i n1] [byte-array-get ba2 i]]]
    a]]

[defn word-to-vector-byte-array [w]
  [byte-array-concat [i32-to-byte-array [word-byte-size w]] [word-to-byte-array w]]]

[def data-segments [growable-list]]
[def data-segments-map [transient-kv-map]]

[def data-segment-count [atom 0]]

[def active-current-end [atom [i32 16]]]

[defn byte-array-to-bytes-form [ba]
  [let [n [byte-array-size ba]
        gl [growable-list]]
    [for i 0 n
      [push gl [i32-to-form-word [byte-array-get ba i]]]]
    [form-concat [list [quote bytes]]
      [clone-growable-to-frozen-list gl]]]]

[defmacro data-word [mem addr w]
  [flist [quote data] [quote active] mem addr
    [byte-array-to-bytes-form [word-to-vector-byte-array [form-to-word w]]]]]

[data-word mem [i32 16] abc]

[data-word mem [i32 32] foobar]

[type data-segment []
  [union
    [passive byte-array]
    [active i32 byte-array]]]

[defn add-data-segment [segment]
  [let [n [kv-map-size data-segments-map]]
    [push data-segments segment]
    [set-kv-map data-segments-map n segment]
    n]]

[defn active-word [w]
  [let [ba [word-to-vector-byte-array w]
        addr [atom-get active-current-end]]
    [add-data-segment [data-segment/active addr ba]]
    [atom-set active-current-end [add addr [align-address [byte-array-size ba]]]]
    addr]]

[defn main []
  [alloc-init]
  [let [fd [open [word parse-test.wuns]]
        bv [vector-alloc-i8 [i32 32]]]
    [read-file-memory fd mem [vector-base bv] [vector-size bv]]
    [close fd]
    [log-form [parse bv]]]]

[defn file-test []
  [alloc-init]
  [let [fd [open [word parse-test.wuns]]
        s [i32 100]
        p [i32 16]
        r [read-file-memory fd mem p s]]
    [close fd]
    [memory-log-as-string mem p r]]]

[comment

[defn array-i32-alloc [s]
  [let [p [alloc-n [size-of [array i32 [exp s]]]]]
    p]]

[defn set-character [word-pointer i c]
  [if [lt-s i [i32 0]] [unreachable]]
  [let [s [intrinsic i32.load mem [offset [vector i8 [exp [i32 -1]]] size] 4 word-pointer]]
    [if [ge-s i s] [unreachable]]
    [intrinsic i32.store8 mem [offset [vector i8 [exp [i32 -1]]] 1 [intrinsic i32.add word-pointer i] c]]]]

[defn get-character [word-pointer i]
  [if [lt-s i [i32 0]] [unreachable]]
  [let [s [intrinsic i32.load mem [offset [vector i8 [exp [i32 -1]]] size] 4 word-pointer]]
    [if [ge-s i s] [unreachable]]
    [intrinsic i32.load8-u mem [offset [vector i8 [exp [i32 -1]]] 1 [intrinsic i32.add word-pointer i]]]]]
 ]