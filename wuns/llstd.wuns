[load std.wuns]

[def lltype-params [transient-kv-map]]

[type literal-type []
  [union
    [i32 i32]]]

[type lltype []
  [union
    [var word]
    [inst word [list lltype]]
    [literal literal-type]
    [func [list lltype] [option lltype] lltype]]]

[defn instantiate-lltype [type-var-env type-form]
  [match type-form
    [lltype/var v]
    [get type-var-env v]

    [lltype/inst name args]
    [lltype/inst name [list-map arg args [instantiate-lltype type-var-env arg]]]

    [lltype/literal t v]
    type-form

    [lltype/func params opt-rest-param ret]
    [lltype/func
      [list-map p params [instantiate-lltype type-var-env p]]
      [match opt-rest-param
        [option/none] opt-rest-param
        [option/some p] [option/some [instantiate-lltype type-var-env p]]]
      [instantiate-lltype type-var-env ret]]]]

[type lltype-parameters []
  [record
    [parameter-set [set word]]
    [parameter-list [list word]]]]

[defn validate-lltype [type-var-env type-form]
  [match type-form
    [form/word w]
    [if [set-has type-var-env w]
      [lltype/var w]
      [validate-lltype type-var-env [flist type-form]]]

    [form/list l]
    [do
      [assert [size l] not empty]
      [let [type-name [form-to-word [first l]]
            type-args [slice l 1 [size l]]]
        [switch type-name
          [[word i8] [word i16] [word i32] [word f64] [word any]]
          [do
            [when-not [is-empty type-args]
              [log type-args]
              [logq-abort invalid number of arguments]]
            [assert [eq [size type-args] 0] validate-lltype invalid number of arguments]
            [lltype/inst type-name [list]]]

          [[word pointer]]
          [do
            [assert [eq [size type-args] 1] validate-lltype invalid number of arguments pointer]
            [lltype/inst type-name [list [validate-lltype type-var-env [first type-args]]]]]

          [[word literal]]
          [do
            [assert [eq [size type-args] 2] validate-lltype invalid number of arguments literal]
            [lltype/literal
              [switch [form-to-word [first type-args]]
                [[word i32]] [literal-type/i32 [word-to-int [form-to-word [second type-args]]]]
                [logq-abort invalid literal type]]]]

          [[word array]]
          [let [element-type-form [first type-args]
                size-form [second type-args]
                size-type [validate-lltype type-var-env size-form]]
            [match size-type
              [lltype/var tv] [do]
              [lltype/literal lt]
              [match lt
                [literal-type/i32 i] [assert [not [is-negative i]] validate-lltype invalid array size]]
              [logq-abort invalid size type]]
            [lltype/inst type-name
              [list
                [validate-lltype type-var-env element-type-form]
                size-type]]]

          [let [type-var-env [get lltype-params type-name]
                type-params [lltype-parameters/parameter-set type-var-env]]
            [assert [eq [size [lltype-parameters/parameter-list type-var-env]] [size type-args]] ll invalid number of arguments4]
            [lltype/inst type-name
              [list-map targ type-args [validate-lltype type-params targ]]]]]]]]]

[type lltype-decl-kind []
  [union
    [record [list [pair word lltype]]]
    [tagged-union [list [pair word [list lltype]]]]
    [untagged-union [list [list lltype]]]]]

[def lltypes [transient-kv-map]]

[defexpr lltypexpr [.. t]
  [assert [eq [i32.rem-s [size t] 3] 0] lltype invalid number of arguments not multiple of 3]
  [for-3 i 0 [size t]
    [let
      [type-name [form-to-word [at t i]]
       type-params [list-map p [form-to-list [at t [inc i]]] [form-to-word p]]
       type-var-env [set]]
      [when [has lltype-params type-name]
        [log type-name]
        [log lltype-params]
        [logq-abort ll type already defined]]
      [assert [not [has lltype-params type-name]] ll type already defined]
      [for-each p type-params
        [assert [not [set-has type-var-env p]] ll duplicate type parameter]
        [set-add type-var-env p]]
      [set-kv-map lltype-params type-name [lltype-parameters type-var-env type-params]]]]
  [for-3 i 0 [size t]
    [let
      [type-name [form-to-word [at t i]]
       type-var-env [lltype-parameters/parameter-set [get lltype-params type-name]]
       type-body [form-to-list [at t [add i 2]]]
       type-kind [form-to-word [first type-body]]
       type-kind-args [rest type-body]]
      [assert [size type-body] body empty]
      [set-kv-map lltypes type-name
        [switch type-kind
          [[word record]]
          [let [field-name-set [set]]
            [lltype-decl-kind/record
              [list-map field-form type-kind-args
                [let [field [form-to-list field-form]]
                  [assert [eq [size field] 2] ll invalid field]
                  [let [field-name [form-to-word [at field 0]]
                        field-type-form [at field 1]]
                    [assert [not [set-has field-name-set field-name]] ll field name already defined]
                    [set-add field-name-set field-name]
                    [pair field-name [validate-lltype type-var-env field-type-form]]]]]]]

          [[word tagged-union]]
          [let [ctor-name-set [set]]
            [lltype-decl-kind/tagged-union
              [list-map ctor-form type-kind-args
                [let [ctor-list [form-to-list ctor-form]]
                  [assert [not [is-empty ctor-list]] ll invalid ctor-list]
                  [let [ctor-name [form-to-word [first ctor-list]]]
                    [assert [not [set-has ctor-name-set ctor-name]] ll ctor-list name already defined]
                    [set-add ctor-name-set ctor-name]
                    [pair ctor-name
                      [list-map tp [rest ctor-list]
                        [validate-lltype type-var-env tp]]]]]]]]

          [[word untagged-union]]
          [lltype-decl-kind/untagged-union
            [list-map tp type-kind-args [validate-lltype type-var-env tp]]]

          [logq-abort unknown lltype kind]]]]]]

[defn llsize-of [t]
  [match t
    [lltype/var -] [logq-abort llsize-of var]
    [lltype/inst name args]
    [switch name
      [[word i8] [word u8]] 1
      [[word i16] [word u16]] 2
      [[word i32] [word u32]] 4
      [[word i64] [word f64]] 8
      [[word pointer]] 4

      [[word array]]
      [let [element-type [first args]
            size-type [second args]]
        [match size-type
          [lltype/literal lt]
          [match lt
            [literal-type/i32 e] [mul [llsize-of element-type] e]
            [logq-abort llsize-of invalid array size type]]

          [do
            [log size-type]
            [logq-abort llsize-of invalid array size]]]]

      [let
        [type-params [get lltype-params name]
         type-params-list [lltype-parameters/parameter-list type-params]
         new-tv-env [transient-kv-map]]
        [for i 0 [size args]
          [set-kv-map new-tv-env [at type-params-list i] [at args i]]]
        [match [get lltypes name]
          [lltype-decl-kind/record fields]
          [loop [i 0 csize 0]
            [if-not [lt-s i [size fields]]
              csize
              [continue
                csize [add csize [llsize-of [instantiate-lltype new-tv-env [pair/snd [at fields i]]]]]
                i [inc i]]]]

          [lltype-decl-kind/tagged-union ctors]
          [loop [j 0 max-size 0]
            [if-not [lt-s j [size ctors]]
              max-size
              [let
                [ctor [at ctors j]
                params [pair/snd ctor]
                total-size
                  [loop [i 0 acc-size 0]
                    [if-not [lt-s i [size params]]
                      acc-size
                      [continue
                        acc-size [add acc-size [llsize-of [instantiate-lltype new-tv-env [at params i]]]]
                        i [inc i]]]]]
                [continue
                  j [inc j]
                  max-size [max max-size total-size]]]]]

          [lltype-decl-kind/untagged-union types]
          [loop [i 0 max-size 0]
            [if-not [lt-s i [size types]]
              max-size
              [let
                [type [at types i]
                 tsize [llsize-of [instantiate-lltype new-tv-env type]]]
                [continue
                  i [inc i]
                  max-size [max max-size tsize]]]]]]]]
    [lltype/literal lt]
    [match lt
      [literal-type/i32 i] 4
      [logq-abort llsize-of invalid literal type]]
    [lltype/func params opt-rest-param ret] [logq-abort llsize-of func]]]


[defn lloffset-fn [record-type-name field-name]
  [match [get lltypes record-type-name]
    [lltype-decl-kind/record fields]
    [loop [i 0
           offset 0]
      [let [p [at fields i]
            type [pair/snd p]]
        [if [eq-word field-name [pair/fst p]]
          [pair offset type]
          [continue
            i [inc i]
            offset [add offset [llsize-of type]]]]]]]]

[defexpr lloffset [record-type-name-form field-form]
  [lloffset-fn [form-to-word record-type-name-form] [form-to-word field-form]]]

[lltypexpr llvector [a size]
  [record
    [size i32]
    [elements [array a size]]]]

[lltypexpr
  word-or-list []
  [tagged-union
    [word [pointer [llvector i8 i32]]]
    [list [pointer [llvector [pointer tform] i32]]]]

  tform []
  [record
    [tag i32]
    [data word-or-list]]]

[lltypexpr
  form-word []
  [record
    [tag [literal i32 0]]
    [data [pointer [llvector i8 i32]]]]

  form-list []
  [record
    [tag [literal i32 1]]
    [data [pointer [llvector [pointer uform] i32]]]]

  uform []
  [untagged-union
    form-word
    form-list]]

[defn type-to-load-inst-name [type-name]
  [switch type-name
    [[word i32]] [word i32.load]
    [[word i64]] [word i64.load]
    [[word f32]] [word f32.load]
    [[word f64]] [word f64.load]
    [[word i8]] [word i32.load8-s]
    [[word u8]] [word i32.load8-u]
    [[word i16]] [word i32.load16-s]
    [[word u16]] [word i32.load16-u]

    [logq-abort unknown type-to-load-inst-name]]]

[defn type-to-store-inst-name [type-name]
  [switch type-name
    [[word i32]] [word i32.store]
    [[word i64]] [word i64.store]
    [[word f32]] [word f32.store]
    [[word f64]] [word f64.store]
    [[word i8] [word u8]] [word i32.store8]
    [[word i16] [word u16]] [word i32.store16]

    [logq-abort unknown type-to-store-inst-name]]]

[defn type-to-lltype [type]
  [match type
    [lltype/var -] [logq-abort type-to-lltype var]
    [lltype/func - --] [logq-abort type-to-lltype func]
    [lltype/literal lt]
      [match lt
        [literal-type/i32 i] [word i32]
        [logq-abort type-to-lltype literal]]
    [lltype/inst name args]
      [switch name
        [[word i8] [word i16] [word i32] [word f64]]
        [do
          [assert [is-empty args] type-to-lltype invalid number of arguments]
          name]

        [[word pointer]]
        [do
          [assert [eq [size args] 1] type-to-lltype invalid number of arguments]
          [word i32]]

        [logq-abort type-to-lltype unknown]]]]

[defmacro load-record-field [mem pexp record-type-name-form field-form]
  [let [p [lloffset-fn [form-to-word record-type-name-form] [form-to-word field-form]]]
    [flist
      [quote intrinsic]
      [form/word [type-to-load-inst-name [type-to-lltype [pair/snd p]]]]
      mem
      [form/word [int-to-word [pair/fst p]]]
      [quote 0]
      pexp]]]

[defmacro store-record-field [mem pexp record-type-name-form field-form value]
  [let [p [lloffset-fn [form-to-word record-type-name-form] [form-to-word field-form]]]
    [flist
      [quote intrinsic]
      [form/word [type-to-store-inst-name [type-to-lltype [pair/snd p]]]]
      mem
      [form/word [int-to-word [pair/fst p]]]
      [quote 0]
      pexp
      value]]]

[defexpr size-ofexpr [type-form]
  [llsize-of [validate-lltype [set] type-form]]]

[defn load-array-fn [mem pexp array-type-element-form start-offset-form index-form]
  [let [t [validate-lltype [set] array-type-element-form]
        element-size [llsize-of t]]
    [flist
      [quote intrinsic]
      [form/word [type-to-load-inst-name [type-to-lltype t]]]
      mem
      start-offset-form
      [quote 0]
      [flist
        [quote intrinsic]
        [quote i32.mul]
        index-form
        [i32-to-form element-size]]]]]

[defmacro load-array [mem pexp array-type-element-form start-offset-form index-form]
  [load-array-fn mem pexp array-type-element-form start-offset-form index-form]]

[defn store-array-fn [mem pexp array-type-element-form start-offset-form index-form value]
  [let [t [validate-lltype [set] array-type-element-form]
        element-size [llsize-of t]]
    [flist
      [quote intrinsic]
      [form/word [type-to-store-inst-name [type-to-lltype t]]]
      mem
      start-offset-form
      [quote 0]
      [flist
        [quote intrinsic]
        [quote i32.mul]
        index-form
        [i32-to-form element-size]]
      value]]]

[defmacro store-array [mem pexp array-type-element-form start-offset-form index-form value]
  [store-array-fn mem pexp array-type-element-form start-offset-form index-form value]]

[memory mem 1]

[defn get-top []
  [intrinsic i32.load mem 0 4 [i32 0]]]

[defn init-mem []
  [if [intrinsic i32.eq [get-top] [i32 0]]
    [intrinsic i32.store mem 0 4 [i32 0] [i32 16]]
    [intrinsic unreachable]]]

[defn align-address [x]
  [intrinsic i32.and
    [intrinsic i32.add x [i32 3]]
    [intrinsic i32.xor [i32 -1] [i32 3]]]]

[defn alloc-n [n-bytes]
  [if [intrinsic i32.le-s n-bytes [i32 0]] [intrinsic unreachable] [do]]
  [let [top [get-top]]
    [when [eq top [i32 0]]
      [intrinsic unreachable]]
    [intrinsic i32.store mem 0 4 [i32 0] [intrinsic i32.add top [align-address n-bytes]]]
    top]]

[def llvector-array-offset [pair/fst [lloffset llvector elements]]]

[defmacro load-vector [mem p element-type-form index-form]
  [load-array-fn mem p element-type-form [form/word [int-to-word llvector-array-offset]] index-form]]

[defmacro store-vector [mem p element-type-form index-form value]
  [store-array-fn mem p element-type-form [form/word [int-to-word llvector-array-offset]] index-form value]]

[defn make-abc-word []
  [let
    [p [alloc-n [size-ofexpr [llvector i8 [literal i32 3]]]]]
    [store-record-field mem p llvector size [i32 3]]
    [store-vector mem p i8 [i32 0] [i32 65]]
    [store-vector mem p i8 [i32 1] [i32 66]]
    [store-vector mem p i8 [i32 2] [i32 67]]
  p]]

[defn vector-size [vp]
  [load-record-field mem vp llvector size]]

[defn log-word-characters [wp]
  [let [vs [vector-size wp]]
    [for i 0 vs
      [log [load-vector mem wp i8 i]]]]]

[comment
[defn vector-i8-alloc [s]
  [when [intrinsic i32.eq s [i32 0]] [intrinsic unreachable]]
  [let [p [alloc-n [size-of [vector i8 [exp s]]]]]
    [store-field mem p [vector i32 any] size s]
    p]]

[defn vector-size [vp]
  [load-field mem vp [vector i8 any] size]]

[defn array-i32-alloc [s]
  [let [p [alloc-n [size-of [array i32 [exp s]]]]]
    p]]

[defn set-character [word-pointer i c]
  [if [lt-s i [i32 0]] [unreachable]]
  [let [s [intrinsic i32.load mem [offset [vector i8 [exp [i32 -1]]] size] 4 word-pointer]]
    [if [ge-s i s] [unreachable]]
    [intrinsic i32.store8 mem [offset [vector i8 [exp [i32 -1]]] 1 [intrinsic i32.add word-pointer i] c]]]]

[defn get-character [word-pointer i]
  [if [lt-s i [i32 0]] [unreachable]]
  [let [s [intrinsic i32.load mem [offset [vector i8 [exp [i32 -1]]] size] 4 word-pointer]]
    [if [ge-s i s] [unreachable]]
    [intrinsic i32.load8-u mem [offset [vector i8 [exp [i32 -1]]] 1 [intrinsic i32.add word-pointer i]]]]]
 ]