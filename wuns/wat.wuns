[load std.wuns]

[type wat-inst-memargs []
  [record
    [memory word]
    [offset word]
    [alignment word]]]

[type wat-inst-memargs-opt []
  [record
    [memory [option word]]
    [offset [option word]]
    [alignment [option word]]]]

[type wat-immediate []
  [union
    [memory word]
    ]]

[type wat-inst []
  [union
    [i32.const word]
    [i64.const word]
    [f32.const word]
    [f64.const word]
    [local.get word]
    [local.set word wat-inst]
    [global.get word]
    [global.set word wat-inst]
    [instruction byte-array [list wat-immediate] [list wat-inst]]
    [inst-word word [list wat-inst]]
    [inst byte-array [list wat-inst]]
    [load byte-array wat-inst-memargs wat-inst]
    [load-opt byte-array wat-inst-memargs-opt wat-inst]
    [store byte-array wat-inst-memargs wat-inst wat-inst]
    [store-opt byte-array wat-inst-memargs-opt wat-inst wat-inst]
    [if [list word] wat-inst wat-inst wat-inst]
    [call word [list wat-inst]]
    [instructions [list wat-inst]]
    [loop word [list word] wat-inst]
    [br word]]]

[type wat-func []
  [record
    [name word]
    [parameters [list [pair word word]]]
    [locals [list [pair word word]]]
    [result [list word]]
    [body wat-inst]]]

[type memory-kind []
  [union
    [i32]
    [i64]]]

[type wat-import-kind []
  [union
    [memory word memory-kind i32 [option i32]]
    [func word [list word] [list word]]]]

[type wat-memory []
  [record
    [kind memory-kind]
    [name word]
    [initial i32]
    [maximum [option i32]]]]

[type mut []
  [union
    [const]
    [var]]]

[type wat-global []
  [record
    [name word]
    [mutable mut]
    [type word]
    [value wat-inst]]]

[type export-kind []
  [union [func] [global] [memory]]]

[type wat-data []
  [union
    [active word wat-inst byte-array]]]

[type wat-output []
  [record
    [imports [growable-list [pair [pair word word] wat-import-kind]]]
    [memories [growable-list wat-memory]]
    [globals [growable-list wat-global]]
    [funcs [growable-list wat-func]]
    [exports [growable-list [pair word [pair export-kind word]]]]
    [datas [growable-list wat-data]]]]

[type wat []
  [union
    [word word]
    [byte-array byte-array]
    [dollar word]
    [dqstring word]
    [dqstring-bytes byte-array]
    [seq [list wat]]
    [seq-lf [list wat]]
    [list [list wat]]
    [eq-pair word word]]]

[type printer []
  [record
    [bytes [byte-array]]
    [index [atom i32]]]]

[defn empty-printer []
  [printer [byte-array-resizable [i32 256] [i32 0x10000000]] [atom 0]]]

[defn printer-index [p] [atom-get [printer/index p]]]

[defn printer-to-byte-array [p]
  [let
    [ci [atom-get [printer/index p]]
     cb [printer/bytes p]
     trimmed [byte-array ci]]
    [for i 0 ci
      [byte-array-set trimmed i [byte-array-get cb i]]]
    trimmed]]

[defn print-byte [printer byte]
  [let [ia [printer/index printer]
        i [atom-get ia]
        a [printer/bytes printer]
        cur-size [byte-array-size a]]
    [when [le-s cur-size i]
      [byte-array-resize a [mul [i32 2] cur-size]]]
    [byte-array-set a i byte]
    [atom-set ia [inc i]]]]

[defn print-word [printer word]
  [for i 0 [word-byte-size word]
    [print-byte printer [char-code-at word i]]]]

[defn print-int32 [printer n-bytes n]
  [assert [le-s n-bytes 8] print-i32 expected 8 or fewer bytes got [identity n-bytes]]
  [loop
    [i 0
      cur n]
    [when [lt-s i n-bytes]
      [print-byte printer [intrinsic i32.and [i32 0xff] cur]]
      [continue
        i [inc i]
        cur [intrinsic i32.shr-s cur [i32 8]]]]]]

[defn int-to-hex-ascii [i]
  [if [lt-s i [i32 10]]
    [add i [i32 48]]
    [add [sub i [i32 10]] [i32 97]]]]

[defn i32-to-hex-bits [n-bits value]
  [let [gl [growable-list]]
    [loop [n-start [sub n-bits 4]
           index [intrinsic i32.shl [i32 15] n-start]
           i n-start]
      [when index
        [push gl [int-to-hex-ascii [intrinsic i32.shr-u [intrinsic i32.and value index] i]]]
        [continue
          index [intrinsic i32.shr-u index [i32 4]]
          i [sub i 4]]]]
    [code-points-to-word [clone-growable-to-frozen-list gl]]]]

[defn i32-to-hex-8 [value]
  [i32-to-hex-bits [i32 8] value]]

[def ascii-line-feed [i32 10]]
[def ascii-space [i32 32]]
[def ascii-double-quote [i32 34]]
[def ascii-dollar [i32 36]]
[def ascii-left-paren [i32 40]]
[def ascii-right-paren [i32 41]]
[def ascii-equal [i32 61]]
[def ascii-backslash [i32 92]]

[defn print-string-chars [printer word]
  [for i 0 [byte-array-size word]
    [let [cc [byte-array-get word i]]
      [if [or [lt-s cc [i32 32]] [lt-s [i32 126] cc] [eq cc ascii-double-quote] [eq cc ascii-backslash]]
        [do
          [print-byte printer ascii-backslash]
          [print-word printer [i32-to-hex-8 cc]]]
        [print-byte printer cc]]]]]

[defn print-wat [printer wat]
  [match wat
    [wat/word w] [print-word printer w]
    [wat/byte-array ba]
      [for i 0 [byte-array-size ba]
        [print-byte printer [byte-array-get ba i]]]
    [wat/dollar w] [do [print-byte printer ascii-dollar] [print-word printer w]]
    [wat/dqstring w] [do [print-byte printer ascii-double-quote] [print-word printer w] [print-byte printer ascii-double-quote]]
    [wat/dqstring-bytes ba] [do [print-byte printer ascii-double-quote] [print-string-chars printer ba] [print-byte printer ascii-double-quote]]
    [wat/seq l]
      [do
        [when-not [is-empty l]
          [print-wat printer [first l]]
          [for i 1 [size l]
            [print-byte printer ascii-space]
            [print-wat printer [at l i]]]]]
    [wat/seq-lf l]
      [do
        [when-not [is-empty l]
          [print-wat printer [first l]]
          [for i 1 [size l]
            [print-byte printer ascii-line-feed]
            [print-wat printer [at l i]]]]]
    [wat/list l]
      [do
        [print-byte printer ascii-left-paren]
        [when-not [is-empty l]
          [print-wat printer [first l]]
          [for i 1 [size l]
            [print-byte printer ascii-space]
            [print-wat printer [at l i]]]]
        [print-byte printer ascii-right-paren]]
    [wat/eq-pair w1 w2]
      [do
        [print-word printer w1]
        [print-byte printer ascii-equal]
        [print-word printer w2]]]]

[defn wat-to-wat-bytes [wat]
  [let [p [empty-printer]]
    [print-wat p wat]
    [printer-to-byte-array p]]]

[defn wat-list [.. l] [wat/list l]]

[defn wat-concat [.. l] [wat/list [concat-lists l]]]

[defn wat-inst-memargs-to-out [ma]
  [list
    [wat-list [wat/word [word memory]] [wat/dollar [wat-inst-memargs/memory ma]]]
    [wat/eq-pair [word offset] [wat-inst-memargs/offset ma]]
    [wat/eq-pair [word align] [wat-inst-memargs/alignment ma]]]]

[defn wat-inst-memargs-opt-to-out [ma]
  [concat-lists
    [list
      [if-let [m [wat-inst-memargs-opt/memory ma]]
        [list [wat-list [wat/word [word memory]] [wat/dollar m]]]
        [list]]
      [if-let [offset [wat-inst-memargs-opt/offset ma]]
        [list [wat/eq-pair [word offset] offset]]
        [list]]
      [if-let [align [wat-inst-memargs-opt/alignment ma]]
        [list [wat/eq-pair [word align] align]]
        [list]]]]]

[defn wat-inst-to-out [i]
  [match i
    [wat-inst/i32.const w]
    [wat-list [wat/word [word i32.const]] [wat/word w]]

    [wat-inst/i64.const w]
    [wat-list [wat/word [word i64.const]] [wat/word w]]

    [wat-inst/f32.const w]
    [wat-list [wat/word [word f32.const]] [wat/word w]]

    [wat-inst/f64.const w]
    [wat-list [wat/word [word f64.const]] [wat/word w]]

    [wat-inst/inst-word w args]
    [wat-concat
      [list [wat/word w]] [list-map a args [wat-inst-to-out a]]]

    [wat-inst/instruction ba imm-args args]
    [wat-concat
      [list [wat/byte-array ba]]
      [list-map ia imm-args
        [match ia
          [wat-immediate/memory m]
          [wat-list [wat/word [word memory]] [wat/dollar m]]]]
      [list-map a args [wat-inst-to-out a]]]

    [wat-inst/inst ba args]
    [wat-concat
      [list [wat/byte-array ba]] [list-map a args [wat-inst-to-out a]]]

    [wat-inst/local.get w]
    [wat-list [wat/word [word local.get]] [wat/dollar w]]

    [wat-inst/local.set w e]
    [wat-list [wat/word [word local.set]] [wat/dollar w] [wat-inst-to-out e]]

    [wat-inst/global.get w]
    [wat-list [wat/word [word global.get]] [wat/dollar w]]

    [wat-inst/global.set w e]
    [wat-list [wat/word [word global.set]] [wat/dollar w] [wat-inst-to-out e]]

    [wat-inst/load name ma addr]
    [wat-concat
      [list [wat/byte-array name]]
      [wat-inst-memargs-to-out ma]
      [list [wat-inst-to-out addr]]]

    [wat-inst/load-opt name ma addr]
    [wat-concat
      [list [wat/byte-array name]]
      [wat-inst-memargs-opt-to-out ma]
      [list [wat-inst-to-out addr]]]

    [wat-inst/store name ma addr value]
    [wat-concat
      [list [wat/byte-array name]]
      [wat-inst-memargs-to-out ma]
      [list [wat-inst-to-out addr] [wat-inst-to-out value]]]

    [wat-inst/store-opt name ma addr value]
    [wat-concat
      [list [wat/byte-array name]]
      [wat-inst-memargs-opt-to-out ma]
      [list [wat-inst-to-out addr] [wat-inst-to-out value]]]

    [wat-inst/instructions insts]
    [wat/seq [list-map inst insts [wat-inst-to-out inst]]]

    [wat-inst/if result-types cond true false]
    [wat-list [wat/word [word if]]
      [wat/list
        [concat [list [wat/word [word result]]]
          [list-map rt result-types [wat/word rt]]]]
      [wat-inst-to-out cond]
      [wat-list [wat/word [word then]] [wat-inst-to-out true]]
      [wat-list [wat/word [word else]] [wat-inst-to-out false]]]

    [wat-inst/call w args]
    [wat-concat
      [list [wat/word [word call]] [wat/dollar w]]
      [list-map a args [wat-inst-to-out a]]]

    [wat-inst/loop loop-label result-types body]
    [wat-list
      [wat/word [word loop]]
      [wat/dollar loop-label]
      [wat/list
        [concat [list [wat/word [word result]]]
          [list-map rt result-types [wat/word rt]]]]
      [wat-inst-to-out body]]

    [wat-inst/br w]
    [wat-list [wat/word [word br]] [wat/dollar w]]

    [logq-abort wat-inst-to-out unknown instruction [identity i]]]]

[defn import-to-wat [import]
  [let [name-pair [pair/fst import]
        name [pair/snd name-pair]]
    [wat-list
      [wat/word [word import]]
      [wat/dqstring [pair/fst name-pair]]
      [wat/dqstring name]
      [match [pair/snd import]
        [wat-import-kind/memory mname kind init-size opt-max]
        [wat-list
          [wat/word [word memory]]
          [wat/dollar mname]
          [wat/word [match kind
            [memory-kind/i32] [word i32]
            [memory-kind/i64] [word i64]]]
          [wat/word [int-to-word init-size]]]

        [wat-import-kind/func fname param-types result-types]
        [wat-list
          [wat/word [word func]]
          [wat/dollar fname]
          [wat-concat [list [wat/word [word param]]]
            [list-map pt param-types [wat/word pt]]]
          [wat-concat [list [wat/word [word result]]]
            [list-map rt result-types [wat/word rt]]]]]]]]

[defn memory-to-wat [mem]
  [wat-list
    [wat/word [word memory]]
    [wat/dollar [wat-memory/name mem]]
    [wat/word [match [wat-memory/kind mem]
      [memory-kind/i32] [word i32]
      [memory-kind/i64] [word i64]]]
    [wat/word [int-to-word [wat-memory/initial mem]]]]]

[defn global-to-wat [global]
  [wat-list
    [wat/word [word global]]
    [wat/dollar [wat-global/name global]]
    [match [wat-global/mutable global]
      [mut/const]
      [wat/word [wat-global/type global]]

      [mut/var]
      [wat-list [wat/word [word mut]] [wat/word [wat-global/type global]]]]
    [wat-inst-to-out [wat-global/value global]]]]

[defn data-to-wat [d]
  [match d
    [wat-data/active mem-name offset data]
    [wat-list
      [wat/word [word data]]
      [wat-list [wat/word [word memory]] [wat/dollar mem-name]]
      [wat-inst-to-out offset]
      [wat/dqstring-bytes data]]]]

[defn wat-func-to-wat [of]
  [wat-concat
    [list
      [wat/word [word func]]
      [wat/dollar [wat-func/name of]]]
    [list-map p [wat-func/parameters of]
      [wat-list [wat/word [word param]] [wat/dollar [pair/fst p]] [wat/word [pair/snd p]]]]
    [list
      [wat-concat
        [list [wat/word [word result]]]
        [list-map rt [wat-func/result of] [wat/word rt]]]]
    [list-map l [wat-func/locals of]
      [wat-list [wat/word [word local]] [wat/dollar [pair/fst l]] [wat/word [pair/snd l]]]]
    [list
      [wat-inst-to-out [wat-func/body of]]]]]

[defn export-to-wat [p]
  [wat-concat
    [list
      [wat/word [word export]]
      [wat/dqstring [pair/fst p]]
      [let [kind-pair [pair/snd p]]
        [wat-list
          [wat/word
            [match [pair/fst kind-pair]
              [export-kind/func] [word func]
              [export-kind/memory] [word memory]
              [export-kind/global] [word global]
              [logq-abort export-to-wat unknown export kind]]]
          [wat/dollar [pair/snd kind-pair]]]]]]]

[defn output-to-wat [output]
  [wat/seq-lf
    [concat-lists
      [list
        [list-map imp [clone-growable-to-frozen-list [wat-output/imports output]] [import-to-wat imp]]
        [list-map mem [clone-growable-to-frozen-list [wat-output/memories output]] [memory-to-wat mem]]
        [list-map g [clone-growable-to-frozen-list [wat-output/globals output]] [global-to-wat g]]
        [list-map d [clone-growable-to-frozen-list [wat-output/datas output]] [data-to-wat d]]
        [list-map of [clone-growable-to-frozen-list [wat-output/funcs output]] [wat-func-to-wat of]]
        [list-map e [clone-growable-to-frozen-list [wat-output/exports output]] [export-to-wat e]]]]]]

[def ascii-underscore [i32 95]]

[comment wuns does not have underscores so we convert dashes to underscores]

[defn wasm-name-to-wat-byte-array [w]
  [let [sw [word-byte-size w]
        res [byte-array sw]]
    [for i 0 sw
      [byte-array-set res i
        [let [c [char-code-at w i]] [if [eq c [word-to-char-code -]] ascii-underscore c]]]]
    res]]

[defn wat-inst-word [inst-name .. args]
  [wat-inst/inst-word inst-name args]]

[defn wat-inst-drop [i] [wat-inst-word [word drop] i]]

[defn wat-inst-i32.add [a b] [wat-inst-word [word i32.add] a b]]
[defn wat-inst-i32.mul [a b] [wat-inst-word [word i32.mul] a b]]

[defn concat-byte-arrays [byte-arrays]
  [let [total-size
    [loop [i 0 sum 0]
      [if [le-s [size byte-arrays] i]
        sum
        [continue
          sum [add sum [byte-array-size [at byte-arrays i]]]
          i [inc i]]]]
    result [byte-array total-size]]
    [loop [i 0 offset 0]
      [if [le-s [size byte-arrays] i]
        result
        [let [bs [at byte-arrays i]]
          [for j 0 [byte-array-size bs]
            [byte-array-set result [add offset j] [byte-array-get bs j]]]
          [continue
            i [inc i]
            offset [add offset [byte-array-size bs]]]]]]]]
