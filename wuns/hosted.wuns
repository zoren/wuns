[defn type-to-wasm [t]
  [if [is-pointer-type t] [quote i32] t]]

[defn type-to-result [t]
  [if [eq-form type-empty t]
      [quote [result]]
      [list [quote result] [type-to-wasm t]]]]

[defn push-word-chars [mut-list w]
  [for i 0 [size w]
    [push mut-list [char-code-at w i]]]]

[def tag-word 1]
[def tag-list 3]

[defn push-i32-little-endian [mut-list val]
  [loop [i 0 cur val]
    [when [lt-s i 4]
      [push mut-list [bitwise-and cur [const 255]]]
      [continue i [inc i] cur [bitwise-shift-right-unsigned cur [const 8]]]]]]

[def active-mem-start-offset [const 16]]

[defn align-address [x] [bitwise-and [add 3 x] [bitwise-xor -1 3]]]

[defn add-bytes-to-active-mem [ctx bytes]
  [let [offset-atom [getq ctx active-mem-current-offset]
        offset [atom-get offset-atom]
        padded-size [align-address [size bytes]]]
    [atom-set offset-atom [add offset padded-size]]
    [push [getq ctx active-mems] [kv-map offset offset bytes bytes]]
    offset]]

[defn get-or-create-word [ctx w]
  [let [word-map [getq ctx word-map]]
    [if [has word-map w]
      [get word-map w]
      [let [bytes [growable-list]]
        [push-i32-little-endian bytes tag-word]
        [push-i32-little-endian bytes [size w]]
        [push-word-chars bytes w]
        [let [offset [add-bytes-to-active-mem ctx bytes]]
          [set word-map w offset]
          offset]]]]]

[defn get-or-create-form [ctx form]
  [if [is-word form]
    [get-or-create-word ctx form]
    [let [bytes [growable-list]]
      [push-i32-little-endian bytes tag-list]
      [push-i32-little-endian bytes [size form]]
      [for-each element form
        [push-i32-little-endian bytes [recur ctx element]]]
      [add-bytes-to-active-mem ctx bytes]]]]

[defn push-active-data [ctx bytes form]
  [assert [is-list form] push-active-data unknown form [identity form]]
  [assert [not [is-empty form]] push-active-data unknown form [identity form]]
  [let [ff [first form]]
    [ifs
      [eq-word ff [quote i8]]
      [for i 1 [size form]
        [push bytes [dec-word-to-int [at form i]]]]

      [eq-word ff [quote i32]]
      [for i 1 [size form]
        [push-i32-little-endian bytes [dec-word-to-int [at form i]]]]

      [eq-word ff [quote data]]
      [let [rbytes [growable-list]]
        [for i 1 [size form]
          [recur ctx rbytes [at form i]]]
        [push-i32-little-endian bytes [add-bytes-to-active-mem ctx rbytes]]]

      [assert 0 unknown active data form [identity ff]]]]]

[defn add-local [ctx name type]
  [let [locals [getq ctx locals]]
    [assert [not [has locals name]] name must not be defined [identity name]]
    [set locals name type]]]

[defn compile-form [ctx is-tail form]
  [if [is-word form]
    [let [gctx [getq [getq ctx check-result] global-ctx]]
      [if [and [has gctx form] [eq-form [getq [get gctx form] def] [quote def]]]
        [list [quote global.get] [list [quote dollar] form]]
        [list [quote local.get] [list [quote dollar] form]]]]
    [do
      [assert [is-list form] form must be a list]
      [assert [not [is-empty form]] list must not be empty]
      [let [fw [at form 0]]
        [ifs
          [eq-word [quote if] fw]
          [ifs
            [eq 4 [size form]]
            [list fw
              [type-to-result [try-get-node-type form]]
              [recur ctx 0 [at form 1]]
              [list [quote then] [recur ctx is-tail [at form 2]]]
              [list [quote else] [recur ctx is-tail [at form 3]]]]
            [eq 3 [size form]]
            [list fw
              [type-to-result [try-get-node-type form]]
              [recur ctx 0 [at form 1]]
              [list [quote then] [recur ctx is-tail [at form 2]]]]

            [assert 0 ifs unexpected if form [size form] [identity form]]]

          [eq-word [quote quote] fw]
          [let [quoted [if [eq 2 [size form]] [at form 1] [slice form 1 [size form]]]
                offset [get-or-create-form ctx quoted]]
            [list [quote i32.const] [int-to-word offset]]]

          [eq-word [quote active-data] fw]
          [let [bytes [growable-list]]
            [for i 1 [size form]
              [push-active-data ctx bytes [at form i]]]
            [list [quote i32.const] [int-to-word [add-bytes-to-active-mem ctx bytes]]]]

          [eq-word [quote let] fw]
          [let
            [bindings [at form 1]
             res-size [add [div [size bindings] 2] [sub [size form] 2]]
             instructions [mutable-list-of-size res-size]
             offset [sub [div [size bindings] 2] 2]]
            [for-pair i 0 [size bindings]
              [let
                [var [at bindings i]
                 value [at bindings [inc i]]
                 val-type [try-get-node-type value]]
                [assert [not [is-tuple-type val-type]] binding expects a single type]
                [add-local ctx var [type-to-wasm val-type]]
                [set-array instructions [div i 2] [list [quote local.set] [list [quote dollar] var] [recur ctx 0 value]]]]]
            [for i 2 [dec [size form]]
              [set-array instructions [add i offset] [recur ctx 0 [at form i]]]]
            [when [lt-s 2 [size form]]
              [set-array instructions [dec res-size] [recur ctx 1 [last form]]]]
            [list [quote instructions] instructions]]

          [eq-word [quote loop] fw]
          [let
            [bindings [at form 1]
             n-of-instructions [inc [div [size bindings] 2]]
             instructions [mutable-list-of-size n-of-instructions]]
            [for-pair i 0 [size bindings]
              [let
                [var [at bindings i]
                 value [at bindings [inc i]]
                 val-type [try-get-node-type value]
                 wasm-type [type-to-wasm val-type]]
                [assert [not [is-tuple-type val-type]] binding expects a single type]
                [add-local ctx var wasm-type]
                [add-local ctx [concat-words [quote tmp-] var] wasm-type]
                [set-array instructions [div i 2] [list [quote local.set] [list [quote dollar] var] [recur ctx 0 value]]]]]
            [let [n-of-loop-instructions [add [size form] 1]
                  loop-instructions [mutable-list-of-size n-of-loop-instructions]]
              [set-array loop-instructions 0 [quote loop]]
              [set-array loop-instructions 1 [list [quote dollar] [quote loop-lab]]]
              [set-array loop-instructions 2 [type-to-result [try-get-node-type [last form]]]]
              [for i 2 [dec [size form]]
                [set-array loop-instructions [inc  i] [recur ctx 0 [at form i]]]]
              [set-array loop-instructions [dec n-of-loop-instructions] [recur ctx 1 [last form]]]
              [set-array instructions [dec n-of-instructions] loop-instructions]]
            [list [quote instructions] instructions]]

          [eq-word [quote continue] fw]
          [let
            [n-of-vars [div [dec [size form]] 2]
             init-tmp [mutable-list-of-size n-of-vars]
             tmp-copy [mutable-list-of-size n-of-vars]]
            [for-pair i 1 [size form]
              [let
                [var [at form i]
                 tmp-var [concat-words [quote tmp-] var]
                 value [at form [inc i]]
                 index [div [dec i] 2]]
                [set-array init-tmp index
                  [list [quote local.set] [list [quote dollar] tmp-var] [recur ctx 0 value]]]
                [set-array tmp-copy index
                  [list [quote local.set] [list [quote dollar] var]
                    [list [quote local.get] [list [quote dollar] tmp-var]]]]]]
            [list [quote instructions]
              [concat
                init-tmp
                tmp-copy
                [list [list [quote br] [list [quote dollar] [quote loop-lab]]]]]]]

          [do
            [if [has instructions-by-name fw]
              [let [instruction [get instructions-by-name fw]
                    imm-parameters [getq instruction immediate-parameters]]
                [ifs
                  [eq-form imm-parameters imm-memargs]
                  [let [memargs [try-get-node-type [at form 1]]
                        res [mutable-list-of-size [add 4 [size [getq instruction parameters]]]]]
                    [set-array res 0 [list [quote raw] [getq instruction wat-name]]]
                    [set-array res 1 [getq memargs mem]]
                    [set-array res 2 [list [quote eq-pair] [quote offset] [getq memargs offset]]]
                    [set-array res 3 [list [quote eq-pair] [quote align] [getq memargs align]]]
                    [for i 2 [size form]
                      [set-array res [add 2 i] [recur ctx 0 [at form i]]]]
                    res]

                  [let [res [mutable-list-of-size [inc [getq instruction arity]]]]
                    [set-array res 0 [list [quote raw] [getq instruction wat-name]]]
                    [for i 1 [inc [size imm-parameters]]
                      [set-array res i [at form i]]]
                    [for i [inc [size imm-parameters]] [size form]
                      [set-array res i [recur ctx 0 [at form i]]]]
                    res]]]
              [let [res [mutable-list-of-size [inc [size form]]]]
                [set-array res 0 [quote call]]
                [set-array res 1 [list [quote dollar] fw]]
                [for i 1 [size form]
                  [set-array res [inc i] [recur ctx 0 [at form i]]]]
                res]]]]]]]]

[defn compile-top-form [ctx form]
  [if [is-word form]
    []
    [do
      [assert [is-list form] list must be a list]
      [assert [not [is-empty form]] a list must not be empty]
      [let [fw [at form 0]]
        [assert [is-word fw] first element of a list must be a word]
        [ifs
          [eq-word [quote import] fw]
          [let [module-name [at form 1]
                name [at form 2]
                t [at form 3]]
              [list [quote import] [list [quote dq-string] module-name] [list [quote dq-string] name]
                [if [eq-word [first t] [quote memory]]
                  t
                  [list [quote func] [list [quote dollar] name] [concat [quote [param]] [second t]] [concat [quote [result]] [third t]]]]]]

          [eq-word [quote def] fw]
          [let [name [at form 1]
                value [at form 2]]
              [list [quote global]
                [list [quote dollar] name]
                [list [quote export] [list [quote dq-string] name]]
                [type-to-wasm [try-get-node-type value]]
                [compile-form ctx 1 value]]]

          [eq-word [quote defn] fw]
          [let [fname [at form 1]
                params [at form 2]
                locals [getq ctx locals]
                n-of-bodies [sub [size form] 3]
                wasm-bodies [mutable-list-of-size n-of-bodies]
                last-body [at form -1]]
            [delete-all-keys locals]
            [assert [is-word fname] second element of a list must be a word]
            [assert [is-list params] third element of a list must be a list]
            [for i 3 [dec [size form]]
              [let [body [at form i]
                    cbody [compile-form ctx 0 body]]
                [set-array wasm-bodies [sub i 3] [if [is-atomic-type [try-get-node-type body]] [list [quote drop] cbody] cbody]]]]
            [when n-of-bodies
              [set-array wasm-bodies [dec [size wasm-bodies]] [compile-form ctx 1 last-body]]]
            [concat
              [list [quote func] [list [quote dollar] fname] [list [quote export] [list [quote dq-string] fname]]]
              [list-map param params
                [list [quote param]
                  [list [quote dollar] param]
                  [try-get-node-type param]]]
              [list [type-to-result [if n-of-bodies [try-get-node-type last-body] type-empty]]]
              [list-map local [keys locals]
                [list [quote local]
                  [list [quote dollar] local]
                  [get locals local]]]
              wasm-bodies]]

          [eq-word [quote quote] fw]
          [list]

          [assert 0 compile-top-form unknown top form]]]]]]

[defn is-printable-ascii [c]
  [and [le-s [const 32] c] [lt-s c [const 127]]]]

[defn int-to-hex-ascii [i]
  [if [lt-s i [const 10]]
    [add i [const 48]]
    [add [sub i [const 10]] [const 97]]]]

[def ascii-line-feed [const 10]]
[def ascii-space [const 32]]
[def ascii-double-quote [const 34]]
[def ascii-dollar [const 36]]
[def ascii-left-paren [const 40]]
[def ascii-right-paren [const 41]]
[def ascii-equal [const 61]]
[def ascii-backslash [const 92]]

[defn print-paren-recursive-form [mut-list form]
  [ifs
    [is-word form]
    [push-word-chars mut-list form]

    [is-list form]
    [let [s [size form]]
      [ifs
        [eq s 0]
        [do]

        [and [eq s 3] [eq-word [first form] [quote eq-pair]]]
        [do
          [push-word-chars mut-list [second form]]
          [push mut-list ascii-equal]
          [push-word-chars mut-list [third form]]]

        [and [eq s 2] [eq-word [first form] [quote dollar]]]
        [do
          [push mut-list ascii-dollar]
          [push-word-chars mut-list [second form]]]

        [and [eq s 2] [eq-word [first form] [quote dq-string]]]
        [do
          [push mut-list ascii-double-quote]
          [push-word-chars mut-list [second form]]
          [push mut-list ascii-double-quote]]

        [and [eq s 2] [eq-word [first form] [quote dq-string-bytes]]]
        [do
          [push mut-list ascii-double-quote]
          [for-each c [second form]
            [if [and [is-printable-ascii c] [not [eq c ascii-double-quote]] [not [eq c ascii-backslash]]]
              [push mut-list c]
              [do
                [assert [not [is-negative c]] c must be positive]
                [assert [lt-s c [const 256]] c must be less than 256]
                [push mut-list ascii-backslash]
                [push mut-list [int-to-hex-ascii [div c [const 16]]]]
                [push mut-list [int-to-hex-ascii [rem c [const 16]]]]]]]
          [push mut-list ascii-double-quote]]

        [and [eq s 2] [eq-word [first form] [quote raw]]]
        [push-all mut-list [second form]]

        [and [eq s 2] [eq-word [first form] [quote instructions]]]
        [for-each instruction [second form]
          [recur mut-list instruction]]

        [do
          [push mut-list ascii-left-paren]
          [when [lt-s 0 s]
            [recur mut-list [at form 0]]
            [for i 1 s
              [push mut-list ascii-space]
              [recur mut-list [at form i]]]]
          [push mut-list ascii-right-paren]]]]

    [do [log [list [quote print-paren-recursive-form unknown node] form]]
      [unreachable]]]]

[defn compile-top-forms-to-text [forms]
  [let [e-forms [expand-top-level-forms forms]
        - [when [size errors]
            [for-each error errors
              [log [list [getq error message] [try-get-range [getq error form]]]]]
            [unreachable]]
        check-result [check-top-forms e-forms]
        errors [getq check-result errors]
        mut-list [growable-list]
        active-mems [growable-list]
        active-mem-current-offset [atom active-mem-start-offset]
        ctx [kv-map active-mems active-mems active-mem-current-offset active-mem-current-offset
                    check-result check-result
                    word-map [transient-kv-map] list-map [transient-kv-map] locals [transient-kv-map]]]
    [for-each error errors
      [log error]]
    [when-not [is-empty errors]
      [unreachable]]
    [for-each form e-forms
      [print-paren-recursive-form mut-list [compile-top-form ctx form]]
      [push mut-list ascii-line-feed]]
    [delete-all-keys node-types]
    [for-each active-mem active-mems
      [print-paren-recursive-form mut-list
        [list [quote data] [list [quote i32.const] [int-to-word [getq active-mem offset]]]
          [list [quote dq-string-bytes] [getq active-mem bytes]]]]
      [push mut-list ascii-line-feed]]
    [print-paren-recursive-form mut-list
      [list [quote global] [quote dollar wuns-active-mem-top] [quote i32]
        [list [quote i32.const] [int-to-word [atom-get active-mem-current-offset]]]]]
    mut-list]]
