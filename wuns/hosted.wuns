[defn type-to-result [t]
  [if [eq-form type-empty t]
      [list [quote result]]
      [list [quote result] t]]]

[defn compile-form [ctx is-tail form]
  [ifs
    [is-word form]
    []

    [is-list form]
    [do
      [assert [not [is-empty form]] a list must not be empty]
      [let [fw [at form 0]
            instruction [try-get-instruction fw]]
        [ifs
          [eq-word [quote if] fw]
          [let [cond [at form 1]
                then [at form 2]
                else [at form 3]]
            [list [quote if]
              [type-to-result [try-get-node-type form]]
              [compile-form ctx 0 cond]
              [list [quote then] [compile-form ctx is-tail then]]
              [list [quote else] [compile-form ctx is-tail else]]]]

          instruction
          [let [imm-parameters [getq instruction immediate-parameters]]
            [if [eq-form imm-parameters imm-memargs]
              [let [memargs [try-get-node-type [at form 1]]]
                [concat
                  [list fw [getq memargs mem]
                    [list [quote eq-pair] [quote offset] [getq memargs offset]]
                    [list [quote eq-pair] [quote align] [getq memargs align]]]
                  [loop [i 2 res [mutable-list]]
                    [if [lt i [size form]]
                      [do
                        [push res [compile-form ctx 0 [at form i]]]
                        [continue i [inc i]]]
                      res]]]]
              form]]
          [assert 0 not an instruction]]
        ]]

    [do [log [quote unknown form]]
      [unreachable]]]]

[defn compile-top-form [form]
  [check-top-form form]
  [ifs
    [is-word form]
    []

    [is-list form]
    [do
      [assert [not [is-empty form]] a list must not be empty]
      [let [fw [at form 0]]
        [assert [is-word fw] first element of a list must be a word]
        [ifs
          [eq-word [quote import] fw]
          [let [module-name [at form 1]
                name [at form 2]
                t [at form 3]]

              [list [quote import] [list [quote dq-string] module-name] [list [quote dq-string] name] t]
              ]

          [eq-word [quote defn] fw]
          [let [fname [at form 1]
                params [at form 2]
                wasm-params [list]
                wasm-bodies [mutable-list]
                ctx []
                last-body [at form -1]
                res-type [try-get-node-type last-body]]
            [assert [is-word fname] second element of a list must be a word]
            [assert [is-list params] third element of a list must be a list]
            [for-each body [slice form 3 [dec [size form]]]
              [let [t [try-get-node-type body]]
                [push wasm-bodies [if [is-atomic-type t] [list [quote drop] [compile-form ctx 0 body]] [compile-form ctx 0 body]]]]]
            [push wasm-bodies [compile-form ctx 1 last-body]]
            [concat
              [list [quote func] [list [quote export] [list [quote dq-string] fname]]]
              wasm-params
              [list [type-to-result res-type]]
              wasm-bodies]]

          [assert 0 sdf sdfsdf ]]]]

    [do [log [quote unknown form]]
      [unreachable]]]]

[defn print-paren-recursive-form [mut-list form]
  [ifs
    [is-word form]
    [for i 0 [size form]
      [push mut-list [at-word form i]]]

    [is-list form]
    [let [s [size form]]
      [ifs
        [and [eq s 3] [eq-word [first form] [quote eq-pair]]]
        [let [k [second form]
              v [third form]]
          [for i 0 [size k]
            [push mut-list [at-word k i]]]
          [push mut-list [const 61]]
          [for i 0 [size v]
            [push mut-list [at-word v i]]]]

        [and [eq s 2] [eq-word [first form] [quote dq-string]]]
        [let [sf [second form]]
          [push mut-list [const 0x22]]
          [for i 0 [size sf]
            [push mut-list [at-word sf i]]]
          [push mut-list [const 0x22]]]

        [do
          [push mut-list [const 40]]
          [when [lt 0 s]
            [print-paren-recursive-form mut-list [at form 0]]
            [for i 1 s
              [push mut-list [const 32]]
              [print-paren-recursive-form mut-list [at form i]]]]
          [push mut-list [const 41]]]]]

    [do [log [list [quote unknown node] form ]]
      [unreachable]]]]

[defn print-paren-form [form]
  [let [mut-list [mutable-list]]
    [print-paren-recursive-form mut-list form]
    mut-list]]
