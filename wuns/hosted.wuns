[defn type-to-result [t]
  [if [eq-form type-empty t]
      [quote [result]]
      [list [quote result] t]]]

[defn compile-form [ctx is-tail form]
  [if [is-word form]
    [let [sig [try-get-global-sig form]]
      [if [and sig [hasq sig def] [eq-form [getq sig def] [quote constant]]]
        [list [quote global.get] [list [quote dollar] form]]
        [list [quote local.get] [list [quote dollar] form]]]]
    [do
      [assert [is-list form] form must be a list]
      [assert [not [is-empty form]] list must not be empty]
      [let [fw [at form 0]]
        [ifs
          [eq-word [quote if] fw]
          [list fw
            [type-to-result [try-get-node-type form]]
            [compile-form ctx 0 [at form 1]]
            [list [quote then] [compile-form ctx is-tail [at form 2]]]
            [list [quote else] [compile-form ctx is-tail [at form 3]]]]

          [let [instruction [try-get-instruction fw]]
            [assert instruction not an instruction]
            [let [imm-parameters [getq instruction immediate-parameters]]
              [ifs
                [eq-form imm-parameters imm-memargs]
                [let [memargs [try-get-node-type [at form 1]]]
                  [concat
                    [list fw [getq memargs mem]
                      [list [quote eq-pair] [quote offset] [getq memargs offset]]
                      [list [quote eq-pair] [quote align] [getq memargs align]]]
                    [loop [i 2 res [mutable-list]]
                      [if [lt i [size form]]
                        [do
                          [push res [compile-form ctx 0 [at form i]]]
                          [continue i [inc i]]]
                        res]]]]

                [not [is-empty imm-parameters]]
                form

                [loop [i 1 res [mutable-list]]
                  [if [lt i [size form]]
                    [do
                      [push res [compile-form ctx 0 [at form i]]]
                      [continue i [inc i]]]
                    [concat [list fw] res]]]]]]]]]]]

[defn compile-top-form [form]
  [check-top-form form]
  [if [is-word form]
    []

    [do
      [assert [is-list form] list must be a list]
      [assert [not [is-empty form]] a list must not be empty]
      [let [fw [at form 0]]
        [assert [is-word fw] first element of a list must be a word]
        [ifs
          [eq-word [quote import] fw]
          [let [module-name [at form 1]
                name [at form 2]
                t [at form 3]]
              [list [quote import] [list [quote dq-string] module-name] [list [quote dq-string] name] t]]

          [eq-word [quote constant] fw]
          [let [name [at form 1]
                value [at form 2]]
              [list [quote global]
                [list [quote dollar] name]
                [list [quote export] [list [quote dq-string] name]]
                [try-get-node-type value]
                [compile-form [] 1 value]]]

          [eq-word [quote defn] fw]
          [let [fname [at form 1]
                params [at form 2]
                wasm-params [mutable-list]
                wasm-bodies [mutable-list]
                ctx []
                last-body [at form -1]]
            [assert [is-word fname] second element of a list must be a word]
            [assert [is-list params] third element of a list must be a list]
            [for-each param params
              [push wasm-params
                [list [quote param]
                  [list [quote dollar] param]
                  [try-get-node-type param]]]]
            [for i 3 [dec [size form]]
              [let [body [at form i]
                    cbody [compile-form ctx 0 body]]
                [push wasm-bodies [if [is-atomic-type [try-get-node-type body]] [list [quote drop] cbody] cbody]]]]
            [push wasm-bodies [compile-form ctx 1 last-body]]
            [concat
              [list [quote func] [list [quote export] [list [quote dq-string] fname]]]
              wasm-params
              [list [type-to-result [try-get-node-type last-body]]]
              wasm-bodies]]

          [assert 0 sdf sdfsdf ]]]]]]

[defn push-word-chars [mut-list w]
  [for i 0 [size w]
    [push mut-list [at-word w i]]]]

[defn print-paren-recursive-form [mut-list form]
  [ifs
    [is-word form]
    [push-word-chars mut-list form]

    [is-list form]
    [let [s [size form]]
      [ifs
        [and [eq s 3] [eq-word [first form] [quote eq-pair]]]
        [do
          [push-word-chars mut-list [second form]]
          [push mut-list [const 61]]
          [push-word-chars mut-list [third form]]]

        [and [eq s 2] [eq-word [first form] [quote dollar]]]
        [do
          [push mut-list [const 0x24]]
          [push-word-chars mut-list [second form]]]

        [and [eq s 2] [eq-word [first form] [quote dq-string]]]
        [do
          [push mut-list [const 0x22]]
          [push-word-chars mut-list [second form]]
          [push mut-list [const 0x22]]]

        [do
          [push mut-list [const 40]]
          [when [lt 0 s]
            [print-paren-recursive-form mut-list [at form 0]]
            [for i 1 s
              [push mut-list [const 32]]
              [print-paren-recursive-form mut-list [at form i]]]]
          [push mut-list [const 41]]]]]

    [do [log [list [quote unknown node] form ]]
      [unreachable]]]]

[defn print-paren-form [form]
  [let [mut-list [mutable-list]]
    [print-paren-recursive-form mut-list form]
    mut-list]]
