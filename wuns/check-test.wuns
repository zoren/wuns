[if [] [] []]
[if [quote 0] [quote 1]]
[if [quote 0] [quote 1] []]
[if [quote 2] [tuple [quote 2] [quote 2]] [tuple [quote 3]]]
[if [quote 2] [tuple [quote 2] [quote 2]]]
[if [quote 0] [quote 0] [quote 0] [quote 0]]

[if]
[if [quote 0]]
[if [quote 0] []]
[if [quote 0] [quote 1] [quote 2]]
[if [quote 0] [tuple] []]
[if [quote 0] [tuple [quote 1] [quote 2]] [tuple [quote 3] [quote 4]]]

[let ]
[let let]
[let [x [quote 4] y] []]
[let [y x x [quote 4]] []]
[let [] [if []]]

[let [quote [quote 3]] [quote 4]]
[let [x [quote 3]]]
[let [x [quote 4] y x] []]

[continue]
[let [] [continue]]
[loop [] [continue] []]
[loop [] [if [continue] [] []]]
[loop [] [if [quote 0] [continue] [continue]]]
[loop [] [let [] [continue] []]]

[loop [] [continue [quote 3]]]
[loop [x [quote 0]] [continue]]
[loop [x [quote 0]] [continue [quote 3] [quote 3]]]

[loop [] [if [quote 0] [] []]]
[loop [] [let [] [] [continue]]]
[loop [x [quote 0]] [continue [quote 3]]]
[loop [] [quote 3]]
[loop [] [continue]]

[add [quote 4]]
[add [quote 4]]
[add [quote 3] [quote 4] [quote 5]]
[add [] []]

[add [quote 3] [quote 4]]

[func]
[func f]
[func [] d]
[func d p]
[func f [p p] []]
[func f [p] q]
[func f [-] -]
[func f [..] ..]
[func f [.. -] -]

[func list [.. l] l]
[func dont-care [- -] []]
[dont-care [] []]
[func dont-care-2 [- - .. -] []]
[func dont-care-at-all [.. -] []]
[dont-care-at-all]
[dont-care-at-all []]
[dont-care-at-all [] [] []]
[func d []]
[func f [p] [add [quote 3] [quote 4]]]
[func f1 [p] [add p [quote 4]]]
[func f2 [p q] [add p q]]
[func g [] [f [quote 3]]]

[func g1 [] [f [quote 3] [quote 4]]]
[func g1 [] [f]]
[dont-care]
[dont-care []]
[dont-care-2]
[dont-care-2 []]

[dont-care-2 [] [] []]

[macro comment [.. -] []]
[comment]
[comment [func f [p] [add p [quote 4]]]]
[comment
[external-func is-word [form] [i32]]
[external-func is-list [form] [i32]]
[external-func meta [form] [form]]
[external-func with-meta [form form] [form]]
[external-func size [form] [i32]]
[external-func at [form i32] [form]]
[external-func slice [list i32 i32] [list]]

[external-func mutable-list [] [mutable-list]]
[external-func push [mutable-list form] []]
[external-func set-array [mutable-list i32 form] []]
[external-func freeze [mutable-list] [list]]

[external-func gensym [] [word]]
[external-func log [form] []]
[external-func abort [] []]

[external-func concat-words [list] [word]]
[external-func eval [form] [form]]

[func list [.. l] l]

[func push-type-to-meta [f t]
  [let [mut-list [mutable-list]
        m [meta f]
        s-l [size m]]
    [loop [i [quote 0]]
      [if [lt i s-l]
        [let []
          [push mut-list [at list i]]
          [continue i [inc i]]]
        []]]
    [push mut-list [quote type]]
    [push mut-list t]
    [with-meta f [freeze mut-list]]]]

[macro with-type [p t] [list [quote push-type-to-meta] [list [quote quote] p] [list [quote quote] t]]]
]
[macro constant-ids [.. [with-type id-constants word]]
  [let [f [mutable-list]]
    [push f [quote let]]
    [push f []]
    [loop [i [quote 0]]
      [if [lt i [size id-constants]]
        [let [name [at id-constants i]]
          [push f [list [quote constant] name [list [quote quote] name]]]
          [continue i [add i [quote 1]]]]
        f]]]]

[func f [p] [size p]]
[comment [func f [p] [size p]]]
[func push-all [mut-list list]
  [let [s-l [size list]]
    [loop [i [quote 0]]
      [if [lt i s-l]
        [let []
          [push mut-list [at list i]]
          [continue i [inc i]]]
        []]]]]
