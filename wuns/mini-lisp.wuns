[let
  [0 [i32 0]
   1 [i32 1]
   trec
    [func go [n res]
      [if n
        [recur [sub n 1] [add res n]]
        res]]
   tail-gauss [func tail-gauss [n] [trec n 0]]
   recursive-gauss
    [func go [n]
      [if n
        [add n [recur [sub n 1]]]
        0]]
    time-f [func time-f [f n]
      [let
        [start [performance-now]
         res [f n]
         end [performance-now]]
        [log n res [sub end start]]]]
    for-each
    [func for-each [f l]
      [let [n [size l]]
        [[func go [i]
          [if [lt i n]
            [do
              [f [at l i]]
              [recur [add i 1]]]
            [do]]] 0]]]
    ns [list
        [i32 10]
        [i32 100]
        [i32 1000]
        [i32 10000]
        [i32 65535]]
    ]
  [for-each [func do [n] [time-f tail-gauss n]] ns]
    ]
