[let
  [0 [i32 0]
   1 [i32 1]
   trec
    [func go [n res]
      [if [lt n 1]
        res
        [recur [sub n 1] [add res n]]]]
   tail-gauss [func tail-gauss [n] [trec n 0]]
   recursive-gauss
    [func go [n]
      [if [lt n 1]
        0
        [add n [recur [sub n 1]]]]]
    time-f [func time-f [f n]
      [let
        [start [performance-now]
         res [f n]
         end [performance-now]]
        [log n res [sub end start]]]]]

  [do
    [log [i32 10] [tail-gauss [i32 10]]]
    [log [i32 100] [tail-gauss [i32 100]]]
    [log [i32 1000] [tail-gauss [i32 1000]]]
    [log [i32 10000] [tail-gauss [i32 10000]]]
    [log [i32 65535] [tail-gauss [i32 65535]]]

    [log [i32 1337]]

    [log [i32 10] [recursive-gauss [i32 10]]]

    [time-f tail-gauss [i32 4000]]
    [time-f recursive-gauss [i32 4000]]

    ]]
