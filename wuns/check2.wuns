[load ast-bind.wuns]

[type function-kind []
  [union
    [ctor]
    [func]
    [macro]
    [fexpr]]]

[type
  type-var-kind []
  [union
    [linked ctype]
    [word word]]

  type-var []
  [record
    [kind [atom type-var-kind]]
    [level [atom i32]]]

  func-type []
  [record
    [params [list ctype]]
    [rest-param-opt [option ctype]]
    [result ctype]
    [kind function-kind]]

  inst-type []
  [union
    [func func-type]
    [apply word [list ctype]]]

  ctype []
  [union
    [var type-var]
    [inst inst-type]]]

[type type-def []
  [record
    [arity i32]
    [param-map [transient-kv-map word ctype]]
    [result-type ctype]]]

[type check-type-scheme []
  [record
    [type-vars [list type-var]]
    [type ctype]]]

[defn make-type-list [type-name type-args] [ctype/inst [inst-type/apply type-name type-args]]]

[defn make-type [type-name .. type-args] [make-type-list type-name type-args]]

[def type-i32 [make-type [word i32]]]
[def type-f64 [make-type [word f64]]]

[def type-word [make-type [word word]]]

[def type-form [make-type [word form]]]

[defn type-list [elem-type] [make-type [word list] elem-type]]
[defn type-atom [elem-type] [make-type [word atom] elem-type]]

[def type-empty-tuple [make-type [word tuple]]]

[defn type-func [params opt-rest-param result]
  [ctype/inst [inst-type/func [func-type params opt-rest-param result [function-kind/func]]]]]

[defn type-func-no-rest [params result] [type-func params [none] result]]

[def i32i32-to-i32 [type-func-no-rest [list type-i32 type-i32] type-i32]]
[def f64f64-to-f64 [type-func-no-rest [list type-f64 type-f64] type-f64]]
[def f64f64-to-i32 [type-func-no-rest [list type-f64 type-f64] type-i32]]

[defn type-ctor [params result]
  [ctype/inst [inst-type/func [func-type params [none] result [function-kind/ctor]]]]]

[defn get-type-var-kind [type-var]
  [atom-get [type-var/kind type-var]]]

[defn set-type-var-kind-to-type [type-var type]
  [atom-set [type-var/kind type-var] [type-var-kind/linked type]]]

[comment normalize a type make type variable point directly to the linked type - if any]
[defn normalize-type [t0]
  [match t0
    [ctype/var tv]
    [match [get-type-var-kind tv]
      [type-var-kind/word w] t0
      [type-var-kind/linked linked-t]
      [let [t2 [normalize-type linked-t]]
        [set-type-var-kind-to-type tv t2]
        t2]]
    t0]]

[defn member-type-var-list [set t]
  [todo can we just use set-has here]
  [[func member-type-var-list-go [i]
    [if [lt-s i [size set]]
      [if [is-identical [at set i] t]
        1
        [member-type-var-list-go [inc i]]]
      0]] 0]]

[defn free-type-vars [t]
  [let
    [ftvs [set]
     go
     [func go [t]
      [let [nt [normalize-type t]]
        [match nt
          [ctype/var tv]
          [when-not [set-has ftvs tv]
            [set-add ftvs tv]]

          [ctype/inst inst-type]
          [match inst-type
            [inst-type/func ft]
            [do
              [for-each param [func-type/params ft]
                [go param]]
              [when-let [rest [func-type/rest-param-opt ft]]
                [go rest]]
              [go [func-type/result ft]]]

            [inst-type/apply type-name type-args]
            [for-each arg type-args
              [go arg]]]]]]]
    [go t]
    [set-to-list ftvs]]]

[defn prune-level [max-level tvs]
  [for-each tv tvs
    [let [tvla [type-var/level tv]]
      [atom-set tvla [min [atom-get tvla] max-level]]]]]

[defn get-type-var-level [tv]
  [atom-get [type-var/level tv]]]

[defn link-var-to-type [type-var type]
  [let
    [level [get-type-var-level type-var]
     fvs [free-type-vars type]]
    [todo report instead of assert]
    [assert [not [member-type-var-list fvs type-var]] type-var occurs in type]
    [prune-level level fvs]
    [set-type-var-kind-to-type type-var type]]]

[defn unify [outer-t1 outer-t2]
  [let
    [errors [growable-list]
     push-unify-error
     [func push-unify-error [msg] [push errors msg]]
     go
     [func go [t1 t2]
      [let [nt1 [normalize-type t1]
            nt2 [normalize-type t2]]
        [match nt1
          [ctype/var tv1]
          [match nt2
            [ctype/var tv2]
            [when-not [is-identical tv1 tv2]
              [if [lt-s [get-type-var-level tv1] [get-type-var-level tv2]]
                [link-var-to-type tv1 nt2]
                [link-var-to-type tv2 nt1]]]

            [ctype/inst inst-type2]
            [link-var-to-type tv1 nt2]]

          [ctype/inst inst-type1]
          [match nt2
            [ctype/var tv2]
            [link-var-to-type tv2 nt1]

            [ctype/inst inst-type2]
            [match inst-type1
              [inst-type/func ft1]
              [match inst-type2
                [inst-type/func ft2]
                [let [type-args1 [func-type/params ft1] type-args2 [func-type/params ft2]
                      s1 [size type-args1] s2 [size type-args2]]
                  [for i 0 [min s1 s2]
                    [go [at type-args1 i] [at type-args2 i]]]
                  [when [not [eq s1 s2]]
                    [if [lt-s s1 s2]
                      [if-let [rest1 [func-type/rest-param-opt ft1]]
                        [for i s1 s2
                          [go rest1 [at type-args2 i]]]
                        [push-unify-error [quote [not unifiable - different number of parameters]]]]
                      [if-let [rest2 [func-type/rest-param-opt ft2]]
                        [for i s2 s1
                          [go [at type-args1 i] rest2]]
                        [push-unify-error [quote [not unifiable - different number of parameters]]]]]]
                  [go [func-type/result ft1] [func-type/result ft2]]]

                [push-unify-error [quote [not unifiable - different types 0]]]]

              [inst-type/apply type-name1 type-args1]
              [match inst-type2
                [inst-type/apply type-name2 type-args2]
                [if [eq-word type-name1 type-name2]
                  [if [eq [size type-args1] [size type-args2]]
                    [for i 0 [size type-args1]
                      [go [at type-args1 i] [at type-args2 i]]]
                    [push-unify-error [quote [not unifiable - different number of type arguments]]]]
                  [do
                    [push-unify-error [quote [not unifiable - different types]]]]]

                [do
                  [push-unify-error [quote [not unifiable - different types]]]]]]]]]]]
    [go outer-t1 outer-t2]
    [clone-growable-to-frozen-list errors]]]

[defn int-to-type-var-name [i]
  [if [lt-s i [i32 26]]
    [char-code-to-word [add [i32 97] i]]
    [concat-words
      [int-to-type-var-name [i32.div-s i [i32 26]]]
      [char-code-to-word [add [i32 97] [i32.rem-s i [i32 26]]]]]]]

[defn make-type-var [kind level]
  [type-var [atom kind] [atom level]]]

[defn generate-fresh-type-var-atom [counter-atom level]
  [ctype/var [make-type-var [type-var-kind/word [int-to-type-var-name [inc-atom counter-atom]]] level]]]

[defn mk-empty-type-scheme [type] [check-type-scheme [list] type]]

[defn generalize [current-level type]
  [let [tvs [growable-list]
        ftvs [free-type-vars type]]
    [for-each tv ftvs
      [if [lt-s current-level [get-type-var-level tv]]
        [push tvs tv]
        [comment [logq tv not generalized [identity tv]]]
        ]]
    [let [fftvs [clone-growable-to-frozen-list tvs]]
      [check-type-scheme fftvs type]]]]

[defn generalize-top [type] [generalize 0 type]]

[defn try-get-assoc-identical [assoc-list var]
  [[func try-get-assoc-identical-go [i]
    [if [lt-s i [size assoc-list]]
      [let [p [at assoc-list i]]
        [if [is-identical var [pair/fst p]]
          [some [pair/snd p]]
          [try-get-assoc-identical-go [inc i]]]]
      [none]]]
    0]]

[defn copy-type [subst-map t]
  [match t
    [ctype/var tv]
    [if-let [subst-type [try-get-assoc-identical subst-map tv]]
      subst-type
      [match [get-type-var-kind tv]
        [type-var-kind/word w] t
        [type-var-kind/linked linked-t] [copy-type subst-map linked-t]]]

    [ctype/inst inst-type]
    [match inst-type
      [inst-type/func ft]
      [ctype/inst
        [inst-type/func
          [func-type
            [list-map param [func-type/params ft] [copy-type subst-map param]]
            [if-let [rest [func-type/rest-param-opt ft]]
              [some [copy-type subst-map rest]]
              [none]]
            [copy-type subst-map [func-type/result ft]]
            [func-type/kind ft]]]]

      [inst-type/apply type-name type-args]
      [ctype/inst [inst-type/apply type-name [list-map arg type-args [copy-type subst-map arg]]]]]]]

[defn specialize-type-scheme [counter-atom level scheme]
  [let [subst-assoc-list
        [list-map tv [check-type-scheme/type-vars scheme]
          [pair tv [generate-fresh-type-var-atom counter-atom level]]]]
    [copy-type subst-assoc-list [check-type-scheme/type scheme]]]]

[defn make-local-context [var-values lstack kind]
  [local-stack/frame lstack [local-context var-values kind]]]

[defn try-get-local-var-type [local-ctx var-name]
  [try-get-local local-ctx var-name]]

[defn instantiate-syntax-type [type-var-env outer-syntax-type]
  [[func go [syntax-type]
    [match syntax-type
      [btype/var tv]
      [get type-var-env [syntax-word/word tv]]

      [btype/apply type-name targs]
      [switch [syntax-word/word type-name]
        [[word i32]]
        type-i32

        [[word f64]]
        type-f64

        [[word word]]
        type-word

        [make-type-list [syntax-word/word type-name] [list-map ta targs [go ta]]]]

      [btype/func reg-params opt-rest-param result]
      [type-func
        [list-map param reg-params [go param]]
        [if-let [rest-param opt-rest-param]
          [some [go rest-param]]
          [none]]
        [go result]]]]
    outer-syntax-type]]

[defn instantiate-syntax-type-scheme [counter-atom level syntax-type-scheme]
  [let [type-var-env [transient-kv-map]]
    [for-each tv [btype-scheme/type-params syntax-type-scheme]
      [set-kv-map type-var-env [syntax-word/word tv] [generate-fresh-type-var-atom counter-atom level]]]
    [instantiate-syntax-type type-var-env [btype-scheme/type syntax-type-scheme]]]]

[defn literal-to-type [l]
  [match l
    [literal/i32 -] type-i32
    [literal/f64 -] type-f64
    [literal/word -] type-word]]

[defn intrinsic-name-to-type [name]
  [ifs
    [is-i32-bin-inst name]
    i32i32-to-i32

    [is-f64-bin-inst name]
    f64f64-to-f64

    [is-f64-comp-inst name]
    f64f64-to-i32

    [eq-word name [word unreachable]]
    [logq-abort unreachable not implemented]

    [logq-abort intrinsic-name-to-type not implemented]]]

[type check-message []
  [record
    [message form]
    [opt-node [option syntax-node]]]]

[defn log-check-message [error]
  [if-let [node [check-message/opt-node error]]
    [log-node-location node]
    [logq no location]]
  [log [check-message/message error]]]

[type check-context []
  [record
    [messages [growable-list check-message]]
    [def-var-types [transient-kv-map word check-type-scheme]]
    [type-var-counter [atom i32]]
    [types [transient-kv-map word type-def]]
    [syntax-info syntax-info]
    [type-annotations [transient-kv-map js-value ctype]]]]

[defn make-global-context-from-syntax-info [syntax-info]
  [check-context
    [growable-list]
    [transient-kv-map]
    [atom 0]
    [transient-kv-map]
    syntax-info
    [transient-kv-map]]]

[defn report-fn [gctx message opt-location]
  [push [check-context/messages gctx] [check-message message opt-location]]]

[defn report-sword [gctx sw message]
  [push [check-context/messages gctx] [check-message message [syntax-word/node sw]]]]

[defn generate-fresh-type-var [gctx level]
  [generate-fresh-type-var-atom [check-context/type-var-counter gctx] level]]

[defn try-get-var-type [gctx local-ctx var-name]
  [if-let [ltype [try-get-local-var-type local-ctx var-name]]
    [some ltype]
    [try-get [check-context/def-var-types gctx] var-name]]]

[defn try-get-node [gctx bst]
  [let [info [check-context/syntax-info gctx]
        opt-form [[syntax-info/try-get-form info] [to-js-value bst]]]
    [if-let [form opt-form]
      [try-get-syntax-node form]
      [logq-abort try-get-node no form]]]]

[defn unify-report [gctx t1 t2 bst]
  [let [opt-node [try-get-node gctx bst]]
    [for-each error [unify t1 t2]
      [report-fn gctx error opt-node]]]]

[defn is-syntactic-value [bform]
  [match bform
    [bexp/literal l] 1
    [bexp/func f] 1
    [bexp/var f] 1
    [bexp/extern f] 1
    [bexp/type-anno f ts] [is-syntactic-value f]
    0]]

[defn annotate [gctx bst type]
  [set-kv-map [check-context/type-annotations gctx] [to-js-value bst] type]
  type]

[type checker []
  [record
    [check-exp [func [bexp] ctype]]
    [check-top [func [btop] [tuple]]]]]

[defn make-checker [gctx]
  [letfn [
    [func go-forms [level lctx sub-forms]
      [if [is-empty sub-forms]
        type-empty-tuple
        [do
          [for i 0 [dec [size sub-forms]]
            [go level lctx [at sub-forms i]]]
          [go level lctx [last sub-forms]]]]]
    [func go-func [level lctx func function-kind]
      [let
        [level-1 [inc level]
         gen-func-type [generate-fresh-type-var gctx level-1]
         func-type-scheme [mk-empty-type-scheme gen-func-type]
         param-ctx [transient-kv-map]
         func-ctx [make-local-context param-ctx lctx [local-context-kind/func]]
         reg-params [growable-list]
         takes-form-params
           [match function-kind
             [function-kind/func] false
             [function-kind/macro] true
             [function-kind/fexpr] true
             [logq-abort check function-kind not recognized]]]
        [set-kv-map param-ctx [syntax-word/word [bfunc/name func]] func-type-scheme]
        [for-each param [bfunc/parameters func]
          [let [tv [if takes-form-params type-form [generate-fresh-type-var gctx level-1]]]
            [set-kv-map param-ctx [syntax-word/word param] [mk-empty-type-scheme tv]]
            [push reg-params tv]]]
        [let [opt-rest
              [if-let [rest-param [bfunc/rest-param func]]
                [let [tv [if takes-form-params type-form [generate-fresh-type-var gctx level-1]]]
                  [set-kv-map param-ctx [syntax-word/word rest-param] [mk-empty-type-scheme [type-list tv]]]
                  [some tv]]
                [none]]
              return-type [go-forms level-1 func-ctx [bfunc/body func]]]
          [unify-report gctx
            gen-func-type
            [ctype/inst
              [inst-type/func
                [func-type
                  [clone-growable-to-frozen-list reg-params]
                  opt-rest
                  return-type
                  function-kind]]]
            func]
          [match function-kind
            [function-kind/macro]
            [unify-report gctx return-type type-form [last [bfunc/body func]]]

            [do]]]
        [annotate gctx func gen-func-type]]]
    [func go [level lctx bform]
      [match bform
        [bexp/var w]
        [if-let [type-scheme [try-get-var-type gctx lctx [syntax-word/word w]]]
          [specialize-type-scheme [check-context/type-var-counter gctx] level type-scheme]
          [do
            [report-sword gctx w [quote [variable not found]]]
            [generate-fresh-type-var-atom [check-context/type-var-counter gctx] level]]]

        [bexp/literal l]
        [literal-to-type l]

        [bexp/intrinsic in]
        [intrinsic-name-to-type [syntax-word/word in]]

        [bexp/if cond then else]
        [let
          [cond-type [go level lctx cond]
           then-type [go level lctx then]
           else-type [go level lctx else]]
          [unify-report gctx type-i32 cond-type cond]
          [unify-report gctx then-type else-type then]
          [annotate gctx bform then-type]]

        [bexp/do sub-forms]
        [go-forms level lctx sub-forms]

        [bexp/let bindings bodies]
        [let
          [var-types [transient-kv-map]
           let-ctx [make-local-context var-types lctx [local-context-kind/let]]
           level-1 [inc level]]
          [for-each binding bindings
            [let
              [var [pair/fst binding]
               value [pair/snd binding]
               val-type [go level-1 let-ctx value]
               general-val-type
               [if [is-syntactic-value value]
                 [generalize level val-type]
                 [mk-empty-type-scheme val-type]]]
              [set-kv-map var-types [syntax-word/word var] general-val-type]]]
          [go-forms level let-ctx bodies]]

        [bexp/loop bindings bodies]
        [let
          [var-types [transient-kv-map]
           loop-ctx [make-local-context var-types lctx [local-context-kind/loop]]
           level-1 [inc level]]
          [for-each binding bindings
            [let
              [var [pair/fst binding]
               value [pair/snd binding]
               val-type [go level-1 loop-ctx value]
               general-val-type [mk-empty-type-scheme val-type]]
              [annotate gctx value val-type]
              [set-kv-map var-types [syntax-word/word var] general-val-type]]]

          [annotate gctx bform [go-forms level loop-ctx bodies]]]

        [bexp/continue assignments]
        [do
          [when-let [loop-context [try-get-enclosing-loop-context lctx]]
            [for-each assignment assignments
              [let
                [loop-vars [local-context/vars loop-context]
                 loop-var-type-scheme [get loop-vars [syntax-word/word [pair/fst assignment]]]
                 value [pair/snd assignment]
                 val-type [go level lctx value]]
                [unify-report gctx [check-type-scheme/type loop-var-type-scheme] val-type value]]]]
          [generate-fresh-type-var gctx level]]

        [bexp/letfn funcs bodies]
        [let
          [var-types [transient-kv-map]
           letfn-ctx [make-local-context var-types lctx [local-context-kind/letfn]]
           level-1 [inc level]
           gtmp-types [growable-list]]
          [for-each func funcs
            [let
              [tmp-type [generate-fresh-type-var gctx level-1]]
              [push gtmp-types tmp-type]
              [set-kv-map var-types [syntax-word/word [bfunc/name func]] [generalize level tmp-type]]]]
          [let [tmp-types [clone-growable-to-frozen-list gtmp-types]]
            [for i 0 [size funcs]
            [let
              [tmp-type [at tmp-types i]
               func [at funcs i]
               ft [go-func level letfn-ctx func [function-kind/func]]]
              [unify-report gctx tmp-type ft func]]]]
          [go-forms level letfn-ctx bodies]]

        [bexp/func f]
        [go-func level lctx f [function-kind/func]]

        [bexp/switch switch-value clauses default]
        [let [switch-type [go level lctx switch-value]
              result-type [generate-fresh-type-var gctx level]]
          [for-each clause clauses
            [let [values [pair/fst clause]
                  branch [pair/snd clause]]
              [for-each value values
                [unify-report gctx switch-type [go level lctx value] value]]
              [unify-report gctx [go level lctx branch] result-type branch]]]
          [unify-report gctx [go level lctx default] result-type default]
          result-type]

        [bexp/match match-value clauses opt-default]
        [let [match-type [go level lctx match-value]
              mresult-type [generate-fresh-type-var gctx level]
              try-get-def-desc [syntax-info/try-get-def-desc [check-context/syntax-info gctx]]
              def-desc-from-sname
              [func ddfn [node] [if-let [dd [try-get-def-desc node]] dd [logq-abort match def-desc not found]]]]
          [for-each clause clauses
            [let [mpattern [pair/fst clause]
                  branch [pair/snd clause]
                  ctor-sname [match-pattern/ctor mpattern]
                  match-params [match-pattern/params mpattern]
                  dvts [get [check-context/def-var-types gctx] [syntax-word/word ctor-sname]]
                  var-types [transient-kv-map]
                  branch-ctx [make-local-context var-types lctx [local-context-kind/match]]]
                  [match [def-desc-from-sname ctor-sname]
                    [def-desc/union-ctor union-desc index]
                    [let [type-name [union-desc/name union-desc]
                          type-params [union-desc/type-params union-desc]
                          ctor [at [union-desc/ctors union-desc] index]
                          t-def [get [check-context/types gctx] [syntax-word/word type-name]]
                          rt [type-def/result-type t-def]
                          param-map [type-def/param-map t-def]
                          param-types [pair/snd ctor]
                          growable-params [growable-list]]
                      [assert [eq [size param-types] [size match-params]] match pattern and union ctor arity mismatch]
                      [for i 0 [size match-params]
                        [let [pattern-var [at match-params i]
                              param-type [generate-fresh-type-var gctx level]
                              param-type-scheme [mk-empty-type-scheme param-type]]
                          [push growable-params param-type]
                          [set-kv-map var-types [syntax-word/word pattern-var] param-type-scheme]]]
                      [unify-report gctx
                        [specialize-type-scheme [check-context/type-var-counter gctx] level dvts]
                        [type-ctor [clone-growable-to-frozen-list growable-params] match-type]
                        branch]]

                    [logq-abort match not bound to union ctor]]
              [unify-report gctx [go level branch-ctx branch] mresult-type branch]
              ]]
          [when-let [default-form opt-default]
            [unify-report gctx [go level lctx default-form] mresult-type default-form]]
          mresult-type]

        [bexp/call f args]
        [let
          [ft [go level lctx f]
           arg-types [list-map-fn [func f [arg] [go level lctx arg]] args]
           t-res [generate-fresh-type-var gctx level]
           t-func [type-func-no-rest arg-types t-res]]
          [unify-report gctx ft t-func bform]
          t-res]

        [bexp/call-fexpr f form-args]
        [let
          [ft [go level lctx f]
           arg-types [list-map-fn [func f [arg] type-form] form-args]
           t-res [generate-fresh-type-var gctx level]
           t-func [type-func-no-rest arg-types t-res]]
          [unify-report gctx ft t-func bform]
          t-res]

        [bexp/extern es]
        [generate-fresh-type-var gctx level]

        [bexp/type-anno bf bts]
        [let
          [value-type [go level lctx bf]
           inst-anno-type [instantiate-syntax-type-scheme [check-context/type-var-counter gctx] level bts]]
          [unify-report gctx value-type inst-anno-type bf]
          value-type]

        [do
          [log bform]
          [logq-abort check2 not implemented]]]]
      [func check-top [form]
        [match form
          [btop/type decls]
          [let
            [types [check-context/types gctx]
            def-var-types [check-context/def-var-types gctx]]
            [for-each decl decls
              [let [sname [type-decl/name decl]
                    name-word [syntax-word/word sname]]
                [if [has types name-word]
                  [report-sword gctx sname [quote [already defined]]]
                  [let [type-params-list [type-decl/type-params decl]
                        param-map [transient-kv-map]
                        type-args [growable-list]]
                    [for-each param-word type-params-list
                      [when [has param-map [syntax-word/word param-word]]
                        [report-sword gctx param-word [quote [already defined]]]]
                      [let [tv [generate-fresh-type-var gctx 1]]
                        [set-kv-map param-map [syntax-word/word param-word] tv]
                        [push type-args tv]]]
                    [set-kv-map types name-word
                      [type-def
                        [size type-params-list]
                        param-map
                        [make-type-list name-word [clone-growable-to-frozen-list type-args]]]]]]]]
            [for-each decl decls
              [let
              [sname [type-decl/name decl]
                name-word [syntax-word/word sname]type-prefix [concat-words name-word [word /]]
                this-type-def [get types name-word]
                result-type [type-def/result-type this-type-def]
                param-map [type-def/param-map this-type-def]]
              [match [type-decl/kind decl]
                [type-decl-kind/union ctors]
                [for-each ctor ctors
                  [let [param-list [list-map param [pair/snd ctor] [instantiate-syntax-type param-map param]]
                        tctor [type-ctor param-list result-type]]
                    [set-kv-map def-var-types
                      [concat-words type-prefix [syntax-word/word [pair/fst ctor]]]
                      [generalize-top tctor]]]]

                [type-decl-kind/record field-decls]
                [let
                  [fields [growable-list]]
                  [for-each field field-decls
                    [let
                      [inst-field-type [instantiate-syntax-type param-map [pair/snd field]]]
                      [push fields inst-field-type]
                      [set-kv-map def-var-types [concat-words type-prefix [syntax-word/word [pair/fst field]]]
                          [generalize-top [type-func-no-rest [list result-type] inst-field-type]]]]]
                  [set-kv-map def-var-types name-word
                    [generalize-top [type-func-no-rest [clone-growable-to-frozen-list fields] [type-def/result-type this-type-def]]]]]

                [logq-abort check type definition not recognized]]]]
            ]

          [btop/def var value]
          [let
            [value-type [go 1 [local-stack/empty] value]
             general-val-type
              [if [is-syntactic-value value]
                [generalize 0 value-type]
                [mk-empty-type-scheme value-type]]]
              [set-kv-map [check-context/def-var-types gctx] [syntax-word/word var] general-val-type]]

          [btop/defunc kind f]
          [let
            [fkind
             [match kind
              [bdefunc-kind/func] [function-kind/func]
              [bdefunc-kind/macro] [function-kind/macro]
              [bdefunc-kind/fexpr] [function-kind/fexpr]]
             ft [go-func 0 [local-stack/empty] f fkind]
             general-val-type [generalize 0 ft]]
            [set-kv-map [check-context/def-var-types gctx] [syntax-word/word [bfunc/name f]] general-val-type]]

          [btop/export es]
          [do
            [for-each e es
              [let [type-scheme [get [check-context/def-var-types gctx] [syntax-word/word e]]
                    t [specialize-type-scheme [check-context/type-var-counter gctx] 0 type-scheme]]
                [annotate gctx e t]]]]

          [btop/do btops]
          [for-each btop btops
            [check-top btop]]]]]
      [checker
        [func check-exp [bexp] [go 0 [local-stack/empty] bexp]]
        check-top]]]

[defn normalize-deep [internal-type]
  [let [nt [normalize-type internal-type]]
    [match nt
      [ctype/var tv]
      [match [get-type-var-kind tv]
        [type-var-kind/linked lt] [logq-abort normalize-deep expected a non-linked type var]
        [do]]

      [ctype/inst inst-type]
      [match inst-type
        [inst-type/func ft]
        [do
          [for-each param [func-type/params ft] [normalize-deep param]]
          [when-let [rest-type [func-type/rest-param-opt ft]]
            [normalize-deep rest-type]]
          [normalize-deep [func-type/result ft]]]

        [inst-type/apply type-name type-args]
        [for-each type-arg type-args
          [normalize-deep type-arg]]]]]]

[defn internal-to-present-type [internal-type]
  [let [nt internal-type]
    [match nt
      [ctype/var tv]
      [let [kind [get-type-var-kind tv]]
        [match kind
          [type-var-kind/linked lt] [logq-abort internal-to-present-type expected a non-linked type var]
          [type-var-kind/word w] [form/word w]]]

      [ctype/inst inst-type]
      [match inst-type
        [inst-type/func ft]
        [flist [quote func]
          [if-let [rest-type [func-type/rest-param-opt ft]]
            [form-concat [list-map type [func-type/params ft] [internal-to-present-type type]] [list [quote ..] [internal-to-present-type rest-type]]]
            [form/list [list-map type [func-type/params ft] [internal-to-present-type type]]]]
          [internal-to-present-type [func-type/result ft]]]

        [inst-type/apply type-name type-args]
        [if [eq-word type-name [word tuple]]
          [form-concat [list [quote tuple]] [list-map type type-args [internal-to-present-type type]]]
          [let [n-of-args [size type-args]]
            [if n-of-args
              [form-concat
                [list [form/word type-name]]
                [list-map ta [slice type-args 0 n-of-args] [internal-to-present-type ta]]]
              [form/word type-name]]]]]]]]

[defn normalize-present-type-scheme [internal-type]
  [normalize-deep internal-type]
  [let
       [type-vars [free-type-vars internal-type]
        type-var-counter [atom 0]
        subst-assoc-list [list-map tv type-vars [pair tv [generate-fresh-type-var-atom type-var-counter 0]]]
        copied-type [copy-type subst-assoc-list internal-type]
        new-present-type-vars [list-map tv [free-type-vars copied-type]
          [let [kind [get-type-var-kind tv]]
            [match kind
              [type-var-kind/linked lt] [logq-abort internal-to-present-type expected a non-linked type var]
              [type-var-kind/word w] [form/word w]]]]]
    [if [is-empty new-present-type-vars]
      [internal-to-present-type copied-type]
      [flist [quote type-scheme]
        [form/list new-present-type-vars]
        [internal-to-present-type copied-type]]]]]
