[load compile-js.wuns]

[defmacro disable [.. -]
  [quote [do]]]

[defn test-error-fn [evaluator forms]
  [match [evaluator forms]
    [result/error e]
    [do]

    [result/ok actual]
    [logq for the forms [identity forms] we expected error]
    [logq-abort test-error-fn found no error]]]

[defmacro test-error [.. forms]
  [flist [quote do]
    [quote [inc-atom test-assert-count-atom]]
    [flist [quote test-error-fn]
      [quote [mk-evaluator]]
      [form-concat [list [quote list]] [list-map f forms [mk-quote f]]]]]]

[defn test-ok-fn [evaluator expected-result forms]
  [match [evaluator forms]
    [result/error e]
    [do
      [log e]
      [logq-abort test-ok-fn found error]]
    [result/ok actual]
    [when-not [is-identical actual [to-js-value expected-result]]
      [logq test failed]
      [logq for the forms [identity forms] we expected]
      [log expected-result]
      [logq but got]
      [log actual]]]]

[defmacro test-ok [expected-result .. forms]
  [flist [quote do]
    [quote [inc-atom test-assert-count-atom]]
    [flist [quote test-ok-fn]
      [quote [mk-evaluator]]
      expected-result
      [form-concat [list [quote list]] [list-map f forms [mk-quote f]]]]]]

[defn run-test-suite [mk-evaluator]
  [let-do [test-assert-count-atom [atom 0]]
  [comment check if we accidentally allow octal numbers with 00 - result would be 8 in that case]
  [test-ok [i32 10] [i32 0010]]
  [test-ok [i32 16] [i32 0x10]]
  [test-ok [i32 2]  [i32 0b10]]
  [test-ok [i32 8]  [i32 0o10]]
[disable
  [test-error [i32 0x]]
  [test-error [i32 non-an-integer]]
  [test-error [i32 2.147.483.648]]
  [test-error [i32 2147483648]]
  [test-ok [i32 2147483647] [i32 2147483647]]
]
  [comment the interface is not type safe - so this works]
  [test-ok [f64 1] [i32 1]]

  [test-ok [word abc] [word abc]]
  [test-ok [word 00123] [word 00123]]

  [test-ok [i32 5] [[intrinsic i32.add] [i32 2] [i32 3]]]
  [test-ok [i32 5] [[intrinsic i32.sub] [i32 8] [i32 3]]]

  [test-ok [i32 2] [[extern host size] [[func list [.. xs] xs] [i32 1] [i32 3]]]]

  [test-error [if]]
  [test-error [if [i32 0]]]
  [test-error [if [i32 0] [word zero]]]
  [test-ok [word one] [if [i32 0] [word zero] [word one]]]
  [test-ok [word zero] [if [i32 1] [word zero] [word one]]]

  [test-error [switch [i32 0] [i32 1] [word one]]]
  [test-error [switch [i32 1] [i32 1] [word one]]]
  [test-ok [word zero]
    [switch [i32 0]
      [[i32 0]] [word zero]
      [[i32 1]] [word one]
      [word not-01]]]
  [test-ok [word one]
    [switch [i32 1]
      [[i32 0]] [word zero]
      [[i32 1]] [word one]
      [word not-01]]]
  [test-ok [word not-01]
    [switch [i32 2]
      [[i32 0]] [word zero]
      [[i32 1]] [word one]
      [word not-01]]]

  [test-ok [i32 5] [[func f [] [i32 5]]]]
  [test-ok [i32 5] [[func id [p] p] [i32 5]]]
  [test-ok [i32 5] [[func sub [p q] [[intrinsic i32.sub] p q]] [i32 8] [i32 3]]]

  [test-ok [i32 5]
    [do
      [def x [i32 5]]
      [def y x]
      y]]

  [test-ok [i32 5]
    [def inc [func inc [x] [[intrinsic i32.add] [i32 1] x]]]
    [def g [func g [x] [inc x]]]
    [g [i32 4]]]

  [test-ok [i32 5]
    [def inc [func inc [x] [let [c [i32 1]] [[intrinsic i32.add] c x]]]]
    [def g [func g [x] [inc x]]]
    [g [i32 4]]]

  [test-ok [i32 6]
    [type form []
      [union
        [word word]
        [list [list form]]]]
    [defexpr my-fexpr [.. xs] [[extern host size] xs]]
    [my-fexpr these arguments are interpreted as forms]]

  [test-ok [i32 5]
    [type form [] [union [word word] [list [list form]]]]
    [def list [func l [.. es] es]]
    [defmacro m [] [form/list [list [form/word [word i32]] [form/word [word 5]]]]]
    [m]]

  [test-ok [i32 5]
    [let [x [i32 2] y [i32 3]] [[intrinsic i32.add] x y]]]

  [test-ok [i32 0]
    [def is-even-slow-letfn
      [func f [outer-n]
        [letfn
          [[func is-even [n] [if [[intrinsic i32.eq] n [i32 0]] [i32 1] [is-odd [[intrinsic i32.sub] n [i32 1]]]]]
           [func is-odd [n] [if [[intrinsic i32.eq] n [i32 0]] [i32 0] [is-even [[intrinsic i32.sub] n [i32 1]]]]]]
          [is-even outer-n]]]]
    [is-even-slow-letfn [i32 5]]]

  [test-ok [word a] [def a [word a]] a]
  [test-ok [i32 4] [def a [i32 4]] a]
  [test-ok [f64 1.5] [def a [f64 1.5]] a]
  [comment the interface is not type safe - so this works]
  [test-ok [f64 1] [def a [i32 1]] a]
  [test-ok [i32 5] [def f [func f [] [i32 5]]] [f]]

  [test-ok [i32 55]
    [def gauss
      [func gauss-direct [n]
        [if n
          [[intrinsic i32.add] n [gauss-direct [[intrinsic i32.sub] n [i32 1]]]]
          [i32 0]]]]
    [gauss [i32 10]]]
  [test-ok [i32 5050]
    [def gauss
      [func gauss-direct [n]
        [if n
          [[intrinsic i32.add] n [gauss-direct [[intrinsic i32.sub] n [i32 1]]]]
          [i32 0]]]]
    [gauss [i32 100]]]
  [comment done testing]
  [logq ran [form/word [int-to-word [atom-get test-assert-count-atom]]]]]]

[defn mk-eval-forms []
  [let [eval-context [make-eval-context [current-dir]]]
    [func eval-forms [forms]
      [let [results [list-map form forms [evaluate-result eval-context form]]]
      [last results]]]]]

[defn time-fn [f]
  [let-do
    [before [performance-now]
     res [f]]
  [logq it took [[intrinsic f64.sub] [performance-now] before] ms]
  res]]

[defn run-tests []
  [logq running self eval tests]
  [time-fn [func go [] [run-test-suite mk-eval-forms]]]
  [logq running compiler tests]
  [time-fn [func go [] [run-test-suite [func const [] compile-run-forms]]]]
  ]


[defn run-performance-tests [name mk-evaluator]
  [logq running performance tests for [form/word name]]
  [let-do [test-assert-count-atom [atom 0]]

  [time-fn
    [func go []
      [test-ok [i32 5050]
        [[func gauss-direct [n]
          [if n
            [[intrinsic i32.add] n [gauss-direct [[intrinsic i32.sub] n [i32 1]]]]
            [i32 0]]]
          [i32 100]]]]]
  [time-fn
    [func go []
      [test-ok [i32 5050]
        [[func gauss-direct [n]
          [if n
            [[intrinsic i32.add] n [gauss-direct [[intrinsic i32.sub] n [i32 1]]]]
            [i32 0]]]
          [i32 100]]]]]
  [time-fn
    [func go []
      [test-ok [i32 500500]
        [def gauss-tail
          [func gauss-tail [nn]
            [[func go [res n]
              [if n
                [go [[intrinsic i32.add] res n] [[intrinsic i32.sub] n [i32 1]]]
                res]] [i32 0] nn]]]
        [gauss-tail [i32 1000]]]]]
  [comment this version has a data dependency between parameters
  when tail calling does destructive updates we need a temporary variable]
  [time-fn
    [func go []
      [test-ok [i32 500500]
        [def gauss-tail-rev
          [func gauss-tail-rev [nn]
            [[func go [n res]
              [if n
                [go [[intrinsic i32.sub] n [i32 1]] [[intrinsic i32.add] res n]]
                res]] nn [i32 0]]]]
        [gauss-tail-rev [i32 1000]]]]]

  [time-fn
    [func go []
      [test-ok [i32 50005000]
        [def gauss-tail
          [func gauss-tail [nn]
            [[func go [res n]
              [if n
                [go [[intrinsic i32.add] res n] [[intrinsic i32.sub] n [i32 1]]]
                res]] [i32 0] nn]]]
        [gauss-tail [i32 10000]]]]]
  [logq the big one 65535 equals 2147450880]
  [time-fn
    [func go []
      [test-ok [i32 2147450880]
        [def gauss-tail
          [func gauss-tail [nn]
            [[func go [res n]
              [if n
                [go [[intrinsic i32.add] res n] [[intrinsic i32.sub] n [i32 1]]]
                res]] [i32 0] nn]]]
        [gauss-tail [i32 65535]]]]]
]]

[defn run-perf-tests []
  [run-performance-tests [word evaluator] mk-eval-forms]
  [run-performance-tests [word compiler] [func const [] compile-run-forms]]
  ]

[def gauss-tail-res-n
  [func gauss-tail [nn]
    [[func go [res n]
      [if n
        [go [[intrinsic i32.add] res n] [[intrinsic i32.sub] n [i32 1]]]
        res]] [i32 0] nn]]]

[comment this version has a data dependency between parameters
  when tail calling does destructive updates we need a temporary variable
  for the new value of res - otherwise we would use the new value of n when calculating res]
[def gauss-tail-n-res
  [func gauss-tail [nn]
    [[func go [n res]
      [if n
        [go [[intrinsic i32.sub] n [i32 1]] [[intrinsic i32.add] res n]]
        res]] nn [i32 0]]]]
[def gauss-tail-rev
          [func gauss-tail-rev [nn]
            [[func go [n res]
              [if n
                [go [[intrinsic i32.sub] n [i32 1]] [[intrinsic i32.add] res n]]
                res]] nn [i32 0]]]]